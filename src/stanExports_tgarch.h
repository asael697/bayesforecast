// Generated by rstantools.  Do not edit by hand.

/*
    Bforecast is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Bforecast is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Bforecast.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.36.0-91-ge511e97
#include <stan/model/model_header.hpp>
namespace model_tgarch_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 343> locations_array__ =
  {" (found before start of program)",
  " (in 'tgarch', line 44, column 2 to column 11)",
  " (in 'tgarch', line 45, column 2 to column 23)",
  " (in 'tgarch', line 46, column 2 to column 18)",
  " (in 'tgarch', line 47, column 2 to column 34)",
  " (in 'tgarch', line 48, column 2 to column 34)",
  " (in 'tgarch', line 49, column 2 to column 34)",
  " (in 'tgarch', line 50, column 2 to column 35)",
  " (in 'tgarch', line 51, column 2 to column 19)",
  " (in 'tgarch', line 52, column 2 to column 31)",
  " (in 'tgarch', line 53, column 2 to column 33)",
  " (in 'tgarch', line 54, column 2 to column 33)",
  " (in 'tgarch', line 57, column 2 to column 15)",
  " (in 'tgarch', line 58, column 2 to column 15)",
  " (in 'tgarch', line 60, column 2 to column 15)",
  " (in 'tgarch', line 61, column 2 to column 20)",
  " (in 'tgarch', line 62, column 2 to column 27)",
  " (in 'tgarch', line 234, column 2 to column 18)",
  " (in 'tgarch', line 235, column 2 to column 20)",
  " (in 'tgarch', line 236, column 2 to column 16)",
  " (in 'tgarch', line 237, column 2 to column 22)",
  " (in 'tgarch', line 68, column 9 to column 30)",
  " (in 'tgarch', line 67, column 26 to column 41)",
  " (in 'tgarch', line 67, column 4 to line 68, column 30)",
  " (in 'tgarch', line 66, column 16 to line 69, column 3)",
  " (in 'tgarch', line 66, column 2 to line 69, column 3)",
  " (in 'tgarch', line 72, column 9 to column 28)",
  " (in 'tgarch', line 71, column 27 to column 42)",
  " (in 'tgarch', line 71, column 4 to line 72, column 28)",
  " (in 'tgarch', line 70, column 15 to line 73, column 3)",
  " (in 'tgarch', line 70, column 2 to line 73, column 3)",
  " (in 'tgarch', line 76, column 7 to column 28)",
  " (in 'tgarch', line 75, column 13 to column 28)",
  " (in 'tgarch', line 75, column 2 to line 76, column 28)",
  " (in 'tgarch', line 81, column 5 to column 18)",
  " (in 'tgarch', line 82, column 5 to column 23)",
  " (in 'tgarch', line 84, column 38 to column 60)",
  " (in 'tgarch', line 84, column 28 to column 60)",
  " (in 'tgarch', line 84, column 14 to column 60)",
  " (in 'tgarch', line 84, column 4 to column 60)",
  " (in 'tgarch', line 86, column 38 to column 66)",
  " (in 'tgarch', line 86, column 28 to column 66)",
  " (in 'tgarch', line 86, column 14 to column 66)",
  " (in 'tgarch', line 86, column 4 to column 66)",
  " (in 'tgarch', line 87, column 4 to column 30)",
  " (in 'tgarch', line 91, column 40 to column 80)",
  " (in 'tgarch', line 91, column 30 to column 80)",
  " (in 'tgarch', line 91, column 16 to column 80)",
  " (in 'tgarch', line 91, column 6 to column 80)",
  " (in 'tgarch', line 93, column 41 to column 81)",
  " (in 'tgarch', line 93, column 30 to column 81)",
  " (in 'tgarch', line 93, column 16 to column 81)",
  " (in 'tgarch', line 93, column 6 to column 81)",
  " (in 'tgarch', line 89, column 14 to line 94, column 5)",
  " (in 'tgarch', line 89, column 4 to line 94, column 5)",
  " (in 'tgarch', line 97, column 9 to column 35)",
  " (in 'tgarch', line 96, column 19 to column 69)",
  " (in 'tgarch', line 96, column 4 to line 97, column 35)",
  " (in 'tgarch', line 99, column 37 to column 69)",
  " (in 'tgarch', line 99, column 27 to column 69)",
  " (in 'tgarch', line 99, column 14 to column 69)",
  " (in 'tgarch', line 99, column 4 to column 69)",
  " (in 'tgarch', line 101, column 28 to column 83)",
  " (in 'tgarch', line 101, column 19 to column 83)",
  " (in 'tgarch', line 101, column 4 to column 83)",
  " (in 'tgarch', line 80, column 15 to line 102, column 3)",
  " (in 'tgarch', line 80, column 2 to line 102, column 3)",
  " (in 'tgarch', line 245, column 6 to column 53)",
  " (in 'tgarch', line 246, column 6 to column 52)",
  " (in 'tgarch', line 247, column 6 to column 27)",
  " (in 'tgarch', line 244, column 8 to line 248, column 5)",
  " (in 'tgarch', line 240, column 6 to column 61)",
  " (in 'tgarch', line 241, column 5 to column 59)",
  " (in 'tgarch', line 242, column 5 to column 26)",
  " (in 'tgarch', line 239, column 17 to line 243, column 5)",
  " (in 'tgarch', line 239, column 4 to line 248, column 5)",
  " (in 'tgarch', line 238, column 15 to line 249, column 3)",
  " (in 'tgarch', line 238, column 2 to line 249, column 3)",
  " (in 'tgarch', line 250, column 2 to column 22)",
  " (in 'tgarch', line 117, column 27 to column 92)",
  " (in 'tgarch', line 117, column 7 to column 92)",
  " (in 'tgarch', line 116, column 27 to column 71)",
  " (in 'tgarch', line 116, column 7 to line 117, column 92)",
  " (in 'tgarch', line 115, column 27 to column 72)",
  " (in 'tgarch', line 115, column 7 to line 117, column 92)",
  " (in 'tgarch', line 114, column 27 to column 79)",
  " (in 'tgarch', line 114, column 7 to line 117, column 92)",
  " (in 'tgarch', line 113, column 27 to column 50)",
  " (in 'tgarch', line 113, column 7 to line 117, column 92)",
  " (in 'tgarch', line 112, column 27 to column 75)",
  " (in 'tgarch', line 112, column 7 to line 117, column 92)",
  " (in 'tgarch', line 111, column 27 to column 83)",
  " (in 'tgarch', line 111, column 7 to line 117, column 92)",
  " (in 'tgarch', line 110, column 27 to column 80)",
  " (in 'tgarch', line 110, column 7 to line 117, column 92)",
  " (in 'tgarch', line 109, column 27 to column 96)",
  " (in 'tgarch', line 109, column 7 to line 117, column 92)",
  " (in 'tgarch', line 108, column 27 to column 81)",
  " (in 'tgarch', line 108, column 7 to line 117, column 92)",
  " (in 'tgarch', line 107, column 27 to column 78)",
  " (in 'tgarch', line 107, column 7 to line 117, column 92)",
  " (in 'tgarch', line 106, column 27 to column 80)",
  " (in 'tgarch', line 106, column 2 to line 117, column 92)",
  " (in 'tgarch', line 130, column 30 to column 104)",
  " (in 'tgarch', line 130, column 7 to column 104)",
  " (in 'tgarch', line 129, column 30 to column 80)",
  " (in 'tgarch', line 129, column 7 to line 130, column 104)",
  " (in 'tgarch', line 128, column 30 to column 81)",
  " (in 'tgarch', line 128, column 7 to line 130, column 104)",
  " (in 'tgarch', line 127, column 30 to column 91)",
  " (in 'tgarch', line 127, column 7 to line 130, column 104)",
  " (in 'tgarch', line 126, column 30 to column 53)",
  " (in 'tgarch', line 126, column 7 to line 130, column 104)",
  " (in 'tgarch', line 125, column 30 to column 84)",
  " (in 'tgarch', line 125, column 7 to line 130, column 104)",
  " (in 'tgarch', line 124, column 30 to column 95)",
  " (in 'tgarch', line 124, column 7 to line 130, column 104)",
  " (in 'tgarch', line 123, column 30 to column 92)",
  " (in 'tgarch', line 123, column 7 to line 130, column 104)",
  " (in 'tgarch', line 122, column 30 to column 111)",
  " (in 'tgarch', line 122, column 7 to line 130, column 104)",
  " (in 'tgarch', line 121, column 30 to column 93)",
  " (in 'tgarch', line 121, column 7 to line 130, column 104)",
  " (in 'tgarch', line 120, column 30 to column 90)",
  " (in 'tgarch', line 120, column 7 to line 130, column 104)",
  " (in 'tgarch', line 119, column 30 to column 92)",
  " (in 'tgarch', line 119, column 2 to line 130, column 104)",
  " (in 'tgarch', line 145, column 34 to column 109)",
  " (in 'tgarch', line 145, column 11 to column 109)",
  " (in 'tgarch', line 144, column 34 to column 85)",
  " (in 'tgarch', line 144, column 11 to line 145, column 109)",
  " (in 'tgarch', line 143, column 34 to column 86)",
  " (in 'tgarch', line 143, column 11 to line 145, column 109)",
  " (in 'tgarch', line 142, column 34 to column 96)",
  " (in 'tgarch', line 142, column 11 to line 145, column 109)",
  " (in 'tgarch', line 141, column 34 to column 57)",
  " (in 'tgarch', line 141, column 11 to line 145, column 109)",
  " (in 'tgarch', line 140, column 34 to column 89)",
  " (in 'tgarch', line 140, column 11 to line 145, column 109)",
  " (in 'tgarch', line 139, column 34 to column 100)",
  " (in 'tgarch', line 139, column 11 to line 145, column 109)",
  " (in 'tgarch', line 138, column 34 to column 97)",
  " (in 'tgarch', line 138, column 11 to line 145, column 109)",
  " (in 'tgarch', line 137, column 34 to column 116)",
  " (in 'tgarch', line 137, column 11 to line 145, column 109)",
  " (in 'tgarch', line 136, column 34 to column 98)",
  " (in 'tgarch', line 136, column 11 to line 145, column 109)",
  " (in 'tgarch', line 135, column 34 to column 95)",
  " (in 'tgarch', line 135, column 11 to line 145, column 109)",
  " (in 'tgarch', line 134, column 34 to column 97)",
  " (in 'tgarch', line 134, column 6 to line 145, column 109)",
  " (in 'tgarch', line 133, column 18 to line 146, column 5)",
  " (in 'tgarch', line 133, column 4 to line 146, column 5)",
  " (in 'tgarch', line 132, column 12 to line 147, column 3)",
  " (in 'tgarch', line 132, column 2 to line 147, column 3)",
  " (in 'tgarch', line 153, column 31 to column 90)",
  " (in 'tgarch', line 153, column 10 to column 90)",
  " (in 'tgarch', line 152, column 31 to column 92)",
  " (in 'tgarch', line 152, column 10 to line 153, column 90)",
  " (in 'tgarch', line 151, column 26 to column 84)",
  " (in 'tgarch', line 151, column 5 to line 153, column 90)",
  " (in 'tgarch', line 150, column 17 to line 154, column 5)",
  " (in 'tgarch', line 150, column 4 to line 154, column 5)",
  " (in 'tgarch', line 149, column 11 to line 155, column 3)",
  " (in 'tgarch', line 149, column 2 to line 155, column 3)",
  " (in 'tgarch', line 161, column 32 to column 91)",
  " (in 'tgarch', line 161, column 11 to column 91)",
  " (in 'tgarch', line 160, column 32 to column 93)",
  " (in 'tgarch', line 160, column 11 to line 161, column 91)",
  " (in 'tgarch', line 159, column 27 to column 85)",
  " (in 'tgarch', line 159, column 6 to line 161, column 91)",
  " (in 'tgarch', line 158, column 17 to line 162, column 5)",
  " (in 'tgarch', line 158, column 4 to line 162, column 5)",
  " (in 'tgarch', line 157, column 11 to line 163, column 3)",
  " (in 'tgarch', line 157, column 2 to line 163, column 3)",
  " (in 'tgarch', line 169, column 33 to column 97)",
  " (in 'tgarch', line 169, column 10 to column 97)",
  " (in 'tgarch', line 168, column 33 to column 94)",
  " (in 'tgarch', line 168, column 10 to line 169, column 97)",
  " (in 'tgarch', line 167, column 28 to column 91)",
  " (in 'tgarch', line 167, column 5 to line 169, column 97)",
  " (in 'tgarch', line 166, column 17 to line 170, column 5)",
  " (in 'tgarch', line 166, column 4 to line 170, column 5)",
  " (in 'tgarch', line 165, column 11 to line 171, column 3)",
  " (in 'tgarch', line 165, column 2 to line 171, column 3)",
  " (in 'tgarch', line 177, column 34 to column 101)",
  " (in 'tgarch', line 177, column 10 to column 101)",
  " (in 'tgarch', line 176, column 34 to column 98)",
  " (in 'tgarch', line 176, column 10 to line 177, column 101)",
  " (in 'tgarch', line 175, column 29 to column 95)",
  " (in 'tgarch', line 175, column 5 to line 177, column 101)",
  " (in 'tgarch', line 174, column 17 to line 178, column 5)",
  " (in 'tgarch', line 174, column 4 to line 178, column 5)",
  " (in 'tgarch', line 173, column 11 to line 179, column 3)",
  " (in 'tgarch', line 173, column 2 to line 179, column 3)",
  " (in 'tgarch', line 194, column 36 to column 117)",
  " (in 'tgarch', line 194, column 11 to column 117)",
  " (in 'tgarch', line 193, column 36 to column 91)",
  " (in 'tgarch', line 193, column 11 to line 194, column 117)",
  " (in 'tgarch', line 192, column 36 to column 92)",
  " (in 'tgarch', line 192, column 11 to line 194, column 117)",
  " (in 'tgarch', line 191, column 36 to column 104)",
  " (in 'tgarch', line 191, column 11 to line 194, column 117)",
  " (in 'tgarch', line 190, column 36 to column 59)",
  " (in 'tgarch', line 190, column 11 to line 194, column 117)",
  " (in 'tgarch', line 189, column 36 to column 95)",
  " (in 'tgarch', line 189, column 11 to line 194, column 117)",
  " (in 'tgarch', line 188, column 36 to column 108)",
  " (in 'tgarch', line 188, column 11 to line 194, column 117)",
  " (in 'tgarch', line 187, column 36 to column 105)",
  " (in 'tgarch', line 187, column 11 to line 194, column 117)",
  " (in 'tgarch', line 186, column 36 to column 126)",
  " (in 'tgarch', line 186, column 11 to line 194, column 117)",
  " (in 'tgarch', line 185, column 36 to column 106)",
  " (in 'tgarch', line 185, column 11 to line 194, column 117)",
  " (in 'tgarch', line 184, column 36 to column 103)",
  " (in 'tgarch', line 184, column 11 to line 194, column 117)",
  " (in 'tgarch', line 183, column 36 to column 105)",
  " (in 'tgarch', line 183, column 6 to line 194, column 117)",
  " (in 'tgarch', line 182, column 17 to line 195, column 5)",
  " (in 'tgarch', line 182, column 4 to line 195, column 5)",
  " (in 'tgarch', line 181, column 11 to line 196, column 3)",
  " (in 'tgarch', line 181, column 2 to line 196, column 3)",
  " (in 'tgarch', line 210, column 29 to column 95)",
  " (in 'tgarch', line 210, column 9 to column 95)",
  " (in 'tgarch', line 209, column 29 to column 74)",
  " (in 'tgarch', line 209, column 9 to line 210, column 95)",
  " (in 'tgarch', line 208, column 29 to column 75)",
  " (in 'tgarch', line 208, column 9 to line 210, column 95)",
  " (in 'tgarch', line 207, column 29 to column 82)",
  " (in 'tgarch', line 207, column 9 to line 210, column 95)",
  " (in 'tgarch', line 206, column 31 to column 56)",
  " (in 'tgarch', line 206, column 9 to line 210, column 95)",
  " (in 'tgarch', line 205, column 29 to column 78)",
  " (in 'tgarch', line 205, column 9 to line 210, column 95)",
  " (in 'tgarch', line 204, column 29 to column 86)",
  " (in 'tgarch', line 204, column 9 to line 210, column 95)",
  " (in 'tgarch', line 203, column 29 to column 83)",
  " (in 'tgarch', line 203, column 9 to line 210, column 95)",
  " (in 'tgarch', line 202, column 29 to column 99)",
  " (in 'tgarch', line 202, column 9 to line 210, column 95)",
  " (in 'tgarch', line 201, column 29 to column 84)",
  " (in 'tgarch', line 201, column 9 to line 210, column 95)",
  " (in 'tgarch', line 200, column 29 to column 81)",
  " (in 'tgarch', line 200, column 9 to line 210, column 95)",
  " (in 'tgarch', line 199, column 26 to column 80)",
  " (in 'tgarch', line 199, column 4 to line 210, column 95)",
  " (in 'tgarch', line 197, column 15 to line 211, column 3)",
  " (in 'tgarch', line 197, column 2 to line 211, column 3)",
  " (in 'tgarch', line 226, column 35 to column 113)",
  " (in 'tgarch', line 226, column 11 to column 113)",
  " (in 'tgarch', line 225, column 35 to column 88)",
  " (in 'tgarch', line 225, column 11 to line 226, column 113)",
  " (in 'tgarch', line 224, column 35 to column 89)",
  " (in 'tgarch', line 224, column 11 to line 226, column 113)",
  " (in 'tgarch', line 223, column 35 to column 100)",
  " (in 'tgarch', line 223, column 11 to line 226, column 113)",
  " (in 'tgarch', line 222, column 35 to column 58)",
  " (in 'tgarch', line 222, column 11 to line 226, column 113)",
  " (in 'tgarch', line 221, column 35 to column 92)",
  " (in 'tgarch', line 221, column 11 to line 226, column 113)",
  " (in 'tgarch', line 220, column 35 to column 104)",
  " (in 'tgarch', line 220, column 11 to line 226, column 113)",
  " (in 'tgarch', line 219, column 35 to column 101)",
  " (in 'tgarch', line 219, column 11 to line 226, column 113)",
  " (in 'tgarch', line 218, column 35 to column 121)",
  " (in 'tgarch', line 218, column 11 to line 226, column 113)",
  " (in 'tgarch', line 217, column 35 to column 102)",
  " (in 'tgarch', line 217, column 11 to line 226, column 113)",
  " (in 'tgarch', line 216, column 35 to column 99)",
  " (in 'tgarch', line 216, column 11 to line 226, column 113)",
  " (in 'tgarch', line 215, column 35 to column 101)",
  " (in 'tgarch', line 215, column 6 to line 226, column 113)",
  " (in 'tgarch', line 214, column 17 to line 227, column 5)",
  " (in 'tgarch', line 214, column 4 to line 227, column 5)",
  " (in 'tgarch', line 213, column 16 to line 228, column 3)",
  " (in 'tgarch', line 213, column 2 to line 228, column 3)",
  " (in 'tgarch', line 230, column 17 to column 63)",
  " (in 'tgarch', line 230, column 2 to column 63)",
  " (in 'tgarch', line 231, column 2 to column 41)",
  " (in 'tgarch', line 18, column 2 to column 17)",
  " (in 'tgarch', line 19, column 2 to column 17)",
  " (in 'tgarch', line 20, column 2 to column 17)",
  " (in 'tgarch', line 21, column 2 to column 17)",
  " (in 'tgarch', line 22, column 2 to column 17)",
  " (in 'tgarch', line 23, column 2 to column 17)",
  " (in 'tgarch', line 24, column 9 to column 10)",
  " (in 'tgarch', line 24, column 2 to column 14)",
  " (in 'tgarch', line 25, column 2 to column 28)",
  " (in 'tgarch', line 26, column 2 to column 17)",
  " (in 'tgarch', line 27, column 9 to column 10)",
  " (in 'tgarch', line 27, column 11 to column 13)",
  " (in 'tgarch', line 27, column 2 to column 20)",
  " (in 'tgarch', line 29, column 2 to column 22)",
  " (in 'tgarch', line 30, column 2 to column 25)",
  " (in 'tgarch', line 31, column 2 to column 24)",
  " (in 'tgarch', line 32, column 9 to column 10)",
  " (in 'tgarch', line 32, column 2 to column 23)",
  " (in 'tgarch', line 33, column 9 to column 10)",
  " (in 'tgarch', line 33, column 2 to column 23)",
  " (in 'tgarch', line 34, column 9 to column 10)",
  " (in 'tgarch', line 34, column 2 to column 25)",
  " (in 'tgarch', line 35, column 9 to column 10)",
  " (in 'tgarch', line 35, column 2 to column 26)",
  " (in 'tgarch', line 36, column 9 to column 10)",
  " (in 'tgarch', line 36, column 2 to column 27)",
  " (in 'tgarch', line 37, column 9 to column 11)",
  " (in 'tgarch', line 37, column 2 to column 26)",
  " (in 'tgarch', line 39, column 2 to column 28)",
  " (in 'tgarch', line 40, column 2 to column 29)",
  " (in 'tgarch', line 41, column 9 to column 16)",
  " (in 'tgarch', line 41, column 2 to column 32)",
  " (in 'tgarch', line 46, column 9 to column 11)",
  " (in 'tgarch', line 47, column 27 to column 28)",
  " (in 'tgarch', line 48, column 27 to column 28)",
  " (in 'tgarch', line 49, column 26 to column 27)",
  " (in 'tgarch', line 50, column 26 to column 27)",
  " (in 'tgarch', line 51, column 9 to column 10)",
  " (in 'tgarch', line 52, column 21 to column 27)",
  " (in 'tgarch', line 53, column 18 to column 24)",
  " (in 'tgarch', line 54, column 18 to column 25)",
  " (in 'tgarch', line 57, column 9 to column 10)",
  " (in 'tgarch', line 58, column 9 to column 10)",
  " (in 'tgarch', line 60, column 9 to column 10)",
  " (in 'tgarch', line 61, column 9 to column 10)",
  " (in 'tgarch', line 62, column 18 to column 19)",
  " (in 'tgarch', line 235, column 9 to column 10)",
  " (in 'tgarch', line 236, column 9 to column 10)",
  " (in 'tgarch', line 237, column 9 to column 10)",
  " (in 'tgarch', line 3, column 4 to column 11)",
  " (in 'tgarch', line 4, column 4 to column 66)",
  " (in 'tgarch', line 5, column 4 to column 20)",
  " (in 'tgarch', line 6, column 4 to column 19)",
  " (in 'tgarch', line 2, column 18 to line 7, column 3)",
  " (in 'tgarch', line 9, column 4 to column 11)",
  " (in 'tgarch', line 10, column 18 to column 24)",
  " (in 'tgarch', line 10, column 4 to column 24)",
  " (in 'tgarch', line 11, column 18 to column 42)",
  " (in 'tgarch', line 11, column 4 to column 42)",
  " (in 'tgarch', line 12, column 18 to column 45)",
  " (in 'tgarch', line 12, column 4 to column 45)",
  " (in 'tgarch', line 13, column 4 to column 23)",
  " (in 'tgarch', line 8, column 43 to line 14, column 3)"};
template <typename T0__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>>* = nullptr>
stan::promote_args_t<T0__> Jpv(const T0__& v, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              std::is_integral<T2__>>* = nullptr>
stan::promote_args_t<T0__, T1__>
asymf(const T0__& u, const T1__& gamma, const T2__& asym, std::ostream*
      pstream__);
// real Jpv(real)
template <typename T0__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>>*>
stan::promote_args_t<T0__> Jpv(const T0__& v, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ y = DUMMY_VAR__;
    current_statement__ = 330;
    y = ((stan::math::trigamma((v / 2)) -
      stan::math::trigamma(((v + 1) / 2))) - ((2 * (v + 3)) / ((v * (v + 1))
      * (v + 1))));
    current_statement__ = 331;
    y = ((v / (v + 3)) * y);
    current_statement__ = 332;
    return stan::math::sqrt(y);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// real asymf(real, real, int)
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              std::is_integral<T2__>>*>
stan::promote_args_t<T0__, T1__>
asymf(const T0__& u, const T1__& gamma, const T2__& asym, std::ostream*
      pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ y = DUMMY_VAR__;
    current_statement__ = 336;
    if (stan::math::logical_eq(asym, 0)) {
      current_statement__ = 335;
      y = u;
    }
    current_statement__ = 338;
    if (stan::math::logical_eq(asym, 1)) {
      current_statement__ = 337;
      y = stan::math::inv_logit((-(gamma) * u));
    }
    current_statement__ = 340;
    if (stan::math::logical_eq(asym, 2)) {
      current_statement__ = 339;
      y = (1 - stan::math::exp((-(gamma) * stan::math::pow(u, 2))));
    }
    current_statement__ = 341;
    return (stan::math::pow(u, 2) * y);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_tgarch final : public model_base_crtp<model_tgarch> {
private:
  int n;
  int s;
  int k;
  int h;
  int p;
  int q;
  Eigen::Matrix<double,-1,1> y_data__;
  int genT;
  int d1;
  Eigen::Matrix<double,-1,-1> xreg_data__;
  Eigen::Matrix<double,-1,1> prior_mu0_data__;
  Eigen::Matrix<double,-1,1> prior_sigma0_data__;
  Eigen::Matrix<double,-1,1> prior_dfv_data__;
  Eigen::Matrix<double,-1,-1> prior_ar_data__;
  Eigen::Matrix<double,-1,-1> prior_ma_data__;
  Eigen::Matrix<double,-1,-1> prior_arch_data__;
  Eigen::Matrix<double,-1,-1> prior_garch_data__;
  Eigen::Matrix<double,-1,-1> prior_mgarch_data__;
  Eigen::Matrix<double,-1,-1> prior_breg_data__;
  int asym;
  int asym1;
  Eigen::Matrix<double,-1,-1> prior_gamma_data__;
  int v_1dim__;
  int lambda_1dim__;
  int gamma_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> xreg{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_mu0{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_sigma0{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_dfv{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> prior_ar{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> prior_ma{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> prior_arch{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> prior_garch{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> prior_mgarch{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> prior_breg{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> prior_gamma{nullptr, 0, 0};
public:
  ~model_tgarch() {}
  model_tgarch(stan::io::var_context& context__, unsigned int
               random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    auto base_rng__ = stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_tgarch_namespace::model_tgarch";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 280;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      current_statement__ = 280;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 280;
      stan::math::check_greater_or_equal(function__, "n", n, 0);
      current_statement__ = 281;
      context__.validate_dims("data initialization", "s", "int",
        std::vector<size_t>{});
      s = std::numeric_limits<int>::min();
      current_statement__ = 281;
      s = context__.vals_i("s")[(1 - 1)];
      current_statement__ = 281;
      stan::math::check_greater_or_equal(function__, "s", s, 0);
      current_statement__ = 282;
      context__.validate_dims("data initialization", "k", "int",
        std::vector<size_t>{});
      k = std::numeric_limits<int>::min();
      current_statement__ = 282;
      k = context__.vals_i("k")[(1 - 1)];
      current_statement__ = 282;
      stan::math::check_greater_or_equal(function__, "k", k, 0);
      current_statement__ = 283;
      context__.validate_dims("data initialization", "h", "int",
        std::vector<size_t>{});
      h = std::numeric_limits<int>::min();
      current_statement__ = 283;
      h = context__.vals_i("h")[(1 - 1)];
      current_statement__ = 283;
      stan::math::check_greater_or_equal(function__, "h", h, 0);
      current_statement__ = 284;
      context__.validate_dims("data initialization", "p", "int",
        std::vector<size_t>{});
      p = std::numeric_limits<int>::min();
      current_statement__ = 284;
      p = context__.vals_i("p")[(1 - 1)];
      current_statement__ = 284;
      stan::math::check_greater_or_equal(function__, "p", p, 0);
      current_statement__ = 285;
      context__.validate_dims("data initialization", "q", "int",
        std::vector<size_t>{});
      q = std::numeric_limits<int>::min();
      current_statement__ = 285;
      q = context__.vals_i("q")[(1 - 1)];
      current_statement__ = 285;
      stan::math::check_greater_or_equal(function__, "q", q, 0);
      current_statement__ = 286;
      stan::math::validate_non_negative_index("y", "n", n);
      current_statement__ = 287;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), n);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 287;
        y_flat__ = context__.vals_r("y");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 288;
      context__.validate_dims("data initialization", "genT", "int",
        std::vector<size_t>{});
      genT = std::numeric_limits<int>::min();
      current_statement__ = 288;
      genT = context__.vals_i("genT")[(1 - 1)];
      current_statement__ = 288;
      stan::math::check_greater_or_equal(function__, "genT", genT, 0);
      current_statement__ = 288;
      stan::math::check_less_or_equal(function__, "genT", genT, 1);
      current_statement__ = 289;
      context__.validate_dims("data initialization", "d1", "int",
        std::vector<size_t>{});
      d1 = std::numeric_limits<int>::min();
      current_statement__ = 289;
      d1 = context__.vals_i("d1")[(1 - 1)];
      current_statement__ = 289;
      stan::math::check_greater_or_equal(function__, "d1", d1, 0);
      current_statement__ = 290;
      stan::math::validate_non_negative_index("xreg", "n", n);
      current_statement__ = 291;
      stan::math::validate_non_negative_index("xreg", "d1", d1);
      current_statement__ = 292;
      context__.validate_dims("data initialization", "xreg", "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(d1)});
      xreg_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, d1,
                      std::numeric_limits<double>::quiet_NaN());
      new (&xreg) Eigen::Map<Eigen::Matrix<double,-1,-1>>(xreg_data__.data(),
        n, d1);
      {
        std::vector<local_scalar_t__> xreg_flat__;
        current_statement__ = 292;
        xreg_flat__ = context__.vals_r("xreg");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= d1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            stan::model::assign(xreg, xreg_flat__[(pos__ - 1)],
              "assigning variable xreg", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 293;
      context__.validate_dims("data initialization", "prior_mu0", "double",
        std::vector<size_t>{static_cast<size_t>(4)});
      prior_mu0_data__ = Eigen::Matrix<double,-1,1>::Constant(4,
                           std::numeric_limits<double>::quiet_NaN());
      new (&prior_mu0)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_mu0_data__.data(), 4);
      {
        std::vector<local_scalar_t__> prior_mu0_flat__;
        current_statement__ = 293;
        prior_mu0_flat__ = context__.vals_r("prior_mu0");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          stan::model::assign(prior_mu0, prior_mu0_flat__[(pos__ - 1)],
            "assigning variable prior_mu0", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 294;
      context__.validate_dims("data initialization", "prior_sigma0",
        "double", std::vector<size_t>{static_cast<size_t>(4)});
      prior_sigma0_data__ = Eigen::Matrix<double,-1,1>::Constant(4,
                              std::numeric_limits<double>::quiet_NaN());
      new (&prior_sigma0)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_sigma0_data__.data(), 4);
      {
        std::vector<local_scalar_t__> prior_sigma0_flat__;
        current_statement__ = 294;
        prior_sigma0_flat__ = context__.vals_r("prior_sigma0");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          stan::model::assign(prior_sigma0, prior_sigma0_flat__[(pos__ - 1)],
            "assigning variable prior_sigma0", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 295;
      context__.validate_dims("data initialization", "prior_dfv", "double",
        std::vector<size_t>{static_cast<size_t>(4)});
      prior_dfv_data__ = Eigen::Matrix<double,-1,1>::Constant(4,
                           std::numeric_limits<double>::quiet_NaN());
      new (&prior_dfv)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_dfv_data__.data(), 4);
      {
        std::vector<local_scalar_t__> prior_dfv_flat__;
        current_statement__ = 295;
        prior_dfv_flat__ = context__.vals_r("prior_dfv");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          stan::model::assign(prior_dfv, prior_dfv_flat__[(pos__ - 1)],
            "assigning variable prior_dfv", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 296;
      stan::math::validate_non_negative_index("prior_ar", "p", p);
      current_statement__ = 297;
      context__.validate_dims("data initialization", "prior_ar", "double",
        std::vector<size_t>{static_cast<size_t>(p), static_cast<size_t>(4)});
      prior_ar_data__ = Eigen::Matrix<double,-1,-1>::Constant(p, 4,
                          std::numeric_limits<double>::quiet_NaN());
      new (&prior_ar)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(prior_ar_data__.data(), p, 4);
      {
        std::vector<local_scalar_t__> prior_ar_flat__;
        current_statement__ = 297;
        prior_ar_flat__ = context__.vals_r("prior_ar");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
            stan::model::assign(prior_ar, prior_ar_flat__[(pos__ - 1)],
              "assigning variable prior_ar", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 298;
      stan::math::validate_non_negative_index("prior_ma", "q", q);
      current_statement__ = 299;
      context__.validate_dims("data initialization", "prior_ma", "double",
        std::vector<size_t>{static_cast<size_t>(q), static_cast<size_t>(4)});
      prior_ma_data__ = Eigen::Matrix<double,-1,-1>::Constant(q, 4,
                          std::numeric_limits<double>::quiet_NaN());
      new (&prior_ma)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(prior_ma_data__.data(), q, 4);
      {
        std::vector<local_scalar_t__> prior_ma_flat__;
        current_statement__ = 299;
        prior_ma_flat__ = context__.vals_r("prior_ma");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= q; ++sym2__) {
            stan::model::assign(prior_ma, prior_ma_flat__[(pos__ - 1)],
              "assigning variable prior_ma", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 300;
      stan::math::validate_non_negative_index("prior_arch", "s", s);
      current_statement__ = 301;
      context__.validate_dims("data initialization", "prior_arch", "double",
        std::vector<size_t>{static_cast<size_t>(s), static_cast<size_t>(4)});
      prior_arch_data__ = Eigen::Matrix<double,-1,-1>::Constant(s, 4,
                            std::numeric_limits<double>::quiet_NaN());
      new (&prior_arch)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(prior_arch_data__.data(), s,
        4);
      {
        std::vector<local_scalar_t__> prior_arch_flat__;
        current_statement__ = 301;
        prior_arch_flat__ = context__.vals_r("prior_arch");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= s; ++sym2__) {
            stan::model::assign(prior_arch, prior_arch_flat__[(pos__ - 1)],
              "assigning variable prior_arch",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 302;
      stan::math::validate_non_negative_index("prior_garch", "k", k);
      current_statement__ = 303;
      context__.validate_dims("data initialization", "prior_garch", "double",
        std::vector<size_t>{static_cast<size_t>(k), static_cast<size_t>(4)});
      prior_garch_data__ = Eigen::Matrix<double,-1,-1>::Constant(k, 4,
                             std::numeric_limits<double>::quiet_NaN());
      new (&prior_garch)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(prior_garch_data__.data(), k,
        4);
      {
        std::vector<local_scalar_t__> prior_garch_flat__;
        current_statement__ = 303;
        prior_garch_flat__ = context__.vals_r("prior_garch");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
            stan::model::assign(prior_garch, prior_garch_flat__[(pos__ - 1)],
              "assigning variable prior_garch",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 304;
      stan::math::validate_non_negative_index("prior_mgarch", "h", h);
      current_statement__ = 305;
      context__.validate_dims("data initialization", "prior_mgarch",
        "double",
        std::vector<size_t>{static_cast<size_t>(h), static_cast<size_t>(4)});
      prior_mgarch_data__ = Eigen::Matrix<double,-1,-1>::Constant(h, 4,
                              std::numeric_limits<double>::quiet_NaN());
      new (&prior_mgarch)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(prior_mgarch_data__.data(),
        h, 4);
      {
        std::vector<local_scalar_t__> prior_mgarch_flat__;
        current_statement__ = 305;
        prior_mgarch_flat__ = context__.vals_r("prior_mgarch");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= h; ++sym2__) {
            stan::model::assign(prior_mgarch, prior_mgarch_flat__[(pos__ -
              1)], "assigning variable prior_mgarch",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 306;
      stan::math::validate_non_negative_index("prior_breg", "d1", d1);
      current_statement__ = 307;
      context__.validate_dims("data initialization", "prior_breg", "double",
        std::vector<size_t>{static_cast<size_t>(d1), static_cast<size_t>(4)});
      prior_breg_data__ = Eigen::Matrix<double,-1,-1>::Constant(d1, 4,
                            std::numeric_limits<double>::quiet_NaN());
      new (&prior_breg)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(prior_breg_data__.data(), d1,
        4);
      {
        std::vector<local_scalar_t__> prior_breg_flat__;
        current_statement__ = 307;
        prior_breg_flat__ = context__.vals_r("prior_breg");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= d1; ++sym2__) {
            stan::model::assign(prior_breg, prior_breg_flat__[(pos__ - 1)],
              "assigning variable prior_breg",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 308;
      context__.validate_dims("data initialization", "asym", "int",
        std::vector<size_t>{});
      asym = std::numeric_limits<int>::min();
      current_statement__ = 308;
      asym = context__.vals_i("asym")[(1 - 1)];
      current_statement__ = 308;
      stan::math::check_greater_or_equal(function__, "asym", asym, 0);
      current_statement__ = 308;
      stan::math::check_less_or_equal(function__, "asym", asym, 2);
      current_statement__ = 309;
      context__.validate_dims("data initialization", "asym1", "int",
        std::vector<size_t>{});
      asym1 = std::numeric_limits<int>::min();
      current_statement__ = 309;
      asym1 = context__.vals_i("asym1")[(1 - 1)];
      current_statement__ = 309;
      stan::math::check_greater_or_equal(function__, "asym1", asym1, 0);
      current_statement__ = 309;
      stan::math::check_less_or_equal(function__, "asym1", asym1, 1);
      current_statement__ = 310;
      stan::math::validate_non_negative_index("prior_gamma", "asym1 * 2",
        (asym1 * 2));
      current_statement__ = 311;
      context__.validate_dims("data initialization", "prior_gamma", "double",
        std::vector<size_t>{static_cast<size_t>((asym1 * 2)),
          static_cast<size_t>(4)});
      prior_gamma_data__ = Eigen::Matrix<double,-1,-1>::Constant((asym1 * 2),
                             4, std::numeric_limits<double>::quiet_NaN());
      new (&prior_gamma)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(prior_gamma_data__.data(),
        (asym1 * 2), 4);
      {
        std::vector<local_scalar_t__> prior_gamma_flat__;
        current_statement__ = 311;
        prior_gamma_flat__ = context__.vals_r("prior_gamma");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= (asym1 * 2); ++sym2__) {
            stan::model::assign(prior_gamma, prior_gamma_flat__[(pos__ - 1)],
              "assigning variable prior_gamma",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 312;
      stan::math::validate_non_negative_index("breg", "d1", d1);
      current_statement__ = 313;
      stan::math::validate_non_negative_index("ar0", "p", p);
      current_statement__ = 314;
      stan::math::validate_non_negative_index("ma0", "q", q);
      current_statement__ = 315;
      stan::math::validate_non_negative_index("arch", "s", s);
      current_statement__ = 316;
      stan::math::validate_non_negative_index("garch", "k", k);
      current_statement__ = 317;
      stan::math::validate_non_negative_index("mgarch", "h", h);
      current_statement__ = 318;
      v_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 318;
      v_1dim__ = (genT * 1);
      current_statement__ = 318;
      stan::math::validate_non_negative_index("v", "genT * 1", v_1dim__);
      current_statement__ = 319;
      lambda_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 319;
      lambda_1dim__ = (genT * n);
      current_statement__ = 319;
      stan::math::validate_non_negative_index("lambda", "genT * n",
        lambda_1dim__);
      current_statement__ = 320;
      gamma_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 320;
      gamma_1dim__ = (asym1 * 2);
      current_statement__ = 320;
      stan::math::validate_non_negative_index("gamma", "asym1 * 2",
        gamma_1dim__);
      current_statement__ = 321;
      stan::math::validate_non_negative_index("ar", "p", p);
      current_statement__ = 322;
      stan::math::validate_non_negative_index("ma", "q", q);
      current_statement__ = 323;
      stan::math::validate_non_negative_index("mu", "n", n);
      current_statement__ = 324;
      stan::math::validate_non_negative_index("epsilon", "n", n);
      current_statement__ = 325;
      stan::math::validate_non_negative_index("sigma", "n", n);
      current_statement__ = 326;
      stan::math::validate_non_negative_index("log_lik", "n", n);
      current_statement__ = 327;
      stan::math::validate_non_negative_index("fit", "n", n);
      current_statement__ = 328;
      stan::math::validate_non_negative_index("residuals", "n", n);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + d1 + p + q + s + k + h + v_1dim__ +
      lambda_1dim__ + gamma_1dim__;
  }
  inline std::string model_name() const final {
    return "model_tgarch";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.36.0-91-ge511e97",
             "stancflags = --allow-undefined"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_tgarch_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto mu0 = in__.template read<local_scalar_t__>();
      current_statement__ = 2;
      auto sigma0 =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 3;
      auto breg =
        in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(d1);
      current_statement__ = 4;
      auto ar0 =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-(1), 1, lp__, p);
      current_statement__ = 5;
      auto ma0 =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-(1), 1, lp__, q);
      current_statement__ = 6;
      auto arch =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__, s);
      current_statement__ = 7;
      auto garch =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__, k);
      current_statement__ = 8;
      auto mgarch =
        in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(h);
      current_statement__ = 9;
      auto v =
        in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__,-1,1>,
          jacobian__>(2.01, lp__, v_1dim__);
      current_statement__ = 10;
      auto lambda =
        in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__,-1,1>,
          jacobian__>(1, lp__, lambda_1dim__);
      current_statement__ = 11;
      auto gamma =
        in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__,-1,1>,
          jacobian__>(0, lp__, gamma_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> ar =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> ma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(q, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> epsilon =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      current_statement__ = 25;
      for (int i = 1; i <= p; ++i) {
        current_statement__ = 23;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_ar, "prior_ar",
                stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
          current_statement__ = 22;
          stan::model::assign(ar,
            stan::model::rvalue(ar0, "ar0", stan::model::index_uni(i)),
            "assigning variable ar", stan::model::index_uni(i));
        } else {
          current_statement__ = 21;
          stan::model::assign(ar, ((2 *
            stan::model::rvalue(ar0, "ar0", stan::model::index_uni(i))) - 1),
            "assigning variable ar", stan::model::index_uni(i));
        }
      }
      current_statement__ = 30;
      for (int i = 1; i <= q; ++i) {
        current_statement__ = 28;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_ma, "prior_ma",
                stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
          current_statement__ = 27;
          stan::model::assign(ma,
            stan::model::rvalue(ma0, "ma0", stan::model::index_uni(i)),
            "assigning variable ma", stan::model::index_uni(i));
        } else {
          current_statement__ = 26;
          stan::model::assign(ma, ((2 *
            stan::model::rvalue(ma0, "ma0", stan::model::index_uni(i))) - 1),
            "assigning variable ma", stan::model::index_uni(i));
        }
      }
      current_statement__ = 33;
      if (stan::math::logical_gt(d1, 0)) {
        current_statement__ = 32;
        stan::model::assign(mu, stan::math::multiply(xreg, breg),
          "assigning variable mu");
      } else {
        current_statement__ = 31;
        stan::model::assign(mu, stan::math::rep_vector(0, n),
          "assigning variable mu");
      }
      current_statement__ = 66;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 34;
        stan::model::assign(mu,
          (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) + mu0),
          "assigning variable mu", stan::model::index_uni(i));
        current_statement__ = 35;
        stan::model::assign(sigma, sigma0, "assigning variable sigma",
          stan::model::index_uni(i));
        current_statement__ = 39;
        if (stan::math::logical_gt(p, 0)) {
          current_statement__ = 38;
          for (int j = 1; j <= p; ++j) {
            current_statement__ = 37;
            if (stan::math::logical_gt(i, j)) {
              current_statement__ = 36;
              stan::model::assign(mu,
                (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
                (stan::model::rvalue(y, "y", stan::model::index_uni((i - j)))
                * stan::model::rvalue(ar, "ar", stan::model::index_uni(j)))),
                "assigning variable mu", stan::model::index_uni(i));
            }
          }
        }
        current_statement__ = 43;
        if (stan::math::logical_gt(q, 0)) {
          current_statement__ = 42;
          for (int j = 1; j <= q; ++j) {
            current_statement__ = 41;
            if (stan::math::logical_gt(i, j)) {
              current_statement__ = 40;
              stan::model::assign(mu,
                (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
                (stan::model::rvalue(epsilon, "epsilon",
                   stan::model::index_uni((i - j))) *
                stan::model::rvalue(ma, "ma", stan::model::index_uni(j)))),
                "assigning variable mu", stan::model::index_uni(i));
            }
          }
        }
        current_statement__ = 44;
        stan::model::assign(epsilon,
          (stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
          stan::model::rvalue(mu, "mu", stan::model::index_uni(i))),
          "assigning variable epsilon", stan::model::index_uni(i));
        current_statement__ = 54;
        if (stan::math::logical_gte(s, k)) {
          current_statement__ = 48;
          if (stan::math::logical_gt(s, 0)) {
            current_statement__ = 47;
            for (int j = 1; j <= s; ++j) {
              current_statement__ = 46;
              if (stan::math::logical_gt(i, j)) {
                current_statement__ = 45;
                stan::model::assign(sigma,
                  (stan::model::rvalue(sigma, "sigma",
                     stan::model::index_uni(i)) +
                  (stan::model::rvalue(arch, "arch",
                     stan::model::index_uni(j)) *
                  stan::math::pow(
                    stan::model::rvalue(epsilon, "epsilon",
                      stan::model::index_uni((i - j))), 2))),
                  "assigning variable sigma", stan::model::index_uni(i));
              }
            }
          }
          current_statement__ = 52;
          if (stan::math::logical_gt(k, 0)) {
            current_statement__ = 51;
            for (int j = 1; j <= k; ++j) {
              current_statement__ = 50;
              if (stan::math::logical_gt(i, j)) {
                current_statement__ = 49;
                stan::model::assign(sigma,
                  (stan::model::rvalue(sigma, "sigma",
                     stan::model::index_uni(i)) +
                  (stan::model::rvalue(garch, "garch",
                     stan::model::index_uni(j)) *
                  stan::math::pow(
                    stan::model::rvalue(sigma, "sigma",
                      stan::model::index_uni((i - j))), 2))),
                  "assigning variable sigma", stan::model::index_uni(i));
              }
            }
          }
        }
        current_statement__ = 57;
        if (stan::math::logical_eq(genT, 1)) {
          current_statement__ = 56;
          stan::model::assign(sigma,
            stan::math::sqrt(
              ((((stan::model::rvalue(v, "v", stan::model::index_uni(1)) - 2)
              *
              stan::model::rvalue(lambda, "lambda", stan::model::index_uni(i)))
              *
              stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)))
              / stan::model::rvalue(v, "v", stan::model::index_uni(1)))),
            "assigning variable sigma", stan::model::index_uni(i));
        } else {
          current_statement__ = 55;
          stan::model::assign(sigma,
            stan::math::sqrt(
              stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i))),
            "assigning variable sigma", stan::model::index_uni(i));
        }
        current_statement__ = 61;
        if (stan::math::logical_gt(h, 0)) {
          current_statement__ = 60;
          for (int j = 1; j <= h; ++j) {
            current_statement__ = 59;
            if (stan::math::logical_gt(i, j)) {
              current_statement__ = 58;
              stan::model::assign(mu,
                (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
                (stan::model::rvalue(mgarch, "mgarch",
                   stan::model::index_uni(j)) *
                stan::model::rvalue(sigma, "sigma",
                  stan::model::index_uni(((i - j) + 1))))),
                "assigning variable mu", stan::model::index_uni(i));
            }
          }
        }
        current_statement__ = 64;
        if (stan::math::logical_eq(asym1, 1)) {
          current_statement__ = 63;
          if (stan::math::logical_gt(i, 1)) {
            current_statement__ = 62;
            stan::model::assign(sigma,
              (stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i))
              +
              (stan::model::rvalue(gamma, "gamma", stan::model::index_uni(1))
              *
              asymf(
                stan::model::rvalue(epsilon, "epsilon",
                  stan::model::index_uni((i - 1))),
                stan::model::rvalue(gamma, "gamma", stan::model::index_uni(2)),
                asym, pstream__))), "assigning variable sigma",
              stan::model::index_uni(i));
          }
        }
      }
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "sigma", sigma, 0);
      {
        current_statement__ = 102;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_mu0, "prior_mu0",
                stan::model::index_uni(4)), 1)) {
          current_statement__ = 101;
          lp_accum__.add(stan::math::normal_lpdf<false>(mu0,
                           stan::model::rvalue(prior_mu0, "prior_mu0",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(prior_mu0, "prior_mu0",
                             stan::model::index_uni(2))));
        } else {
          current_statement__ = 100;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_mu0, "prior_mu0",
                  stan::model::index_uni(4)), 2)) {
            current_statement__ = 99;
            lp_accum__.add(stan::math::beta_lpdf<false>(mu0,
                             stan::model::rvalue(prior_mu0, "prior_mu0",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_mu0, "prior_mu0",
                               stan::model::index_uni(2))));
          } else {
            current_statement__ = 98;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_mu0, "prior_mu0",
                    stan::model::index_uni(4)), 3)) {
              current_statement__ = 97;
              lp_accum__.add(stan::math::uniform_lpdf<false>(mu0,
                               stan::model::rvalue(prior_mu0, "prior_mu0",
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_mu0, "prior_mu0",
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 96;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_mu0, "prior_mu0",
                      stan::model::index_uni(4)), 4)) {
                current_statement__ = 95;
                lp_accum__.add(stan::math::student_t_lpdf<false>(mu0,
                                 stan::model::rvalue(prior_mu0, "prior_mu0",
                                   stan::model::index_uni(3)),
                                 stan::model::rvalue(prior_mu0, "prior_mu0",
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_mu0, "prior_mu0",
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 94;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_mu0, "prior_mu0",
                        stan::model::index_uni(4)), 5)) {
                  current_statement__ = 93;
                  lp_accum__.add(stan::math::cauchy_lpdf<false>(mu0,
                                   stan::model::rvalue(prior_mu0,
                                     "prior_mu0", stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_mu0,
                                     "prior_mu0", stan::model::index_uni(2))));
                } else {
                  current_statement__ = 92;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_mu0, "prior_mu0",
                          stan::model::index_uni(4)), 6)) {
                    current_statement__ = 91;
                    lp_accum__.add(stan::math::inv_gamma_lpdf<false>(mu0,
                                     stan::model::rvalue(prior_mu0,
                                       "prior_mu0", stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_mu0,
                                       "prior_mu0", stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 90;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_mu0, "prior_mu0",
                            stan::model::index_uni(4)), 7)) {
                      current_statement__ = 89;
                      lp_accum__.add(stan::math::inv_chi_square_lpdf<false>(
                                       mu0,
                                       stan::model::rvalue(prior_mu0,
                                         "prior_mu0",
                                         stan::model::index_uni(3))));
                    } else {
                      current_statement__ = 88;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_mu0, "prior_mu0",
                              stan::model::index_uni(4)), 8)) {
                        current_statement__ = 87;
                        lp_accum__.add(-(stan::math::log(sigma0)));
                      } else {
                        current_statement__ = 86;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_mu0, "prior_mu0",
                                stan::model::index_uni(4)), 9)) {
                          current_statement__ = 85;
                          lp_accum__.add(stan::math::gamma_lpdf<false>(mu0,
                                           stan::model::rvalue(prior_mu0,
                                             "prior_mu0",
                                             stan::model::index_uni(1)),
                                           stan::model::rvalue(prior_mu0,
                                             "prior_mu0",
                                             stan::model::index_uni(2))));
                        } else {
                          current_statement__ = 84;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_mu0, "prior_mu0",
                                  stan::model::index_uni(4)), 10)) {
                            current_statement__ = 83;
                            lp_accum__.add(stan::math::exponential_lpdf<
                                             false>(mu0,
                                             stan::model::rvalue(prior_mu0,
                                               "prior_mu0",
                                               stan::model::index_uni(2))));
                          } else {
                            current_statement__ = 82;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_mu0, "prior_mu0",
                                    stan::model::index_uni(4)), 11)) {
                              current_statement__ = 81;
                              lp_accum__.add(stan::math::chi_square_lpdf<
                                               false>(mu0,
                                               stan::model::rvalue(prior_mu0,
                                                 "prior_mu0",
                                                 stan::model::index_uni(3))));
                            } else {
                              current_statement__ = 80;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_mu0,
                                      "prior_mu0", stan::model::index_uni(4)),
                                    12)) {
                                current_statement__ = 79;
                                lp_accum__.add(stan::math::double_exponential_lpdf<
                                                 false>(mu0,
                                                 stan::model::rvalue(
                                                   prior_mu0, "prior_mu0",
                                                   stan::model::index_uni(1)),
                                                 stan::model::rvalue(
                                                   prior_mu0, "prior_mu0",
                                                   stan::model::index_uni(2))));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 126;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_sigma0, "prior_sigma0",
                stan::model::index_uni(4)), 1)) {
          current_statement__ = 125;
          lp_accum__.add(stan::math::normal_lpdf<false>(sigma0,
                           stan::model::rvalue(prior_sigma0, "prior_sigma0",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(prior_sigma0, "prior_sigma0",
                             stan::model::index_uni(2))));
        } else {
          current_statement__ = 124;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_sigma0, "prior_sigma0",
                  stan::model::index_uni(4)), 2)) {
            current_statement__ = 123;
            lp_accum__.add(stan::math::beta_lpdf<false>(sigma0,
                             stan::model::rvalue(prior_sigma0,
                               "prior_sigma0", stan::model::index_uni(1)),
                             stan::model::rvalue(prior_sigma0,
                               "prior_sigma0", stan::model::index_uni(2))));
          } else {
            current_statement__ = 122;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_sigma0, "prior_sigma0",
                    stan::model::index_uni(4)), 3)) {
              current_statement__ = 121;
              lp_accum__.add(stan::math::uniform_lpdf<false>(sigma0,
                               stan::model::rvalue(prior_sigma0,
                                 "prior_sigma0", stan::model::index_uni(1)),
                               stan::model::rvalue(prior_sigma0,
                                 "prior_sigma0", stan::model::index_uni(2))));
            } else {
              current_statement__ = 120;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_sigma0, "prior_sigma0",
                      stan::model::index_uni(4)), 4)) {
                current_statement__ = 119;
                lp_accum__.add(stan::math::student_t_lpdf<false>(sigma0,
                                 stan::model::rvalue(prior_sigma0,
                                   "prior_sigma0", stan::model::index_uni(3)),
                                 stan::model::rvalue(prior_sigma0,
                                   "prior_sigma0", stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_sigma0,
                                   "prior_sigma0", stan::model::index_uni(2))));
              } else {
                current_statement__ = 118;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_sigma0, "prior_sigma0",
                        stan::model::index_uni(4)), 5)) {
                  current_statement__ = 117;
                  lp_accum__.add(stan::math::cauchy_lpdf<false>(sigma0,
                                   stan::model::rvalue(prior_sigma0,
                                     "prior_sigma0",
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_sigma0,
                                     "prior_sigma0",
                                     stan::model::index_uni(2))));
                } else {
                  current_statement__ = 116;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_sigma0, "prior_sigma0",
                          stan::model::index_uni(4)), 6)) {
                    current_statement__ = 115;
                    lp_accum__.add(stan::math::inv_gamma_lpdf<false>(sigma0,
                                     stan::model::rvalue(prior_sigma0,
                                       "prior_sigma0",
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_sigma0,
                                       "prior_sigma0",
                                       stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 114;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_sigma0, "prior_sigma0",
                            stan::model::index_uni(4)), 7)) {
                      current_statement__ = 113;
                      lp_accum__.add(stan::math::inv_chi_square_lpdf<false>(
                                       sigma0,
                                       stan::model::rvalue(prior_sigma0,
                                         "prior_sigma0",
                                         stan::model::index_uni(3))));
                    } else {
                      current_statement__ = 112;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_sigma0, "prior_sigma0",
                              stan::model::index_uni(4)), 8)) {
                        current_statement__ = 111;
                        lp_accum__.add(-(stan::math::log(sigma0)));
                      } else {
                        current_statement__ = 110;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_sigma0,
                                "prior_sigma0", stan::model::index_uni(4)), 9)) {
                          current_statement__ = 109;
                          lp_accum__.add(stan::math::gamma_lpdf<false>(
                                           sigma0,
                                           stan::model::rvalue(prior_sigma0,
                                             "prior_sigma0",
                                             stan::model::index_uni(1)),
                                           stan::model::rvalue(prior_sigma0,
                                             "prior_sigma0",
                                             stan::model::index_uni(2))));
                        } else {
                          current_statement__ = 108;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_sigma0,
                                  "prior_sigma0", stan::model::index_uni(4)),
                                10)) {
                            current_statement__ = 107;
                            lp_accum__.add(stan::math::exponential_lpdf<
                                             false>(sigma0,
                                             stan::model::rvalue(
                                               prior_sigma0, "prior_sigma0",
                                               stan::model::index_uni(2))));
                          } else {
                            current_statement__ = 106;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_sigma0,
                                    "prior_sigma0", stan::model::index_uni(4)),
                                  11)) {
                              current_statement__ = 105;
                              lp_accum__.add(stan::math::chi_square_lpdf<
                                               false>(sigma0,
                                               stan::model::rvalue(
                                                 prior_sigma0,
                                                 "prior_sigma0",
                                                 stan::model::index_uni(3))));
                            } else {
                              current_statement__ = 104;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_sigma0,
                                      "prior_sigma0",
                                      stan::model::index_uni(4)), 12)) {
                                current_statement__ = 103;
                                lp_accum__.add(stan::math::double_exponential_lpdf<
                                                 false>(sigma0,
                                                 stan::model::rvalue(
                                                   prior_sigma0,
                                                   "prior_sigma0",
                                                   stan::model::index_uni(1)),
                                                 stan::model::rvalue(
                                                   prior_sigma0,
                                                   "prior_sigma0",
                                                   stan::model::index_uni(2))));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 154;
        if (stan::math::logical_gt(d1, 0)) {
          current_statement__ = 152;
          for (int i = 1; i <= d1; ++i) {
            current_statement__ = 150;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_breg, "prior_breg",
                    stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
              current_statement__ = 149;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(breg, "breg",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(prior_breg, "prior_breg",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_breg, "prior_breg",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 148;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_breg, "prior_breg",
                      stan::model::index_uni(i), stan::model::index_uni(4)),
                    2)) {
                current_statement__ = 147;
                lp_accum__.add(stan::math::beta_lpdf<false>(
                                 stan::model::rvalue(breg, "breg",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(prior_breg,
                                   "prior_breg", stan::model::index_uni(i),
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_breg,
                                   "prior_breg", stan::model::index_uni(i),
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 146;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_breg, "prior_breg",
                        stan::model::index_uni(i), stan::model::index_uni(4)),
                      3)) {
                  current_statement__ = 145;
                  lp_accum__.add(stan::math::uniform_lpdf<false>(
                                   stan::model::rvalue(breg, "breg",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(prior_breg,
                                     "prior_breg", stan::model::index_uni(i),
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_breg,
                                     "prior_breg", stan::model::index_uni(i),
                                     stan::model::index_uni(2))));
                } else {
                  current_statement__ = 144;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_breg, "prior_breg",
                          stan::model::index_uni(i),
                          stan::model::index_uni(4)), 4)) {
                    current_statement__ = 143;
                    lp_accum__.add(stan::math::student_t_lpdf<false>(
                                     stan::model::rvalue(breg, "breg",
                                       stan::model::index_uni(i)),
                                     stan::model::rvalue(prior_breg,
                                       "prior_breg",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(3)),
                                     stan::model::rvalue(prior_breg,
                                       "prior_breg",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_breg,
                                       "prior_breg",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 142;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_breg, "prior_breg",
                            stan::model::index_uni(i),
                            stan::model::index_uni(4)), 5)) {
                      current_statement__ = 141;
                      lp_accum__.add(stan::math::cauchy_lpdf<false>(
                                       stan::model::rvalue(breg, "breg",
                                         stan::model::index_uni(i)),
                                       stan::model::rvalue(prior_breg,
                                         "prior_breg",
                                         stan::model::index_uni(i),
                                         stan::model::index_uni(1)),
                                       stan::model::rvalue(prior_breg,
                                         "prior_breg",
                                         stan::model::index_uni(i),
                                         stan::model::index_uni(2))));
                    } else {
                      current_statement__ = 140;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_breg, "prior_breg",
                              stan::model::index_uni(i),
                              stan::model::index_uni(4)), 6)) {
                        current_statement__ = 139;
                        lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                                         stan::model::rvalue(breg, "breg",
                                           stan::model::index_uni(i)),
                                         stan::model::rvalue(prior_breg,
                                           "prior_breg",
                                           stan::model::index_uni(i),
                                           stan::model::index_uni(1)),
                                         stan::model::rvalue(prior_breg,
                                           "prior_breg",
                                           stan::model::index_uni(i),
                                           stan::model::index_uni(2))));
                      } else {
                        current_statement__ = 138;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_breg, "prior_breg",
                                stan::model::index_uni(i),
                                stan::model::index_uni(4)), 7)) {
                          current_statement__ = 137;
                          lp_accum__.add(stan::math::inv_chi_square_lpdf<
                                           false>(
                                           stan::model::rvalue(breg, "breg",
                                             stan::model::index_uni(i)),
                                           stan::model::rvalue(prior_breg,
                                             "prior_breg",
                                             stan::model::index_uni(i),
                                             stan::model::index_uni(3))));
                        } else {
                          current_statement__ = 136;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_breg, "prior_breg",
                                  stan::model::index_uni(i),
                                  stan::model::index_uni(4)), 8)) {
                            current_statement__ = 135;
                            lp_accum__.add(-(stan::math::log(sigma0)));
                          } else {
                            current_statement__ = 134;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_breg,
                                    "prior_breg", stan::model::index_uni(i),
                                    stan::model::index_uni(4)), 9)) {
                              current_statement__ = 133;
                              lp_accum__.add(stan::math::gamma_lpdf<false>(
                                               stan::model::rvalue(breg,
                                                 "breg",
                                                 stan::model::index_uni(i)),
                                               stan::model::rvalue(
                                                 prior_breg, "prior_breg",
                                                 stan::model::index_uni(i),
                                                 stan::model::index_uni(1)),
                                               stan::model::rvalue(
                                                 prior_breg, "prior_breg",
                                                 stan::model::index_uni(i),
                                                 stan::model::index_uni(2))));
                            } else {
                              current_statement__ = 132;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_breg,
                                      "prior_breg",
                                      stan::model::index_uni(i),
                                      stan::model::index_uni(4)), 10)) {
                                current_statement__ = 131;
                                lp_accum__.add(stan::math::exponential_lpdf<
                                                 false>(
                                                 stan::model::rvalue(breg,
                                                   "breg",
                                                   stan::model::index_uni(i)),
                                                 stan::model::rvalue(
                                                   prior_breg, "prior_breg",
                                                   stan::model::index_uni(i),
                                                   stan::model::index_uni(2))));
                              } else {
                                current_statement__ = 130;
                                if (stan::math::logical_eq(
                                      stan::model::rvalue(prior_breg,
                                        "prior_breg",
                                        stan::model::index_uni(i),
                                        stan::model::index_uni(4)), 11)) {
                                  current_statement__ = 129;
                                  lp_accum__.add(stan::math::chi_square_lpdf<
                                                   false>(
                                                   stan::model::rvalue(breg,
                                                     "breg",
                                                     stan::model::index_uni(i)),
                                                   stan::model::rvalue(
                                                     prior_breg,
                                                     "prior_breg",
                                                     stan::model::index_uni(i),
                                                     stan::model::index_uni(3))));
                                } else {
                                  current_statement__ = 128;
                                  if (stan::math::logical_eq(
                                        stan::model::rvalue(prior_breg,
                                          "prior_breg",
                                          stan::model::index_uni(i),
                                          stan::model::index_uni(4)), 12)) {
                                    current_statement__ = 127;
                                    lp_accum__.add(stan::math::double_exponential_lpdf<
                                                     false>(
                                                     stan::model::rvalue(
                                                       breg, "breg",
                                                       stan::model::index_uni(
                                                         i)),
                                                     stan::model::rvalue(
                                                       prior_breg,
                                                       "prior_breg",
                                                       stan::model::index_uni(
                                                         i),
                                                       stan::model::index_uni(
                                                         1)),
                                                     stan::model::rvalue(
                                                       prior_breg,
                                                       "prior_breg",
                                                       stan::model::index_uni(
                                                         i),
                                                       stan::model::index_uni(
                                                         2))));
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 164;
        if (stan::math::logical_gt(p, 0)) {
          current_statement__ = 162;
          for (int i = 1; i <= p; ++i) {
            current_statement__ = 160;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_ar, "prior_ar",
                    stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
              current_statement__ = 159;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(ar0, "ar0",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(prior_ar, "prior_ar",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_ar, "prior_ar",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 158;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_ar, "prior_ar",
                      stan::model::index_uni(i), stan::model::index_uni(4)),
                    2)) {
                current_statement__ = 157;
                lp_accum__.add(stan::math::beta_lpdf<false>(
                                 stan::math::abs(
                                   stan::model::rvalue(ar0, "ar0",
                                     stan::model::index_uni(i))),
                                 stan::model::rvalue(prior_ar, "prior_ar",
                                   stan::model::index_uni(i),
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_ar, "prior_ar",
                                   stan::model::index_uni(i),
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 156;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_ar, "prior_ar",
                        stan::model::index_uni(i), stan::model::index_uni(4)),
                      3)) {
                  current_statement__ = 155;
                  lp_accum__.add(stan::math::uniform_lpdf<false>(
                                   stan::model::rvalue(ar0, "ar0",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(prior_ar, "prior_ar",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_ar, "prior_ar",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(2))));
                }
              }
            }
          }
        }
        current_statement__ = 174;
        if (stan::math::logical_gt(q, 0)) {
          current_statement__ = 172;
          for (int i = 1; i <= q; ++i) {
            current_statement__ = 170;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_ma, "prior_ma",
                    stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
              current_statement__ = 169;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(ma0, "ma0",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(prior_ma, "prior_ma",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_ma, "prior_ma",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 168;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_ma, "prior_ma",
                      stan::model::index_uni(i), stan::model::index_uni(4)),
                    2)) {
                current_statement__ = 167;
                lp_accum__.add(stan::math::beta_lpdf<false>(
                                 stan::math::abs(
                                   stan::model::rvalue(ma0, "ma0",
                                     stan::model::index_uni(i))),
                                 stan::model::rvalue(prior_ma, "prior_ma",
                                   stan::model::index_uni(i),
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_ma, "prior_ma",
                                   stan::model::index_uni(i),
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 166;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_ma, "prior_ma",
                        stan::model::index_uni(i), stan::model::index_uni(4)),
                      3)) {
                  current_statement__ = 165;
                  lp_accum__.add(stan::math::uniform_lpdf<false>(
                                   stan::model::rvalue(ma0, "ma0",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(prior_ma, "prior_ma",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_ma, "prior_ma",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(2))));
                }
              }
            }
          }
        }
        current_statement__ = 184;
        if (stan::math::logical_gt(s, 0)) {
          current_statement__ = 182;
          for (int i = 1; i <= s; ++i) {
            current_statement__ = 180;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_arch, "prior_arch",
                    stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
              current_statement__ = 179;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(arch, "arch",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(prior_arch, "prior_arch",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_arch, "prior_arch",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 178;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_arch, "prior_arch",
                      stan::model::index_uni(i), stan::model::index_uni(4)),
                    2)) {
                current_statement__ = 177;
                lp_accum__.add(stan::math::beta_lpdf<false>(
                                 stan::model::rvalue(arch, "arch",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(prior_arch,
                                   "prior_arch", stan::model::index_uni(i),
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_arch,
                                   "prior_arch", stan::model::index_uni(i),
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 176;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_arch, "prior_arch",
                        stan::model::index_uni(i), stan::model::index_uni(4)),
                      3)) {
                  current_statement__ = 175;
                  lp_accum__.add(stan::math::uniform_lpdf<false>(
                                   stan::model::rvalue(arch, "arch",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(prior_arch,
                                     "prior_arch", stan::model::index_uni(i),
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_arch,
                                     "prior_arch", stan::model::index_uni(i),
                                     stan::model::index_uni(2))));
                }
              }
            }
          }
        }
        current_statement__ = 194;
        if (stan::math::logical_gt(k, 0)) {
          current_statement__ = 192;
          for (int i = 1; i <= k; ++i) {
            current_statement__ = 190;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_garch, "prior_garch",
                    stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
              current_statement__ = 189;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(garch, "garch",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(prior_garch,
                                 "prior_garch", stan::model::index_uni(i),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_garch,
                                 "prior_garch", stan::model::index_uni(i),
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 188;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_garch, "prior_garch",
                      stan::model::index_uni(i), stan::model::index_uni(4)),
                    2)) {
                current_statement__ = 187;
                lp_accum__.add(stan::math::beta_lpdf<false>(
                                 stan::model::rvalue(garch, "garch",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(prior_garch,
                                   "prior_garch", stan::model::index_uni(i),
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_garch,
                                   "prior_garch", stan::model::index_uni(i),
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 186;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_garch, "prior_garch",
                        stan::model::index_uni(i), stan::model::index_uni(4)),
                      3)) {
                  current_statement__ = 185;
                  lp_accum__.add(stan::math::uniform_lpdf<false>(
                                   stan::model::rvalue(garch, "garch",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(prior_garch,
                                     "prior_garch",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_garch,
                                     "prior_garch",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(2))));
                }
              }
            }
          }
        }
        current_statement__ = 222;
        if (stan::math::logical_gt(h, 0)) {
          current_statement__ = 220;
          for (int i = 1; i <= h; ++i) {
            current_statement__ = 218;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_mgarch, "prior_mgarch",
                    stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
              current_statement__ = 217;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(mgarch, "mgarch",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(prior_mgarch,
                                 "prior_mgarch", stan::model::index_uni(i),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_mgarch,
                                 "prior_mgarch", stan::model::index_uni(i),
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 216;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_mgarch, "prior_mgarch",
                      stan::model::index_uni(i), stan::model::index_uni(4)),
                    2)) {
                current_statement__ = 215;
                lp_accum__.add(stan::math::beta_lpdf<false>(
                                 stan::model::rvalue(mgarch, "mgarch",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(prior_mgarch,
                                   "prior_mgarch", stan::model::index_uni(i),
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_mgarch,
                                   "prior_mgarch", stan::model::index_uni(i),
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 214;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_mgarch, "prior_mgarch",
                        stan::model::index_uni(i), stan::model::index_uni(4)),
                      3)) {
                  current_statement__ = 213;
                  lp_accum__.add(stan::math::uniform_lpdf<false>(
                                   stan::model::rvalue(mgarch, "mgarch",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(prior_mgarch,
                                     "prior_mgarch",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_mgarch,
                                     "prior_mgarch",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(2))));
                } else {
                  current_statement__ = 212;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_mgarch, "prior_mgarch",
                          stan::model::index_uni(i),
                          stan::model::index_uni(4)), 4)) {
                    current_statement__ = 211;
                    lp_accum__.add(stan::math::student_t_lpdf<false>(
                                     stan::model::rvalue(mgarch, "mgarch",
                                       stan::model::index_uni(i)),
                                     stan::model::rvalue(prior_mgarch,
                                       "prior_mgarch",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(3)),
                                     stan::model::rvalue(prior_mgarch,
                                       "prior_mgarch",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_mgarch,
                                       "prior_mgarch",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 210;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_mgarch, "prior_mgarch",
                            stan::model::index_uni(i),
                            stan::model::index_uni(4)), 5)) {
                      current_statement__ = 209;
                      lp_accum__.add(stan::math::cauchy_lpdf<false>(
                                       stan::model::rvalue(mgarch, "mgarch",
                                         stan::model::index_uni(i)),
                                       stan::model::rvalue(prior_mgarch,
                                         "prior_mgarch",
                                         stan::model::index_uni(i),
                                         stan::model::index_uni(1)),
                                       stan::model::rvalue(prior_mgarch,
                                         "prior_mgarch",
                                         stan::model::index_uni(i),
                                         stan::model::index_uni(2))));
                    } else {
                      current_statement__ = 208;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_mgarch, "prior_mgarch",
                              stan::model::index_uni(i),
                              stan::model::index_uni(4)), 6)) {
                        current_statement__ = 207;
                        lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                                         stan::model::rvalue(mgarch,
                                           "mgarch",
                                           stan::model::index_uni(i)),
                                         stan::model::rvalue(prior_mgarch,
                                           "prior_mgarch",
                                           stan::model::index_uni(i),
                                           stan::model::index_uni(1)),
                                         stan::model::rvalue(prior_mgarch,
                                           "prior_mgarch",
                                           stan::model::index_uni(i),
                                           stan::model::index_uni(2))));
                      } else {
                        current_statement__ = 206;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_mgarch,
                                "prior_mgarch", stan::model::index_uni(i),
                                stan::model::index_uni(4)), 7)) {
                          current_statement__ = 205;
                          lp_accum__.add(stan::math::inv_chi_square_lpdf<
                                           false>(
                                           stan::model::rvalue(mgarch,
                                             "mgarch",
                                             stan::model::index_uni(i)),
                                           stan::model::rvalue(prior_mgarch,
                                             "prior_mgarch",
                                             stan::model::index_uni(i),
                                             stan::model::index_uni(3))));
                        } else {
                          current_statement__ = 204;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_mgarch,
                                  "prior_mgarch", stan::model::index_uni(i),
                                  stan::model::index_uni(4)), 8)) {
                            current_statement__ = 203;
                            lp_accum__.add(-(stan::math::log(sigma0)));
                          } else {
                            current_statement__ = 202;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_mgarch,
                                    "prior_mgarch",
                                    stan::model::index_uni(i),
                                    stan::model::index_uni(4)), 9)) {
                              current_statement__ = 201;
                              lp_accum__.add(stan::math::gamma_lpdf<false>(
                                               stan::model::rvalue(mgarch,
                                                 "mgarch",
                                                 stan::model::index_uni(i)),
                                               stan::model::rvalue(
                                                 prior_mgarch,
                                                 "prior_mgarch",
                                                 stan::model::index_uni(i),
                                                 stan::model::index_uni(1)),
                                               stan::model::rvalue(
                                                 prior_mgarch,
                                                 "prior_mgarch",
                                                 stan::model::index_uni(i),
                                                 stan::model::index_uni(2))));
                            } else {
                              current_statement__ = 200;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_mgarch,
                                      "prior_mgarch",
                                      stan::model::index_uni(i),
                                      stan::model::index_uni(4)), 10)) {
                                current_statement__ = 199;
                                lp_accum__.add(stan::math::exponential_lpdf<
                                                 false>(
                                                 stan::model::rvalue(mgarch,
                                                   "mgarch",
                                                   stan::model::index_uni(i)),
                                                 stan::model::rvalue(
                                                   prior_mgarch,
                                                   "prior_mgarch",
                                                   stan::model::index_uni(i),
                                                   stan::model::index_uni(2))));
                              } else {
                                current_statement__ = 198;
                                if (stan::math::logical_eq(
                                      stan::model::rvalue(prior_mgarch,
                                        "prior_mgarch",
                                        stan::model::index_uni(i),
                                        stan::model::index_uni(4)), 11)) {
                                  current_statement__ = 197;
                                  lp_accum__.add(stan::math::chi_square_lpdf<
                                                   false>(
                                                   stan::model::rvalue(
                                                     mgarch, "mgarch",
                                                     stan::model::index_uni(i)),
                                                   stan::model::rvalue(
                                                     prior_mgarch,
                                                     "prior_mgarch",
                                                     stan::model::index_uni(i),
                                                     stan::model::index_uni(3))));
                                } else {
                                  current_statement__ = 196;
                                  if (stan::math::logical_eq(
                                        stan::model::rvalue(prior_mgarch,
                                          "prior_mgarch",
                                          stan::model::index_uni(i),
                                          stan::model::index_uni(4)), 12)) {
                                    current_statement__ = 195;
                                    lp_accum__.add(stan::math::double_exponential_lpdf<
                                                     false>(
                                                     stan::model::rvalue(
                                                       mgarch, "mgarch",
                                                       stan::model::index_uni(
                                                         i)),
                                                     stan::model::rvalue(
                                                       prior_mgarch,
                                                       "prior_mgarch",
                                                       stan::model::index_uni(
                                                         i),
                                                       stan::model::index_uni(
                                                         1)),
                                                     stan::model::rvalue(
                                                       prior_mgarch,
                                                       "prior_mgarch",
                                                       stan::model::index_uni(
                                                         i),
                                                       stan::model::index_uni(
                                                         2))));
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 248;
        if (stan::math::logical_eq(genT, 1)) {
          current_statement__ = 246;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_dfv, "prior_dfv",
                  stan::model::index_uni(4)), 1)) {
            current_statement__ = 245;
            lp_accum__.add(stan::math::normal_lpdf<false>(
                             stan::model::rvalue(v, "v",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_dfv, "prior_dfv",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_dfv, "prior_dfv",
                               stan::model::index_uni(2))));
          } else {
            current_statement__ = 244;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_dfv, "prior_dfv",
                    stan::model::index_uni(4)), 2)) {
              current_statement__ = 243;
              lp_accum__.add(stan::math::beta_lpdf<false>(
                               stan::model::rvalue(v, "v",
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_dfv, "prior_dfv",
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_dfv, "prior_dfv",
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 242;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_dfv, "prior_dfv",
                      stan::model::index_uni(4)), 3)) {
                current_statement__ = 241;
                lp_accum__.add(stan::math::uniform_lpdf<false>(
                                 stan::model::rvalue(v, "v",
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_dfv, "prior_dfv",
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_dfv, "prior_dfv",
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 240;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_dfv, "prior_dfv",
                        stan::model::index_uni(4)), 4)) {
                  current_statement__ = 239;
                  lp_accum__.add(stan::math::student_t_lpdf<false>(
                                   stan::model::rvalue(v, "v",
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_dfv,
                                     "prior_dfv", stan::model::index_uni(3)),
                                   stan::model::rvalue(prior_dfv,
                                     "prior_dfv", stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_dfv,
                                     "prior_dfv", stan::model::index_uni(2))));
                } else {
                  current_statement__ = 238;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_dfv, "prior_dfv",
                          stan::model::index_uni(4)), 5)) {
                    current_statement__ = 237;
                    lp_accum__.add(stan::math::cauchy_lpdf<false>(
                                     stan::model::rvalue(v, "v",
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_dfv,
                                       "prior_dfv", stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_dfv,
                                       "prior_dfv", stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 236;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_dfv, "prior_dfv",
                            stan::model::index_uni(4)), 6)) {
                      current_statement__ = 235;
                      lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                                       stan::model::rvalue(v, "v",
                                         stan::model::index_uni(1)),
                                       stan::model::rvalue(prior_dfv,
                                         "prior_dfv",
                                         stan::model::index_uni(1)),
                                       stan::model::rvalue(prior_dfv,
                                         "prior_dfv",
                                         stan::model::index_uni(2))));
                    } else {
                      current_statement__ = 234;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_dfv, "prior_dfv",
                              stan::model::index_uni(4)), 7)) {
                        current_statement__ = 233;
                        lp_accum__.add(stan::math::inv_chi_square_lpdf<
                                         false>(
                                         stan::model::rvalue(v, "v",
                                           stan::model::index_uni(1)),
                                         stan::model::rvalue(prior_dfv,
                                           "prior_dfv",
                                           stan::model::index_uni(3))));
                      } else {
                        current_statement__ = 232;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_dfv, "prior_dfv",
                                stan::model::index_uni(4)), 8)) {
                          current_statement__ = 231;
                          lp_accum__.add(stan::math::log(
                                           Jpv(
                                             stan::model::rvalue(v, "v",
                                               stan::model::index_uni(1)),
                                             pstream__)));
                        } else {
                          current_statement__ = 230;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_dfv, "prior_dfv",
                                  stan::model::index_uni(4)), 9)) {
                            current_statement__ = 229;
                            lp_accum__.add(stan::math::gamma_lpdf<false>(
                                             stan::model::rvalue(v, "v",
                                               stan::model::index_uni(1)),
                                             stan::model::rvalue(prior_dfv,
                                               "prior_dfv",
                                               stan::model::index_uni(1)),
                                             stan::model::rvalue(prior_dfv,
                                               "prior_dfv",
                                               stan::model::index_uni(2))));
                          } else {
                            current_statement__ = 228;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_dfv, "prior_dfv",
                                    stan::model::index_uni(4)), 10)) {
                              current_statement__ = 227;
                              lp_accum__.add(stan::math::exponential_lpdf<
                                               false>(
                                               stan::model::rvalue(v, "v",
                                                 stan::model::index_uni(1)),
                                               stan::model::rvalue(prior_dfv,
                                                 "prior_dfv",
                                                 stan::model::index_uni(2))));
                            } else {
                              current_statement__ = 226;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_dfv,
                                      "prior_dfv", stan::model::index_uni(4)),
                                    11)) {
                                current_statement__ = 225;
                                lp_accum__.add(stan::math::chi_square_lpdf<
                                                 false>(
                                                 stan::model::rvalue(v, "v",
                                                   stan::model::index_uni(1)),
                                                 stan::model::rvalue(
                                                   prior_dfv, "prior_dfv",
                                                   stan::model::index_uni(3))));
                              } else {
                                current_statement__ = 224;
                                if (stan::math::logical_eq(
                                      stan::model::rvalue(prior_dfv,
                                        "prior_dfv",
                                        stan::model::index_uni(4)), 12)) {
                                  current_statement__ = 223;
                                  lp_accum__.add(stan::math::double_exponential_lpdf<
                                                   false>(
                                                   stan::model::rvalue(v,
                                                     "v",
                                                     stan::model::index_uni(1)),
                                                   stan::model::rvalue(
                                                     prior_dfv, "prior_dfv",
                                                     stan::model::index_uni(1)),
                                                   stan::model::rvalue(
                                                     prior_dfv, "prior_dfv",
                                                     stan::model::index_uni(2))));
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 276;
        if (stan::math::logical_eq(asym1, 1)) {
          current_statement__ = 274;
          for (int i = 1; i <= 2; ++i) {
            current_statement__ = 272;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_gamma, "prior_gamma",
                    stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
              current_statement__ = 271;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(gamma, "gamma",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(prior_gamma,
                                 "prior_gamma", stan::model::index_uni(i),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_gamma,
                                 "prior_gamma", stan::model::index_uni(i),
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 270;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_gamma, "prior_gamma",
                      stan::model::index_uni(i), stan::model::index_uni(4)),
                    2)) {
                current_statement__ = 269;
                lp_accum__.add(stan::math::beta_lpdf<false>(
                                 stan::model::rvalue(gamma, "gamma",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(prior_gamma,
                                   "prior_gamma", stan::model::index_uni(i),
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_gamma,
                                   "prior_gamma", stan::model::index_uni(i),
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 268;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_gamma, "prior_gamma",
                        stan::model::index_uni(i), stan::model::index_uni(4)),
                      3)) {
                  current_statement__ = 267;
                  lp_accum__.add(stan::math::uniform_lpdf<false>(
                                   stan::model::rvalue(gamma, "gamma",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(prior_gamma,
                                     "prior_gamma",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_gamma,
                                     "prior_gamma",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(2))));
                } else {
                  current_statement__ = 266;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_gamma, "prior_gamma",
                          stan::model::index_uni(i),
                          stan::model::index_uni(4)), 4)) {
                    current_statement__ = 265;
                    lp_accum__.add(stan::math::student_t_lpdf<false>(
                                     stan::model::rvalue(gamma, "gamma",
                                       stan::model::index_uni(i)),
                                     stan::model::rvalue(prior_gamma,
                                       "prior_gamma",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(3)),
                                     stan::model::rvalue(prior_gamma,
                                       "prior_gamma",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_gamma,
                                       "prior_gamma",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 264;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_gamma, "prior_gamma",
                            stan::model::index_uni(i),
                            stan::model::index_uni(4)), 5)) {
                      current_statement__ = 263;
                      lp_accum__.add(stan::math::cauchy_lpdf<false>(
                                       stan::model::rvalue(gamma, "gamma",
                                         stan::model::index_uni(i)),
                                       stan::model::rvalue(prior_gamma,
                                         "prior_gamma",
                                         stan::model::index_uni(i),
                                         stan::model::index_uni(1)),
                                       stan::model::rvalue(prior_gamma,
                                         "prior_gamma",
                                         stan::model::index_uni(i),
                                         stan::model::index_uni(2))));
                    } else {
                      current_statement__ = 262;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_gamma, "prior_gamma",
                              stan::model::index_uni(i),
                              stan::model::index_uni(4)), 6)) {
                        current_statement__ = 261;
                        lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                                         stan::model::rvalue(gamma, "gamma",
                                           stan::model::index_uni(i)),
                                         stan::model::rvalue(prior_gamma,
                                           "prior_gamma",
                                           stan::model::index_uni(i),
                                           stan::model::index_uni(1)),
                                         stan::model::rvalue(prior_gamma,
                                           "prior_gamma",
                                           stan::model::index_uni(i),
                                           stan::model::index_uni(2))));
                      } else {
                        current_statement__ = 260;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_gamma, "prior_gamma",
                                stan::model::index_uni(i),
                                stan::model::index_uni(4)), 7)) {
                          current_statement__ = 259;
                          lp_accum__.add(stan::math::inv_chi_square_lpdf<
                                           false>(
                                           stan::model::rvalue(gamma,
                                             "gamma",
                                             stan::model::index_uni(i)),
                                           stan::model::rvalue(prior_gamma,
                                             "prior_gamma",
                                             stan::model::index_uni(i),
                                             stan::model::index_uni(3))));
                        } else {
                          current_statement__ = 258;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_gamma,
                                  "prior_gamma", stan::model::index_uni(i),
                                  stan::model::index_uni(4)), 8)) {
                            current_statement__ = 257;
                            lp_accum__.add(-(stan::math::log(sigma0)));
                          } else {
                            current_statement__ = 256;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_gamma,
                                    "prior_gamma", stan::model::index_uni(i),
                                    stan::model::index_uni(4)), 9)) {
                              current_statement__ = 255;
                              lp_accum__.add(stan::math::gamma_lpdf<false>(
                                               stan::model::rvalue(gamma,
                                                 "gamma",
                                                 stan::model::index_uni(i)),
                                               stan::model::rvalue(
                                                 prior_gamma, "prior_gamma",
                                                 stan::model::index_uni(i),
                                                 stan::model::index_uni(1)),
                                               stan::model::rvalue(
                                                 prior_gamma, "prior_gamma",
                                                 stan::model::index_uni(i),
                                                 stan::model::index_uni(2))));
                            } else {
                              current_statement__ = 254;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_gamma,
                                      "prior_gamma",
                                      stan::model::index_uni(i),
                                      stan::model::index_uni(4)), 10)) {
                                current_statement__ = 253;
                                lp_accum__.add(stan::math::exponential_lpdf<
                                                 false>(
                                                 stan::model::rvalue(gamma,
                                                   "gamma",
                                                   stan::model::index_uni(i)),
                                                 stan::model::rvalue(
                                                   prior_gamma,
                                                   "prior_gamma",
                                                   stan::model::index_uni(i),
                                                   stan::model::index_uni(2))));
                              } else {
                                current_statement__ = 252;
                                if (stan::math::logical_eq(
                                      stan::model::rvalue(prior_gamma,
                                        "prior_gamma",
                                        stan::model::index_uni(i),
                                        stan::model::index_uni(4)), 11)) {
                                  current_statement__ = 251;
                                  lp_accum__.add(stan::math::chi_square_lpdf<
                                                   false>(
                                                   stan::model::rvalue(gamma,
                                                     "gamma",
                                                     stan::model::index_uni(i)),
                                                   stan::model::rvalue(
                                                     prior_gamma,
                                                     "prior_gamma",
                                                     stan::model::index_uni(i),
                                                     stan::model::index_uni(3))));
                                } else {
                                  current_statement__ = 250;
                                  if (stan::math::logical_eq(
                                        stan::model::rvalue(prior_gamma,
                                          "prior_gamma",
                                          stan::model::index_uni(i),
                                          stan::model::index_uni(4)), 12)) {
                                    current_statement__ = 249;
                                    lp_accum__.add(stan::math::double_exponential_lpdf<
                                                     false>(
                                                     stan::model::rvalue(
                                                       gamma, "gamma",
                                                       stan::model::index_uni(
                                                         i)),
                                                     stan::model::rvalue(
                                                       prior_gamma,
                                                       "prior_gamma",
                                                       stan::model::index_uni(
                                                         i),
                                                       stan::model::index_uni(
                                                         1)),
                                                     stan::model::rvalue(
                                                       prior_gamma,
                                                       "prior_gamma",
                                                       stan::model::index_uni(
                                                         i),
                                                       stan::model::index_uni(
                                                         2))));
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 278;
        if (stan::math::logical_eq(genT, 1)) {
          current_statement__ = 277;
          lp_accum__.add(stan::math::inv_gamma_lpdf<false>(lambda,
                           (stan::model::rvalue(v, "v",
                              stan::model::index_uni(1)) / 2),
                           (stan::model::rvalue(v, "v",
                              stan::model::index_uni(1)) / 2)));
        }
        current_statement__ = 279;
        lp_accum__.add(stan::math::normal_lpdf<false>(epsilon, 0, sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_tgarch_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto mu0 = in__.template read<local_scalar_t__>();
      current_statement__ = 2;
      auto sigma0 =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 3;
      auto breg =
        in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(d1);
      current_statement__ = 4;
      auto ar0 =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-(1), 1, lp__, p);
      current_statement__ = 5;
      auto ma0 =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-(1), 1, lp__, q);
      current_statement__ = 6;
      auto arch =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__, s);
      current_statement__ = 7;
      auto garch =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__, k);
      current_statement__ = 8;
      auto mgarch =
        in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(h);
      current_statement__ = 9;
      auto v =
        in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__,-1,1>,
          jacobian__>(2.01, lp__, v_1dim__);
      current_statement__ = 10;
      auto lambda =
        in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__,-1,1>,
          jacobian__>(1, lp__, lambda_1dim__);
      current_statement__ = 11;
      auto gamma =
        in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__,-1,1>,
          jacobian__>(0, lp__, gamma_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> ar =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> ma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(q, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> epsilon =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      current_statement__ = 25;
      for (int i = 1; i <= p; ++i) {
        current_statement__ = 23;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_ar, "prior_ar",
                stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
          current_statement__ = 22;
          stan::model::assign(ar,
            stan::model::rvalue(ar0, "ar0", stan::model::index_uni(i)),
            "assigning variable ar", stan::model::index_uni(i));
        } else {
          current_statement__ = 21;
          stan::model::assign(ar, ((2 *
            stan::model::rvalue(ar0, "ar0", stan::model::index_uni(i))) - 1),
            "assigning variable ar", stan::model::index_uni(i));
        }
      }
      current_statement__ = 30;
      for (int i = 1; i <= q; ++i) {
        current_statement__ = 28;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_ma, "prior_ma",
                stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
          current_statement__ = 27;
          stan::model::assign(ma,
            stan::model::rvalue(ma0, "ma0", stan::model::index_uni(i)),
            "assigning variable ma", stan::model::index_uni(i));
        } else {
          current_statement__ = 26;
          stan::model::assign(ma, ((2 *
            stan::model::rvalue(ma0, "ma0", stan::model::index_uni(i))) - 1),
            "assigning variable ma", stan::model::index_uni(i));
        }
      }
      current_statement__ = 33;
      if (stan::math::logical_gt(d1, 0)) {
        current_statement__ = 32;
        stan::model::assign(mu, stan::math::multiply(xreg, breg),
          "assigning variable mu");
      } else {
        current_statement__ = 31;
        stan::model::assign(mu, stan::math::rep_vector(0, n),
          "assigning variable mu");
      }
      current_statement__ = 66;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 34;
        stan::model::assign(mu,
          (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) + mu0),
          "assigning variable mu", stan::model::index_uni(i));
        current_statement__ = 35;
        stan::model::assign(sigma, sigma0, "assigning variable sigma",
          stan::model::index_uni(i));
        current_statement__ = 39;
        if (stan::math::logical_gt(p, 0)) {
          current_statement__ = 38;
          for (int j = 1; j <= p; ++j) {
            current_statement__ = 37;
            if (stan::math::logical_gt(i, j)) {
              current_statement__ = 36;
              stan::model::assign(mu,
                (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
                (stan::model::rvalue(y, "y", stan::model::index_uni((i - j)))
                * stan::model::rvalue(ar, "ar", stan::model::index_uni(j)))),
                "assigning variable mu", stan::model::index_uni(i));
            }
          }
        }
        current_statement__ = 43;
        if (stan::math::logical_gt(q, 0)) {
          current_statement__ = 42;
          for (int j = 1; j <= q; ++j) {
            current_statement__ = 41;
            if (stan::math::logical_gt(i, j)) {
              current_statement__ = 40;
              stan::model::assign(mu,
                (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
                (stan::model::rvalue(epsilon, "epsilon",
                   stan::model::index_uni((i - j))) *
                stan::model::rvalue(ma, "ma", stan::model::index_uni(j)))),
                "assigning variable mu", stan::model::index_uni(i));
            }
          }
        }
        current_statement__ = 44;
        stan::model::assign(epsilon,
          (stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
          stan::model::rvalue(mu, "mu", stan::model::index_uni(i))),
          "assigning variable epsilon", stan::model::index_uni(i));
        current_statement__ = 54;
        if (stan::math::logical_gte(s, k)) {
          current_statement__ = 48;
          if (stan::math::logical_gt(s, 0)) {
            current_statement__ = 47;
            for (int j = 1; j <= s; ++j) {
              current_statement__ = 46;
              if (stan::math::logical_gt(i, j)) {
                current_statement__ = 45;
                stan::model::assign(sigma,
                  (stan::model::rvalue(sigma, "sigma",
                     stan::model::index_uni(i)) +
                  (stan::model::rvalue(arch, "arch",
                     stan::model::index_uni(j)) *
                  stan::math::pow(
                    stan::model::rvalue(epsilon, "epsilon",
                      stan::model::index_uni((i - j))), 2))),
                  "assigning variable sigma", stan::model::index_uni(i));
              }
            }
          }
          current_statement__ = 52;
          if (stan::math::logical_gt(k, 0)) {
            current_statement__ = 51;
            for (int j = 1; j <= k; ++j) {
              current_statement__ = 50;
              if (stan::math::logical_gt(i, j)) {
                current_statement__ = 49;
                stan::model::assign(sigma,
                  (stan::model::rvalue(sigma, "sigma",
                     stan::model::index_uni(i)) +
                  (stan::model::rvalue(garch, "garch",
                     stan::model::index_uni(j)) *
                  stan::math::pow(
                    stan::model::rvalue(sigma, "sigma",
                      stan::model::index_uni((i - j))), 2))),
                  "assigning variable sigma", stan::model::index_uni(i));
              }
            }
          }
        }
        current_statement__ = 57;
        if (stan::math::logical_eq(genT, 1)) {
          current_statement__ = 56;
          stan::model::assign(sigma,
            stan::math::sqrt(
              ((((stan::model::rvalue(v, "v", stan::model::index_uni(1)) - 2)
              *
              stan::model::rvalue(lambda, "lambda", stan::model::index_uni(i)))
              *
              stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)))
              / stan::model::rvalue(v, "v", stan::model::index_uni(1)))),
            "assigning variable sigma", stan::model::index_uni(i));
        } else {
          current_statement__ = 55;
          stan::model::assign(sigma,
            stan::math::sqrt(
              stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i))),
            "assigning variable sigma", stan::model::index_uni(i));
        }
        current_statement__ = 61;
        if (stan::math::logical_gt(h, 0)) {
          current_statement__ = 60;
          for (int j = 1; j <= h; ++j) {
            current_statement__ = 59;
            if (stan::math::logical_gt(i, j)) {
              current_statement__ = 58;
              stan::model::assign(mu,
                (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
                (stan::model::rvalue(mgarch, "mgarch",
                   stan::model::index_uni(j)) *
                stan::model::rvalue(sigma, "sigma",
                  stan::model::index_uni(((i - j) + 1))))),
                "assigning variable mu", stan::model::index_uni(i));
            }
          }
        }
        current_statement__ = 64;
        if (stan::math::logical_eq(asym1, 1)) {
          current_statement__ = 63;
          if (stan::math::logical_gt(i, 1)) {
            current_statement__ = 62;
            stan::model::assign(sigma,
              (stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i))
              +
              (stan::model::rvalue(gamma, "gamma", stan::model::index_uni(1))
              *
              asymf(
                stan::model::rvalue(epsilon, "epsilon",
                  stan::model::index_uni((i - 1))),
                stan::model::rvalue(gamma, "gamma", stan::model::index_uni(2)),
                asym, pstream__))), "assigning variable sigma",
              stan::model::index_uni(i));
          }
        }
      }
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "sigma", sigma, 0);
      {
        current_statement__ = 102;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_mu0, "prior_mu0",
                stan::model::index_uni(4)), 1)) {
          current_statement__ = 101;
          lp_accum__.add(stan::math::normal_lpdf<false>(mu0,
                           stan::model::rvalue(prior_mu0, "prior_mu0",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(prior_mu0, "prior_mu0",
                             stan::model::index_uni(2))));
        } else {
          current_statement__ = 100;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_mu0, "prior_mu0",
                  stan::model::index_uni(4)), 2)) {
            current_statement__ = 99;
            lp_accum__.add(stan::math::beta_lpdf<false>(mu0,
                             stan::model::rvalue(prior_mu0, "prior_mu0",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_mu0, "prior_mu0",
                               stan::model::index_uni(2))));
          } else {
            current_statement__ = 98;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_mu0, "prior_mu0",
                    stan::model::index_uni(4)), 3)) {
              current_statement__ = 97;
              lp_accum__.add(stan::math::uniform_lpdf<false>(mu0,
                               stan::model::rvalue(prior_mu0, "prior_mu0",
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_mu0, "prior_mu0",
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 96;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_mu0, "prior_mu0",
                      stan::model::index_uni(4)), 4)) {
                current_statement__ = 95;
                lp_accum__.add(stan::math::student_t_lpdf<false>(mu0,
                                 stan::model::rvalue(prior_mu0, "prior_mu0",
                                   stan::model::index_uni(3)),
                                 stan::model::rvalue(prior_mu0, "prior_mu0",
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_mu0, "prior_mu0",
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 94;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_mu0, "prior_mu0",
                        stan::model::index_uni(4)), 5)) {
                  current_statement__ = 93;
                  lp_accum__.add(stan::math::cauchy_lpdf<false>(mu0,
                                   stan::model::rvalue(prior_mu0,
                                     "prior_mu0", stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_mu0,
                                     "prior_mu0", stan::model::index_uni(2))));
                } else {
                  current_statement__ = 92;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_mu0, "prior_mu0",
                          stan::model::index_uni(4)), 6)) {
                    current_statement__ = 91;
                    lp_accum__.add(stan::math::inv_gamma_lpdf<false>(mu0,
                                     stan::model::rvalue(prior_mu0,
                                       "prior_mu0", stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_mu0,
                                       "prior_mu0", stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 90;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_mu0, "prior_mu0",
                            stan::model::index_uni(4)), 7)) {
                      current_statement__ = 89;
                      lp_accum__.add(stan::math::inv_chi_square_lpdf<false>(
                                       mu0,
                                       stan::model::rvalue(prior_mu0,
                                         "prior_mu0",
                                         stan::model::index_uni(3))));
                    } else {
                      current_statement__ = 88;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_mu0, "prior_mu0",
                              stan::model::index_uni(4)), 8)) {
                        current_statement__ = 87;
                        lp_accum__.add(-(stan::math::log(sigma0)));
                      } else {
                        current_statement__ = 86;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_mu0, "prior_mu0",
                                stan::model::index_uni(4)), 9)) {
                          current_statement__ = 85;
                          lp_accum__.add(stan::math::gamma_lpdf<false>(mu0,
                                           stan::model::rvalue(prior_mu0,
                                             "prior_mu0",
                                             stan::model::index_uni(1)),
                                           stan::model::rvalue(prior_mu0,
                                             "prior_mu0",
                                             stan::model::index_uni(2))));
                        } else {
                          current_statement__ = 84;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_mu0, "prior_mu0",
                                  stan::model::index_uni(4)), 10)) {
                            current_statement__ = 83;
                            lp_accum__.add(stan::math::exponential_lpdf<
                                             false>(mu0,
                                             stan::model::rvalue(prior_mu0,
                                               "prior_mu0",
                                               stan::model::index_uni(2))));
                          } else {
                            current_statement__ = 82;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_mu0, "prior_mu0",
                                    stan::model::index_uni(4)), 11)) {
                              current_statement__ = 81;
                              lp_accum__.add(stan::math::chi_square_lpdf<
                                               false>(mu0,
                                               stan::model::rvalue(prior_mu0,
                                                 "prior_mu0",
                                                 stan::model::index_uni(3))));
                            } else {
                              current_statement__ = 80;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_mu0,
                                      "prior_mu0", stan::model::index_uni(4)),
                                    12)) {
                                current_statement__ = 79;
                                lp_accum__.add(stan::math::double_exponential_lpdf<
                                                 false>(mu0,
                                                 stan::model::rvalue(
                                                   prior_mu0, "prior_mu0",
                                                   stan::model::index_uni(1)),
                                                 stan::model::rvalue(
                                                   prior_mu0, "prior_mu0",
                                                   stan::model::index_uni(2))));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 126;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_sigma0, "prior_sigma0",
                stan::model::index_uni(4)), 1)) {
          current_statement__ = 125;
          lp_accum__.add(stan::math::normal_lpdf<false>(sigma0,
                           stan::model::rvalue(prior_sigma0, "prior_sigma0",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(prior_sigma0, "prior_sigma0",
                             stan::model::index_uni(2))));
        } else {
          current_statement__ = 124;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_sigma0, "prior_sigma0",
                  stan::model::index_uni(4)), 2)) {
            current_statement__ = 123;
            lp_accum__.add(stan::math::beta_lpdf<false>(sigma0,
                             stan::model::rvalue(prior_sigma0,
                               "prior_sigma0", stan::model::index_uni(1)),
                             stan::model::rvalue(prior_sigma0,
                               "prior_sigma0", stan::model::index_uni(2))));
          } else {
            current_statement__ = 122;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_sigma0, "prior_sigma0",
                    stan::model::index_uni(4)), 3)) {
              current_statement__ = 121;
              lp_accum__.add(stan::math::uniform_lpdf<false>(sigma0,
                               stan::model::rvalue(prior_sigma0,
                                 "prior_sigma0", stan::model::index_uni(1)),
                               stan::model::rvalue(prior_sigma0,
                                 "prior_sigma0", stan::model::index_uni(2))));
            } else {
              current_statement__ = 120;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_sigma0, "prior_sigma0",
                      stan::model::index_uni(4)), 4)) {
                current_statement__ = 119;
                lp_accum__.add(stan::math::student_t_lpdf<false>(sigma0,
                                 stan::model::rvalue(prior_sigma0,
                                   "prior_sigma0", stan::model::index_uni(3)),
                                 stan::model::rvalue(prior_sigma0,
                                   "prior_sigma0", stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_sigma0,
                                   "prior_sigma0", stan::model::index_uni(2))));
              } else {
                current_statement__ = 118;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_sigma0, "prior_sigma0",
                        stan::model::index_uni(4)), 5)) {
                  current_statement__ = 117;
                  lp_accum__.add(stan::math::cauchy_lpdf<false>(sigma0,
                                   stan::model::rvalue(prior_sigma0,
                                     "prior_sigma0",
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_sigma0,
                                     "prior_sigma0",
                                     stan::model::index_uni(2))));
                } else {
                  current_statement__ = 116;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_sigma0, "prior_sigma0",
                          stan::model::index_uni(4)), 6)) {
                    current_statement__ = 115;
                    lp_accum__.add(stan::math::inv_gamma_lpdf<false>(sigma0,
                                     stan::model::rvalue(prior_sigma0,
                                       "prior_sigma0",
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_sigma0,
                                       "prior_sigma0",
                                       stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 114;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_sigma0, "prior_sigma0",
                            stan::model::index_uni(4)), 7)) {
                      current_statement__ = 113;
                      lp_accum__.add(stan::math::inv_chi_square_lpdf<false>(
                                       sigma0,
                                       stan::model::rvalue(prior_sigma0,
                                         "prior_sigma0",
                                         stan::model::index_uni(3))));
                    } else {
                      current_statement__ = 112;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_sigma0, "prior_sigma0",
                              stan::model::index_uni(4)), 8)) {
                        current_statement__ = 111;
                        lp_accum__.add(-(stan::math::log(sigma0)));
                      } else {
                        current_statement__ = 110;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_sigma0,
                                "prior_sigma0", stan::model::index_uni(4)), 9)) {
                          current_statement__ = 109;
                          lp_accum__.add(stan::math::gamma_lpdf<false>(
                                           sigma0,
                                           stan::model::rvalue(prior_sigma0,
                                             "prior_sigma0",
                                             stan::model::index_uni(1)),
                                           stan::model::rvalue(prior_sigma0,
                                             "prior_sigma0",
                                             stan::model::index_uni(2))));
                        } else {
                          current_statement__ = 108;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_sigma0,
                                  "prior_sigma0", stan::model::index_uni(4)),
                                10)) {
                            current_statement__ = 107;
                            lp_accum__.add(stan::math::exponential_lpdf<
                                             false>(sigma0,
                                             stan::model::rvalue(
                                               prior_sigma0, "prior_sigma0",
                                               stan::model::index_uni(2))));
                          } else {
                            current_statement__ = 106;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_sigma0,
                                    "prior_sigma0", stan::model::index_uni(4)),
                                  11)) {
                              current_statement__ = 105;
                              lp_accum__.add(stan::math::chi_square_lpdf<
                                               false>(sigma0,
                                               stan::model::rvalue(
                                                 prior_sigma0,
                                                 "prior_sigma0",
                                                 stan::model::index_uni(3))));
                            } else {
                              current_statement__ = 104;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_sigma0,
                                      "prior_sigma0",
                                      stan::model::index_uni(4)), 12)) {
                                current_statement__ = 103;
                                lp_accum__.add(stan::math::double_exponential_lpdf<
                                                 false>(sigma0,
                                                 stan::model::rvalue(
                                                   prior_sigma0,
                                                   "prior_sigma0",
                                                   stan::model::index_uni(1)),
                                                 stan::model::rvalue(
                                                   prior_sigma0,
                                                   "prior_sigma0",
                                                   stan::model::index_uni(2))));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 154;
        if (stan::math::logical_gt(d1, 0)) {
          current_statement__ = 152;
          for (int i = 1; i <= d1; ++i) {
            current_statement__ = 150;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_breg, "prior_breg",
                    stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
              current_statement__ = 149;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(breg, "breg",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(prior_breg, "prior_breg",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_breg, "prior_breg",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 148;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_breg, "prior_breg",
                      stan::model::index_uni(i), stan::model::index_uni(4)),
                    2)) {
                current_statement__ = 147;
                lp_accum__.add(stan::math::beta_lpdf<false>(
                                 stan::model::rvalue(breg, "breg",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(prior_breg,
                                   "prior_breg", stan::model::index_uni(i),
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_breg,
                                   "prior_breg", stan::model::index_uni(i),
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 146;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_breg, "prior_breg",
                        stan::model::index_uni(i), stan::model::index_uni(4)),
                      3)) {
                  current_statement__ = 145;
                  lp_accum__.add(stan::math::uniform_lpdf<false>(
                                   stan::model::rvalue(breg, "breg",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(prior_breg,
                                     "prior_breg", stan::model::index_uni(i),
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_breg,
                                     "prior_breg", stan::model::index_uni(i),
                                     stan::model::index_uni(2))));
                } else {
                  current_statement__ = 144;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_breg, "prior_breg",
                          stan::model::index_uni(i),
                          stan::model::index_uni(4)), 4)) {
                    current_statement__ = 143;
                    lp_accum__.add(stan::math::student_t_lpdf<false>(
                                     stan::model::rvalue(breg, "breg",
                                       stan::model::index_uni(i)),
                                     stan::model::rvalue(prior_breg,
                                       "prior_breg",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(3)),
                                     stan::model::rvalue(prior_breg,
                                       "prior_breg",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_breg,
                                       "prior_breg",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 142;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_breg, "prior_breg",
                            stan::model::index_uni(i),
                            stan::model::index_uni(4)), 5)) {
                      current_statement__ = 141;
                      lp_accum__.add(stan::math::cauchy_lpdf<false>(
                                       stan::model::rvalue(breg, "breg",
                                         stan::model::index_uni(i)),
                                       stan::model::rvalue(prior_breg,
                                         "prior_breg",
                                         stan::model::index_uni(i),
                                         stan::model::index_uni(1)),
                                       stan::model::rvalue(prior_breg,
                                         "prior_breg",
                                         stan::model::index_uni(i),
                                         stan::model::index_uni(2))));
                    } else {
                      current_statement__ = 140;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_breg, "prior_breg",
                              stan::model::index_uni(i),
                              stan::model::index_uni(4)), 6)) {
                        current_statement__ = 139;
                        lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                                         stan::model::rvalue(breg, "breg",
                                           stan::model::index_uni(i)),
                                         stan::model::rvalue(prior_breg,
                                           "prior_breg",
                                           stan::model::index_uni(i),
                                           stan::model::index_uni(1)),
                                         stan::model::rvalue(prior_breg,
                                           "prior_breg",
                                           stan::model::index_uni(i),
                                           stan::model::index_uni(2))));
                      } else {
                        current_statement__ = 138;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_breg, "prior_breg",
                                stan::model::index_uni(i),
                                stan::model::index_uni(4)), 7)) {
                          current_statement__ = 137;
                          lp_accum__.add(stan::math::inv_chi_square_lpdf<
                                           false>(
                                           stan::model::rvalue(breg, "breg",
                                             stan::model::index_uni(i)),
                                           stan::model::rvalue(prior_breg,
                                             "prior_breg",
                                             stan::model::index_uni(i),
                                             stan::model::index_uni(3))));
                        } else {
                          current_statement__ = 136;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_breg, "prior_breg",
                                  stan::model::index_uni(i),
                                  stan::model::index_uni(4)), 8)) {
                            current_statement__ = 135;
                            lp_accum__.add(-(stan::math::log(sigma0)));
                          } else {
                            current_statement__ = 134;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_breg,
                                    "prior_breg", stan::model::index_uni(i),
                                    stan::model::index_uni(4)), 9)) {
                              current_statement__ = 133;
                              lp_accum__.add(stan::math::gamma_lpdf<false>(
                                               stan::model::rvalue(breg,
                                                 "breg",
                                                 stan::model::index_uni(i)),
                                               stan::model::rvalue(
                                                 prior_breg, "prior_breg",
                                                 stan::model::index_uni(i),
                                                 stan::model::index_uni(1)),
                                               stan::model::rvalue(
                                                 prior_breg, "prior_breg",
                                                 stan::model::index_uni(i),
                                                 stan::model::index_uni(2))));
                            } else {
                              current_statement__ = 132;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_breg,
                                      "prior_breg",
                                      stan::model::index_uni(i),
                                      stan::model::index_uni(4)), 10)) {
                                current_statement__ = 131;
                                lp_accum__.add(stan::math::exponential_lpdf<
                                                 false>(
                                                 stan::model::rvalue(breg,
                                                   "breg",
                                                   stan::model::index_uni(i)),
                                                 stan::model::rvalue(
                                                   prior_breg, "prior_breg",
                                                   stan::model::index_uni(i),
                                                   stan::model::index_uni(2))));
                              } else {
                                current_statement__ = 130;
                                if (stan::math::logical_eq(
                                      stan::model::rvalue(prior_breg,
                                        "prior_breg",
                                        stan::model::index_uni(i),
                                        stan::model::index_uni(4)), 11)) {
                                  current_statement__ = 129;
                                  lp_accum__.add(stan::math::chi_square_lpdf<
                                                   false>(
                                                   stan::model::rvalue(breg,
                                                     "breg",
                                                     stan::model::index_uni(i)),
                                                   stan::model::rvalue(
                                                     prior_breg,
                                                     "prior_breg",
                                                     stan::model::index_uni(i),
                                                     stan::model::index_uni(3))));
                                } else {
                                  current_statement__ = 128;
                                  if (stan::math::logical_eq(
                                        stan::model::rvalue(prior_breg,
                                          "prior_breg",
                                          stan::model::index_uni(i),
                                          stan::model::index_uni(4)), 12)) {
                                    current_statement__ = 127;
                                    lp_accum__.add(stan::math::double_exponential_lpdf<
                                                     false>(
                                                     stan::model::rvalue(
                                                       breg, "breg",
                                                       stan::model::index_uni(
                                                         i)),
                                                     stan::model::rvalue(
                                                       prior_breg,
                                                       "prior_breg",
                                                       stan::model::index_uni(
                                                         i),
                                                       stan::model::index_uni(
                                                         1)),
                                                     stan::model::rvalue(
                                                       prior_breg,
                                                       "prior_breg",
                                                       stan::model::index_uni(
                                                         i),
                                                       stan::model::index_uni(
                                                         2))));
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 164;
        if (stan::math::logical_gt(p, 0)) {
          current_statement__ = 162;
          for (int i = 1; i <= p; ++i) {
            current_statement__ = 160;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_ar, "prior_ar",
                    stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
              current_statement__ = 159;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(ar0, "ar0",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(prior_ar, "prior_ar",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_ar, "prior_ar",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 158;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_ar, "prior_ar",
                      stan::model::index_uni(i), stan::model::index_uni(4)),
                    2)) {
                current_statement__ = 157;
                lp_accum__.add(stan::math::beta_lpdf<false>(
                                 stan::math::abs(
                                   stan::model::rvalue(ar0, "ar0",
                                     stan::model::index_uni(i))),
                                 stan::model::rvalue(prior_ar, "prior_ar",
                                   stan::model::index_uni(i),
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_ar, "prior_ar",
                                   stan::model::index_uni(i),
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 156;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_ar, "prior_ar",
                        stan::model::index_uni(i), stan::model::index_uni(4)),
                      3)) {
                  current_statement__ = 155;
                  lp_accum__.add(stan::math::uniform_lpdf<false>(
                                   stan::model::rvalue(ar0, "ar0",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(prior_ar, "prior_ar",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_ar, "prior_ar",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(2))));
                }
              }
            }
          }
        }
        current_statement__ = 174;
        if (stan::math::logical_gt(q, 0)) {
          current_statement__ = 172;
          for (int i = 1; i <= q; ++i) {
            current_statement__ = 170;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_ma, "prior_ma",
                    stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
              current_statement__ = 169;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(ma0, "ma0",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(prior_ma, "prior_ma",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_ma, "prior_ma",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 168;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_ma, "prior_ma",
                      stan::model::index_uni(i), stan::model::index_uni(4)),
                    2)) {
                current_statement__ = 167;
                lp_accum__.add(stan::math::beta_lpdf<false>(
                                 stan::math::abs(
                                   stan::model::rvalue(ma0, "ma0",
                                     stan::model::index_uni(i))),
                                 stan::model::rvalue(prior_ma, "prior_ma",
                                   stan::model::index_uni(i),
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_ma, "prior_ma",
                                   stan::model::index_uni(i),
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 166;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_ma, "prior_ma",
                        stan::model::index_uni(i), stan::model::index_uni(4)),
                      3)) {
                  current_statement__ = 165;
                  lp_accum__.add(stan::math::uniform_lpdf<false>(
                                   stan::model::rvalue(ma0, "ma0",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(prior_ma, "prior_ma",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_ma, "prior_ma",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(2))));
                }
              }
            }
          }
        }
        current_statement__ = 184;
        if (stan::math::logical_gt(s, 0)) {
          current_statement__ = 182;
          for (int i = 1; i <= s; ++i) {
            current_statement__ = 180;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_arch, "prior_arch",
                    stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
              current_statement__ = 179;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(arch, "arch",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(prior_arch, "prior_arch",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_arch, "prior_arch",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 178;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_arch, "prior_arch",
                      stan::model::index_uni(i), stan::model::index_uni(4)),
                    2)) {
                current_statement__ = 177;
                lp_accum__.add(stan::math::beta_lpdf<false>(
                                 stan::model::rvalue(arch, "arch",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(prior_arch,
                                   "prior_arch", stan::model::index_uni(i),
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_arch,
                                   "prior_arch", stan::model::index_uni(i),
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 176;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_arch, "prior_arch",
                        stan::model::index_uni(i), stan::model::index_uni(4)),
                      3)) {
                  current_statement__ = 175;
                  lp_accum__.add(stan::math::uniform_lpdf<false>(
                                   stan::model::rvalue(arch, "arch",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(prior_arch,
                                     "prior_arch", stan::model::index_uni(i),
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_arch,
                                     "prior_arch", stan::model::index_uni(i),
                                     stan::model::index_uni(2))));
                }
              }
            }
          }
        }
        current_statement__ = 194;
        if (stan::math::logical_gt(k, 0)) {
          current_statement__ = 192;
          for (int i = 1; i <= k; ++i) {
            current_statement__ = 190;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_garch, "prior_garch",
                    stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
              current_statement__ = 189;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(garch, "garch",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(prior_garch,
                                 "prior_garch", stan::model::index_uni(i),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_garch,
                                 "prior_garch", stan::model::index_uni(i),
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 188;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_garch, "prior_garch",
                      stan::model::index_uni(i), stan::model::index_uni(4)),
                    2)) {
                current_statement__ = 187;
                lp_accum__.add(stan::math::beta_lpdf<false>(
                                 stan::model::rvalue(garch, "garch",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(prior_garch,
                                   "prior_garch", stan::model::index_uni(i),
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_garch,
                                   "prior_garch", stan::model::index_uni(i),
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 186;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_garch, "prior_garch",
                        stan::model::index_uni(i), stan::model::index_uni(4)),
                      3)) {
                  current_statement__ = 185;
                  lp_accum__.add(stan::math::uniform_lpdf<false>(
                                   stan::model::rvalue(garch, "garch",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(prior_garch,
                                     "prior_garch",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_garch,
                                     "prior_garch",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(2))));
                }
              }
            }
          }
        }
        current_statement__ = 222;
        if (stan::math::logical_gt(h, 0)) {
          current_statement__ = 220;
          for (int i = 1; i <= h; ++i) {
            current_statement__ = 218;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_mgarch, "prior_mgarch",
                    stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
              current_statement__ = 217;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(mgarch, "mgarch",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(prior_mgarch,
                                 "prior_mgarch", stan::model::index_uni(i),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_mgarch,
                                 "prior_mgarch", stan::model::index_uni(i),
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 216;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_mgarch, "prior_mgarch",
                      stan::model::index_uni(i), stan::model::index_uni(4)),
                    2)) {
                current_statement__ = 215;
                lp_accum__.add(stan::math::beta_lpdf<false>(
                                 stan::model::rvalue(mgarch, "mgarch",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(prior_mgarch,
                                   "prior_mgarch", stan::model::index_uni(i),
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_mgarch,
                                   "prior_mgarch", stan::model::index_uni(i),
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 214;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_mgarch, "prior_mgarch",
                        stan::model::index_uni(i), stan::model::index_uni(4)),
                      3)) {
                  current_statement__ = 213;
                  lp_accum__.add(stan::math::uniform_lpdf<false>(
                                   stan::model::rvalue(mgarch, "mgarch",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(prior_mgarch,
                                     "prior_mgarch",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_mgarch,
                                     "prior_mgarch",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(2))));
                } else {
                  current_statement__ = 212;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_mgarch, "prior_mgarch",
                          stan::model::index_uni(i),
                          stan::model::index_uni(4)), 4)) {
                    current_statement__ = 211;
                    lp_accum__.add(stan::math::student_t_lpdf<false>(
                                     stan::model::rvalue(mgarch, "mgarch",
                                       stan::model::index_uni(i)),
                                     stan::model::rvalue(prior_mgarch,
                                       "prior_mgarch",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(3)),
                                     stan::model::rvalue(prior_mgarch,
                                       "prior_mgarch",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_mgarch,
                                       "prior_mgarch",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 210;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_mgarch, "prior_mgarch",
                            stan::model::index_uni(i),
                            stan::model::index_uni(4)), 5)) {
                      current_statement__ = 209;
                      lp_accum__.add(stan::math::cauchy_lpdf<false>(
                                       stan::model::rvalue(mgarch, "mgarch",
                                         stan::model::index_uni(i)),
                                       stan::model::rvalue(prior_mgarch,
                                         "prior_mgarch",
                                         stan::model::index_uni(i),
                                         stan::model::index_uni(1)),
                                       stan::model::rvalue(prior_mgarch,
                                         "prior_mgarch",
                                         stan::model::index_uni(i),
                                         stan::model::index_uni(2))));
                    } else {
                      current_statement__ = 208;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_mgarch, "prior_mgarch",
                              stan::model::index_uni(i),
                              stan::model::index_uni(4)), 6)) {
                        current_statement__ = 207;
                        lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                                         stan::model::rvalue(mgarch,
                                           "mgarch",
                                           stan::model::index_uni(i)),
                                         stan::model::rvalue(prior_mgarch,
                                           "prior_mgarch",
                                           stan::model::index_uni(i),
                                           stan::model::index_uni(1)),
                                         stan::model::rvalue(prior_mgarch,
                                           "prior_mgarch",
                                           stan::model::index_uni(i),
                                           stan::model::index_uni(2))));
                      } else {
                        current_statement__ = 206;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_mgarch,
                                "prior_mgarch", stan::model::index_uni(i),
                                stan::model::index_uni(4)), 7)) {
                          current_statement__ = 205;
                          lp_accum__.add(stan::math::inv_chi_square_lpdf<
                                           false>(
                                           stan::model::rvalue(mgarch,
                                             "mgarch",
                                             stan::model::index_uni(i)),
                                           stan::model::rvalue(prior_mgarch,
                                             "prior_mgarch",
                                             stan::model::index_uni(i),
                                             stan::model::index_uni(3))));
                        } else {
                          current_statement__ = 204;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_mgarch,
                                  "prior_mgarch", stan::model::index_uni(i),
                                  stan::model::index_uni(4)), 8)) {
                            current_statement__ = 203;
                            lp_accum__.add(-(stan::math::log(sigma0)));
                          } else {
                            current_statement__ = 202;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_mgarch,
                                    "prior_mgarch",
                                    stan::model::index_uni(i),
                                    stan::model::index_uni(4)), 9)) {
                              current_statement__ = 201;
                              lp_accum__.add(stan::math::gamma_lpdf<false>(
                                               stan::model::rvalue(mgarch,
                                                 "mgarch",
                                                 stan::model::index_uni(i)),
                                               stan::model::rvalue(
                                                 prior_mgarch,
                                                 "prior_mgarch",
                                                 stan::model::index_uni(i),
                                                 stan::model::index_uni(1)),
                                               stan::model::rvalue(
                                                 prior_mgarch,
                                                 "prior_mgarch",
                                                 stan::model::index_uni(i),
                                                 stan::model::index_uni(2))));
                            } else {
                              current_statement__ = 200;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_mgarch,
                                      "prior_mgarch",
                                      stan::model::index_uni(i),
                                      stan::model::index_uni(4)), 10)) {
                                current_statement__ = 199;
                                lp_accum__.add(stan::math::exponential_lpdf<
                                                 false>(
                                                 stan::model::rvalue(mgarch,
                                                   "mgarch",
                                                   stan::model::index_uni(i)),
                                                 stan::model::rvalue(
                                                   prior_mgarch,
                                                   "prior_mgarch",
                                                   stan::model::index_uni(i),
                                                   stan::model::index_uni(2))));
                              } else {
                                current_statement__ = 198;
                                if (stan::math::logical_eq(
                                      stan::model::rvalue(prior_mgarch,
                                        "prior_mgarch",
                                        stan::model::index_uni(i),
                                        stan::model::index_uni(4)), 11)) {
                                  current_statement__ = 197;
                                  lp_accum__.add(stan::math::chi_square_lpdf<
                                                   false>(
                                                   stan::model::rvalue(
                                                     mgarch, "mgarch",
                                                     stan::model::index_uni(i)),
                                                   stan::model::rvalue(
                                                     prior_mgarch,
                                                     "prior_mgarch",
                                                     stan::model::index_uni(i),
                                                     stan::model::index_uni(3))));
                                } else {
                                  current_statement__ = 196;
                                  if (stan::math::logical_eq(
                                        stan::model::rvalue(prior_mgarch,
                                          "prior_mgarch",
                                          stan::model::index_uni(i),
                                          stan::model::index_uni(4)), 12)) {
                                    current_statement__ = 195;
                                    lp_accum__.add(stan::math::double_exponential_lpdf<
                                                     false>(
                                                     stan::model::rvalue(
                                                       mgarch, "mgarch",
                                                       stan::model::index_uni(
                                                         i)),
                                                     stan::model::rvalue(
                                                       prior_mgarch,
                                                       "prior_mgarch",
                                                       stan::model::index_uni(
                                                         i),
                                                       stan::model::index_uni(
                                                         1)),
                                                     stan::model::rvalue(
                                                       prior_mgarch,
                                                       "prior_mgarch",
                                                       stan::model::index_uni(
                                                         i),
                                                       stan::model::index_uni(
                                                         2))));
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 248;
        if (stan::math::logical_eq(genT, 1)) {
          current_statement__ = 246;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_dfv, "prior_dfv",
                  stan::model::index_uni(4)), 1)) {
            current_statement__ = 245;
            lp_accum__.add(stan::math::normal_lpdf<false>(
                             stan::model::rvalue(v, "v",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_dfv, "prior_dfv",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_dfv, "prior_dfv",
                               stan::model::index_uni(2))));
          } else {
            current_statement__ = 244;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_dfv, "prior_dfv",
                    stan::model::index_uni(4)), 2)) {
              current_statement__ = 243;
              lp_accum__.add(stan::math::beta_lpdf<false>(
                               stan::model::rvalue(v, "v",
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_dfv, "prior_dfv",
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_dfv, "prior_dfv",
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 242;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_dfv, "prior_dfv",
                      stan::model::index_uni(4)), 3)) {
                current_statement__ = 241;
                lp_accum__.add(stan::math::uniform_lpdf<false>(
                                 stan::model::rvalue(v, "v",
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_dfv, "prior_dfv",
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_dfv, "prior_dfv",
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 240;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_dfv, "prior_dfv",
                        stan::model::index_uni(4)), 4)) {
                  current_statement__ = 239;
                  lp_accum__.add(stan::math::student_t_lpdf<false>(
                                   stan::model::rvalue(v, "v",
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_dfv,
                                     "prior_dfv", stan::model::index_uni(3)),
                                   stan::model::rvalue(prior_dfv,
                                     "prior_dfv", stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_dfv,
                                     "prior_dfv", stan::model::index_uni(2))));
                } else {
                  current_statement__ = 238;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_dfv, "prior_dfv",
                          stan::model::index_uni(4)), 5)) {
                    current_statement__ = 237;
                    lp_accum__.add(stan::math::cauchy_lpdf<false>(
                                     stan::model::rvalue(v, "v",
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_dfv,
                                       "prior_dfv", stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_dfv,
                                       "prior_dfv", stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 236;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_dfv, "prior_dfv",
                            stan::model::index_uni(4)), 6)) {
                      current_statement__ = 235;
                      lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                                       stan::model::rvalue(v, "v",
                                         stan::model::index_uni(1)),
                                       stan::model::rvalue(prior_dfv,
                                         "prior_dfv",
                                         stan::model::index_uni(1)),
                                       stan::model::rvalue(prior_dfv,
                                         "prior_dfv",
                                         stan::model::index_uni(2))));
                    } else {
                      current_statement__ = 234;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_dfv, "prior_dfv",
                              stan::model::index_uni(4)), 7)) {
                        current_statement__ = 233;
                        lp_accum__.add(stan::math::inv_chi_square_lpdf<
                                         false>(
                                         stan::model::rvalue(v, "v",
                                           stan::model::index_uni(1)),
                                         stan::model::rvalue(prior_dfv,
                                           "prior_dfv",
                                           stan::model::index_uni(3))));
                      } else {
                        current_statement__ = 232;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_dfv, "prior_dfv",
                                stan::model::index_uni(4)), 8)) {
                          current_statement__ = 231;
                          lp_accum__.add(stan::math::log(
                                           Jpv(
                                             stan::model::rvalue(v, "v",
                                               stan::model::index_uni(1)),
                                             pstream__)));
                        } else {
                          current_statement__ = 230;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_dfv, "prior_dfv",
                                  stan::model::index_uni(4)), 9)) {
                            current_statement__ = 229;
                            lp_accum__.add(stan::math::gamma_lpdf<false>(
                                             stan::model::rvalue(v, "v",
                                               stan::model::index_uni(1)),
                                             stan::model::rvalue(prior_dfv,
                                               "prior_dfv",
                                               stan::model::index_uni(1)),
                                             stan::model::rvalue(prior_dfv,
                                               "prior_dfv",
                                               stan::model::index_uni(2))));
                          } else {
                            current_statement__ = 228;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_dfv, "prior_dfv",
                                    stan::model::index_uni(4)), 10)) {
                              current_statement__ = 227;
                              lp_accum__.add(stan::math::exponential_lpdf<
                                               false>(
                                               stan::model::rvalue(v, "v",
                                                 stan::model::index_uni(1)),
                                               stan::model::rvalue(prior_dfv,
                                                 "prior_dfv",
                                                 stan::model::index_uni(2))));
                            } else {
                              current_statement__ = 226;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_dfv,
                                      "prior_dfv", stan::model::index_uni(4)),
                                    11)) {
                                current_statement__ = 225;
                                lp_accum__.add(stan::math::chi_square_lpdf<
                                                 false>(
                                                 stan::model::rvalue(v, "v",
                                                   stan::model::index_uni(1)),
                                                 stan::model::rvalue(
                                                   prior_dfv, "prior_dfv",
                                                   stan::model::index_uni(3))));
                              } else {
                                current_statement__ = 224;
                                if (stan::math::logical_eq(
                                      stan::model::rvalue(prior_dfv,
                                        "prior_dfv",
                                        stan::model::index_uni(4)), 12)) {
                                  current_statement__ = 223;
                                  lp_accum__.add(stan::math::double_exponential_lpdf<
                                                   false>(
                                                   stan::model::rvalue(v,
                                                     "v",
                                                     stan::model::index_uni(1)),
                                                   stan::model::rvalue(
                                                     prior_dfv, "prior_dfv",
                                                     stan::model::index_uni(1)),
                                                   stan::model::rvalue(
                                                     prior_dfv, "prior_dfv",
                                                     stan::model::index_uni(2))));
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 276;
        if (stan::math::logical_eq(asym1, 1)) {
          current_statement__ = 274;
          for (int i = 1; i <= 2; ++i) {
            current_statement__ = 272;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_gamma, "prior_gamma",
                    stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
              current_statement__ = 271;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(gamma, "gamma",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(prior_gamma,
                                 "prior_gamma", stan::model::index_uni(i),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_gamma,
                                 "prior_gamma", stan::model::index_uni(i),
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 270;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_gamma, "prior_gamma",
                      stan::model::index_uni(i), stan::model::index_uni(4)),
                    2)) {
                current_statement__ = 269;
                lp_accum__.add(stan::math::beta_lpdf<false>(
                                 stan::model::rvalue(gamma, "gamma",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(prior_gamma,
                                   "prior_gamma", stan::model::index_uni(i),
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_gamma,
                                   "prior_gamma", stan::model::index_uni(i),
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 268;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_gamma, "prior_gamma",
                        stan::model::index_uni(i), stan::model::index_uni(4)),
                      3)) {
                  current_statement__ = 267;
                  lp_accum__.add(stan::math::uniform_lpdf<false>(
                                   stan::model::rvalue(gamma, "gamma",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(prior_gamma,
                                     "prior_gamma",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_gamma,
                                     "prior_gamma",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(2))));
                } else {
                  current_statement__ = 266;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_gamma, "prior_gamma",
                          stan::model::index_uni(i),
                          stan::model::index_uni(4)), 4)) {
                    current_statement__ = 265;
                    lp_accum__.add(stan::math::student_t_lpdf<false>(
                                     stan::model::rvalue(gamma, "gamma",
                                       stan::model::index_uni(i)),
                                     stan::model::rvalue(prior_gamma,
                                       "prior_gamma",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(3)),
                                     stan::model::rvalue(prior_gamma,
                                       "prior_gamma",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_gamma,
                                       "prior_gamma",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 264;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_gamma, "prior_gamma",
                            stan::model::index_uni(i),
                            stan::model::index_uni(4)), 5)) {
                      current_statement__ = 263;
                      lp_accum__.add(stan::math::cauchy_lpdf<false>(
                                       stan::model::rvalue(gamma, "gamma",
                                         stan::model::index_uni(i)),
                                       stan::model::rvalue(prior_gamma,
                                         "prior_gamma",
                                         stan::model::index_uni(i),
                                         stan::model::index_uni(1)),
                                       stan::model::rvalue(prior_gamma,
                                         "prior_gamma",
                                         stan::model::index_uni(i),
                                         stan::model::index_uni(2))));
                    } else {
                      current_statement__ = 262;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_gamma, "prior_gamma",
                              stan::model::index_uni(i),
                              stan::model::index_uni(4)), 6)) {
                        current_statement__ = 261;
                        lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                                         stan::model::rvalue(gamma, "gamma",
                                           stan::model::index_uni(i)),
                                         stan::model::rvalue(prior_gamma,
                                           "prior_gamma",
                                           stan::model::index_uni(i),
                                           stan::model::index_uni(1)),
                                         stan::model::rvalue(prior_gamma,
                                           "prior_gamma",
                                           stan::model::index_uni(i),
                                           stan::model::index_uni(2))));
                      } else {
                        current_statement__ = 260;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_gamma, "prior_gamma",
                                stan::model::index_uni(i),
                                stan::model::index_uni(4)), 7)) {
                          current_statement__ = 259;
                          lp_accum__.add(stan::math::inv_chi_square_lpdf<
                                           false>(
                                           stan::model::rvalue(gamma,
                                             "gamma",
                                             stan::model::index_uni(i)),
                                           stan::model::rvalue(prior_gamma,
                                             "prior_gamma",
                                             stan::model::index_uni(i),
                                             stan::model::index_uni(3))));
                        } else {
                          current_statement__ = 258;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_gamma,
                                  "prior_gamma", stan::model::index_uni(i),
                                  stan::model::index_uni(4)), 8)) {
                            current_statement__ = 257;
                            lp_accum__.add(-(stan::math::log(sigma0)));
                          } else {
                            current_statement__ = 256;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_gamma,
                                    "prior_gamma", stan::model::index_uni(i),
                                    stan::model::index_uni(4)), 9)) {
                              current_statement__ = 255;
                              lp_accum__.add(stan::math::gamma_lpdf<false>(
                                               stan::model::rvalue(gamma,
                                                 "gamma",
                                                 stan::model::index_uni(i)),
                                               stan::model::rvalue(
                                                 prior_gamma, "prior_gamma",
                                                 stan::model::index_uni(i),
                                                 stan::model::index_uni(1)),
                                               stan::model::rvalue(
                                                 prior_gamma, "prior_gamma",
                                                 stan::model::index_uni(i),
                                                 stan::model::index_uni(2))));
                            } else {
                              current_statement__ = 254;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_gamma,
                                      "prior_gamma",
                                      stan::model::index_uni(i),
                                      stan::model::index_uni(4)), 10)) {
                                current_statement__ = 253;
                                lp_accum__.add(stan::math::exponential_lpdf<
                                                 false>(
                                                 stan::model::rvalue(gamma,
                                                   "gamma",
                                                   stan::model::index_uni(i)),
                                                 stan::model::rvalue(
                                                   prior_gamma,
                                                   "prior_gamma",
                                                   stan::model::index_uni(i),
                                                   stan::model::index_uni(2))));
                              } else {
                                current_statement__ = 252;
                                if (stan::math::logical_eq(
                                      stan::model::rvalue(prior_gamma,
                                        "prior_gamma",
                                        stan::model::index_uni(i),
                                        stan::model::index_uni(4)), 11)) {
                                  current_statement__ = 251;
                                  lp_accum__.add(stan::math::chi_square_lpdf<
                                                   false>(
                                                   stan::model::rvalue(gamma,
                                                     "gamma",
                                                     stan::model::index_uni(i)),
                                                   stan::model::rvalue(
                                                     prior_gamma,
                                                     "prior_gamma",
                                                     stan::model::index_uni(i),
                                                     stan::model::index_uni(3))));
                                } else {
                                  current_statement__ = 250;
                                  if (stan::math::logical_eq(
                                        stan::model::rvalue(prior_gamma,
                                          "prior_gamma",
                                          stan::model::index_uni(i),
                                          stan::model::index_uni(4)), 12)) {
                                    current_statement__ = 249;
                                    lp_accum__.add(stan::math::double_exponential_lpdf<
                                                     false>(
                                                     stan::model::rvalue(
                                                       gamma, "gamma",
                                                       stan::model::index_uni(
                                                         i)),
                                                     stan::model::rvalue(
                                                       prior_gamma,
                                                       "prior_gamma",
                                                       stan::model::index_uni(
                                                         i),
                                                       stan::model::index_uni(
                                                         1)),
                                                     stan::model::rvalue(
                                                       prior_gamma,
                                                       "prior_gamma",
                                                       stan::model::index_uni(
                                                         i),
                                                       stan::model::index_uni(
                                                         2))));
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 278;
        if (stan::math::logical_eq(genT, 1)) {
          current_statement__ = 277;
          lp_accum__.add(stan::math::inv_gamma_lpdf<false>(lambda,
                           (stan::model::rvalue(v, "v",
                              stan::model::index_uni(1)) / 2),
                           (stan::model::rvalue(v, "v",
                              stan::model::index_uni(1)) / 2)));
        }
        current_statement__ = 279;
        lp_accum__.add(stan::math::normal_lpdf<false>(epsilon, 0, sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "model_tgarch_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto mu0 = in__.template read<local_scalar_t__>();
      current_statement__ = 2;
      auto sigma0 =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 3;
      auto breg =
        in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(d1);
      current_statement__ = 4;
      auto ar0 =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-(1), 1, lp__, p);
      current_statement__ = 5;
      auto ma0 =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-(1), 1, lp__, q);
      current_statement__ = 6;
      auto arch =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__, s);
      current_statement__ = 7;
      auto garch =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__, k);
      current_statement__ = 8;
      auto mgarch =
        in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(h);
      current_statement__ = 9;
      auto v =
        in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__,-1,1>,
          jacobian__>(2.01, lp__, v_1dim__);
      current_statement__ = 10;
      auto lambda =
        in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__,-1,1>,
          jacobian__>(1, lp__, lambda_1dim__);
      current_statement__ = 11;
      auto gamma =
        in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__,-1,1>,
          jacobian__>(0, lp__, gamma_1dim__);
      Eigen::Matrix<double,-1,1> ar =
        Eigen::Matrix<double,-1,1>::Constant(p,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> ma =
        Eigen::Matrix<double,-1,1>::Constant(q,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> epsilon =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> sigma =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(mu0);
      out__.write(sigma0);
      out__.write(breg);
      out__.write(ar0);
      out__.write(ma0);
      out__.write(arch);
      out__.write(garch);
      out__.write(mgarch);
      out__.write(v);
      out__.write(lambda);
      out__.write(gamma);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 25;
      for (int i = 1; i <= p; ++i) {
        current_statement__ = 23;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_ar, "prior_ar",
                stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
          current_statement__ = 22;
          stan::model::assign(ar,
            stan::model::rvalue(ar0, "ar0", stan::model::index_uni(i)),
            "assigning variable ar", stan::model::index_uni(i));
        } else {
          current_statement__ = 21;
          stan::model::assign(ar, ((2 *
            stan::model::rvalue(ar0, "ar0", stan::model::index_uni(i))) - 1),
            "assigning variable ar", stan::model::index_uni(i));
        }
      }
      current_statement__ = 30;
      for (int i = 1; i <= q; ++i) {
        current_statement__ = 28;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_ma, "prior_ma",
                stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
          current_statement__ = 27;
          stan::model::assign(ma,
            stan::model::rvalue(ma0, "ma0", stan::model::index_uni(i)),
            "assigning variable ma", stan::model::index_uni(i));
        } else {
          current_statement__ = 26;
          stan::model::assign(ma, ((2 *
            stan::model::rvalue(ma0, "ma0", stan::model::index_uni(i))) - 1),
            "assigning variable ma", stan::model::index_uni(i));
        }
      }
      current_statement__ = 33;
      if (stan::math::logical_gt(d1, 0)) {
        current_statement__ = 32;
        stan::model::assign(mu, stan::math::multiply(xreg, breg),
          "assigning variable mu");
      } else {
        current_statement__ = 31;
        stan::model::assign(mu, stan::math::rep_vector(0, n),
          "assigning variable mu");
      }
      current_statement__ = 66;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 34;
        stan::model::assign(mu,
          (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) + mu0),
          "assigning variable mu", stan::model::index_uni(i));
        current_statement__ = 35;
        stan::model::assign(sigma, sigma0, "assigning variable sigma",
          stan::model::index_uni(i));
        current_statement__ = 39;
        if (stan::math::logical_gt(p, 0)) {
          current_statement__ = 38;
          for (int j = 1; j <= p; ++j) {
            current_statement__ = 37;
            if (stan::math::logical_gt(i, j)) {
              current_statement__ = 36;
              stan::model::assign(mu,
                (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
                (stan::model::rvalue(y, "y", stan::model::index_uni((i - j)))
                * stan::model::rvalue(ar, "ar", stan::model::index_uni(j)))),
                "assigning variable mu", stan::model::index_uni(i));
            }
          }
        }
        current_statement__ = 43;
        if (stan::math::logical_gt(q, 0)) {
          current_statement__ = 42;
          for (int j = 1; j <= q; ++j) {
            current_statement__ = 41;
            if (stan::math::logical_gt(i, j)) {
              current_statement__ = 40;
              stan::model::assign(mu,
                (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
                (stan::model::rvalue(epsilon, "epsilon",
                   stan::model::index_uni((i - j))) *
                stan::model::rvalue(ma, "ma", stan::model::index_uni(j)))),
                "assigning variable mu", stan::model::index_uni(i));
            }
          }
        }
        current_statement__ = 44;
        stan::model::assign(epsilon,
          (stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
          stan::model::rvalue(mu, "mu", stan::model::index_uni(i))),
          "assigning variable epsilon", stan::model::index_uni(i));
        current_statement__ = 54;
        if (stan::math::logical_gte(s, k)) {
          current_statement__ = 48;
          if (stan::math::logical_gt(s, 0)) {
            current_statement__ = 47;
            for (int j = 1; j <= s; ++j) {
              current_statement__ = 46;
              if (stan::math::logical_gt(i, j)) {
                current_statement__ = 45;
                stan::model::assign(sigma,
                  (stan::model::rvalue(sigma, "sigma",
                     stan::model::index_uni(i)) +
                  (stan::model::rvalue(arch, "arch",
                     stan::model::index_uni(j)) *
                  stan::math::pow(
                    stan::model::rvalue(epsilon, "epsilon",
                      stan::model::index_uni((i - j))), 2))),
                  "assigning variable sigma", stan::model::index_uni(i));
              }
            }
          }
          current_statement__ = 52;
          if (stan::math::logical_gt(k, 0)) {
            current_statement__ = 51;
            for (int j = 1; j <= k; ++j) {
              current_statement__ = 50;
              if (stan::math::logical_gt(i, j)) {
                current_statement__ = 49;
                stan::model::assign(sigma,
                  (stan::model::rvalue(sigma, "sigma",
                     stan::model::index_uni(i)) +
                  (stan::model::rvalue(garch, "garch",
                     stan::model::index_uni(j)) *
                  stan::math::pow(
                    stan::model::rvalue(sigma, "sigma",
                      stan::model::index_uni((i - j))), 2))),
                  "assigning variable sigma", stan::model::index_uni(i));
              }
            }
          }
        }
        current_statement__ = 57;
        if (stan::math::logical_eq(genT, 1)) {
          current_statement__ = 56;
          stan::model::assign(sigma,
            stan::math::sqrt(
              ((((stan::model::rvalue(v, "v", stan::model::index_uni(1)) - 2)
              *
              stan::model::rvalue(lambda, "lambda", stan::model::index_uni(i)))
              *
              stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)))
              / stan::model::rvalue(v, "v", stan::model::index_uni(1)))),
            "assigning variable sigma", stan::model::index_uni(i));
        } else {
          current_statement__ = 55;
          stan::model::assign(sigma,
            stan::math::sqrt(
              stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i))),
            "assigning variable sigma", stan::model::index_uni(i));
        }
        current_statement__ = 61;
        if (stan::math::logical_gt(h, 0)) {
          current_statement__ = 60;
          for (int j = 1; j <= h; ++j) {
            current_statement__ = 59;
            if (stan::math::logical_gt(i, j)) {
              current_statement__ = 58;
              stan::model::assign(mu,
                (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
                (stan::model::rvalue(mgarch, "mgarch",
                   stan::model::index_uni(j)) *
                stan::model::rvalue(sigma, "sigma",
                  stan::model::index_uni(((i - j) + 1))))),
                "assigning variable mu", stan::model::index_uni(i));
            }
          }
        }
        current_statement__ = 64;
        if (stan::math::logical_eq(asym1, 1)) {
          current_statement__ = 63;
          if (stan::math::logical_gt(i, 1)) {
            current_statement__ = 62;
            stan::model::assign(sigma,
              (stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i))
              +
              (stan::model::rvalue(gamma, "gamma", stan::model::index_uni(1))
              *
              asymf(
                stan::model::rvalue(epsilon, "epsilon",
                  stan::model::index_uni((i - 1))),
                stan::model::rvalue(gamma, "gamma", stan::model::index_uni(2)),
                asym, pstream__))), "assigning variable sigma",
              stan::model::index_uni(i));
          }
        }
      }
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "sigma", sigma, 0);
      if (emit_transformed_parameters__) {
        out__.write(ar);
        out__.write(ma);
        out__.write(mu);
        out__.write(epsilon);
        out__.write(sigma);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      double loglik = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 17;
      loglik = 0;
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> fit =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> residuals =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 77;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 75;
        if (stan::math::logical_eq(genT, 1)) {
          current_statement__ = 71;
          stan::model::assign(residuals,
            stan::math::student_t_rng(
              stan::model::rvalue(v, "v", stan::model::index_uni(1)),
              stan::model::rvalue(epsilon, "epsilon",
                stan::model::index_uni(i)),
              stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)),
              base_rng__), "assigning variable residuals",
            stan::model::index_uni(i));
          current_statement__ = 72;
          stan::model::assign(log_lik,
            stan::math::student_t_lpdf<false>(
              stan::model::rvalue(y, "y", stan::model::index_uni(i)),
              stan::model::rvalue(v, "v", stan::model::index_uni(1)),
              stan::model::rvalue(mu, "mu", stan::model::index_uni(i)),
              stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i))),
            "assigning variable log_lik", stan::model::index_uni(i));
          current_statement__ = 73;
          loglik = (loglik +
            stan::model::rvalue(log_lik, "log_lik", stan::model::index_uni(i)));
        } else {
          current_statement__ = 67;
          stan::model::assign(residuals,
            stan::math::normal_rng(
              stan::model::rvalue(epsilon, "epsilon",
                stan::model::index_uni(i)),
              stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)),
              base_rng__), "assigning variable residuals",
            stan::model::index_uni(i));
          current_statement__ = 68;
          stan::model::assign(log_lik,
            stan::math::normal_lpdf<false>(
              stan::model::rvalue(y, "y", stan::model::index_uni(i)),
              stan::model::rvalue(mu, "mu", stan::model::index_uni(i)),
              stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i))),
            "assigning variable log_lik", stan::model::index_uni(i));
          current_statement__ = 69;
          loglik = (loglik +
            stan::model::rvalue(log_lik, "log_lik", stan::model::index_uni(i)));
        }
      }
      current_statement__ = 78;
      stan::model::assign(fit, stan::math::subtract(y, residuals),
        "assigning variable fit");
      out__.write(loglik);
      out__.write(log_lik);
      out__.write(fit);
      out__.write(residuals);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      local_scalar_t__ mu0 = DUMMY_VAR__;
      current_statement__ = 1;
      mu0 = in__.read<local_scalar_t__>();
      out__.write(mu0);
      local_scalar_t__ sigma0 = DUMMY_VAR__;
      current_statement__ = 2;
      sigma0 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma0);
      Eigen::Matrix<local_scalar_t__,-1,1> breg =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d1, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(breg,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(d1),
        "assigning variable breg");
      out__.write(breg);
      Eigen::Matrix<local_scalar_t__,-1,1> ar0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(ar0,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(p),
        "assigning variable ar0");
      out__.write_free_lub(-(1), 1, ar0);
      Eigen::Matrix<local_scalar_t__,-1,1> ma0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(q, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(ma0,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(q),
        "assigning variable ma0");
      out__.write_free_lub(-(1), 1, ma0);
      Eigen::Matrix<local_scalar_t__,-1,1> arch =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(s, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(arch,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(s),
        "assigning variable arch");
      out__.write_free_lub(0, 1, arch);
      Eigen::Matrix<local_scalar_t__,-1,1> garch =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(garch,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(k),
        "assigning variable garch");
      out__.write_free_lub(0, 1, garch);
      Eigen::Matrix<local_scalar_t__,-1,1> mgarch =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(h, DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(mgarch,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(h),
        "assigning variable mgarch");
      out__.write(mgarch);
      Eigen::Matrix<local_scalar_t__,-1,1> v =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(v_1dim__, DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(v,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(v_1dim__),
        "assigning variable v");
      out__.write_free_lb(2.01, v);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda_1dim__,
          DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(lambda,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(lambda_1dim__),
        "assigning variable lambda");
      out__.write_free_lb(1, lambda);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(gamma_1dim__,
          DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(gamma,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(gamma_1dim__),
        "assigning variable gamma");
      out__.write_free_lb(0, gamma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "mu0", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "sigma0", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "breg", "double",
        std::vector<size_t>{static_cast<size_t>(d1)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "ar0", "double",
        std::vector<size_t>{static_cast<size_t>(p)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "ma0", "double",
        std::vector<size_t>{static_cast<size_t>(q)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "arch", "double",
        std::vector<size_t>{static_cast<size_t>(s)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "garch", "double",
        std::vector<size_t>{static_cast<size_t>(k)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "mgarch", "double",
        std::vector<size_t>{static_cast<size_t>(h)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "v", "double",
        std::vector<size_t>{static_cast<size_t>(v_1dim__)});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "lambda", "double",
        std::vector<size_t>{static_cast<size_t>(lambda_1dim__)});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization", "gamma", "double",
        std::vector<size_t>{static_cast<size_t>(gamma_1dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ mu0 = DUMMY_VAR__;
      current_statement__ = 1;
      mu0 = context__.vals_r("mu0")[(1 - 1)];
      out__.write(mu0);
      local_scalar_t__ sigma0 = DUMMY_VAR__;
      current_statement__ = 2;
      sigma0 = context__.vals_r("sigma0")[(1 - 1)];
      out__.write_free_lb(0, sigma0);
      Eigen::Matrix<local_scalar_t__,-1,1> breg =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d1, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> breg_flat__;
        current_statement__ = 3;
        breg_flat__ = context__.vals_r("breg");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= d1; ++sym1__) {
          stan::model::assign(breg, breg_flat__[(pos__ - 1)],
            "assigning variable breg", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(breg);
      Eigen::Matrix<local_scalar_t__,-1,1> ar0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> ar0_flat__;
        current_statement__ = 4;
        ar0_flat__ = context__.vals_r("ar0");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          stan::model::assign(ar0, ar0_flat__[(pos__ - 1)],
            "assigning variable ar0", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(-(1), 1, ar0);
      Eigen::Matrix<local_scalar_t__,-1,1> ma0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(q, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> ma0_flat__;
        current_statement__ = 5;
        ma0_flat__ = context__.vals_r("ma0");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
          stan::model::assign(ma0, ma0_flat__[(pos__ - 1)],
            "assigning variable ma0", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(-(1), 1, ma0);
      Eigen::Matrix<local_scalar_t__,-1,1> arch =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(s, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> arch_flat__;
        current_statement__ = 6;
        arch_flat__ = context__.vals_r("arch");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= s; ++sym1__) {
          stan::model::assign(arch, arch_flat__[(pos__ - 1)],
            "assigning variable arch", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0, 1, arch);
      Eigen::Matrix<local_scalar_t__,-1,1> garch =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(k, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> garch_flat__;
        current_statement__ = 7;
        garch_flat__ = context__.vals_r("garch");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          stan::model::assign(garch, garch_flat__[(pos__ - 1)],
            "assigning variable garch", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0, 1, garch);
      Eigen::Matrix<local_scalar_t__,-1,1> mgarch =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(h, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> mgarch_flat__;
        current_statement__ = 8;
        mgarch_flat__ = context__.vals_r("mgarch");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= h; ++sym1__) {
          stan::model::assign(mgarch, mgarch_flat__[(pos__ - 1)],
            "assigning variable mgarch", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(mgarch);
      Eigen::Matrix<local_scalar_t__,-1,1> v =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(v_1dim__, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> v_flat__;
        current_statement__ = 9;
        v_flat__ = context__.vals_r("v");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= v_1dim__; ++sym1__) {
          stan::model::assign(v, v_flat__[(pos__ - 1)],
            "assigning variable v", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(2.01, v);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> lambda_flat__;
        current_statement__ = 10;
        lambda_flat__ = context__.vals_r("lambda");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
          stan::model::assign(lambda, lambda_flat__[(pos__ - 1)],
            "assigning variable lambda", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(1, lambda);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(gamma_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> gamma_flat__;
        current_statement__ = 11;
        gamma_flat__ = context__.vals_r("gamma");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= gamma_1dim__; ++sym1__) {
          stan::model::assign(gamma, gamma_flat__[(pos__ - 1)],
            "assigning variable gamma", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, gamma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"mu0", "sigma0", "breg", "ar0", "ma0",
                "arch", "garch", "mgarch", "v", "lambda", "gamma"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"ar", "ma", "mu", "epsilon", "sigma"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"loglik", "log_lik", "fit", "residuals"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(d1)},
                std::vector<size_t>{static_cast<size_t>(p)},
                std::vector<size_t>{static_cast<size_t>(q)},
                std::vector<size_t>{static_cast<size_t>(s)},
                std::vector<size_t>{static_cast<size_t>(k)},
                std::vector<size_t>{static_cast<size_t>(h)},
                std::vector<size_t>{static_cast<size_t>(v_1dim__)},
                std::vector<size_t>{static_cast<size_t>(lambda_1dim__)},
                std::vector<size_t>{static_cast<size_t>(gamma_1dim__)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(p)},
             std::vector<size_t>{static_cast<size_t>(q)},
             std::vector<size_t>{static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(n)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(n)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "mu0");
    param_names__.emplace_back(std::string() + "sigma0");
    for (int sym1__ = 1; sym1__ <= d1; ++sym1__) {
      param_names__.emplace_back(std::string() + "breg" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      param_names__.emplace_back(std::string() + "ar0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
      param_names__.emplace_back(std::string() + "ma0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= s; ++sym1__) {
      param_names__.emplace_back(std::string() + "arch" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      param_names__.emplace_back(std::string() + "garch" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= h; ++sym1__) {
      param_names__.emplace_back(std::string() + "mgarch" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= v_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "v" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= gamma_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
        param_names__.emplace_back(std::string() + "ar" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
        param_names__.emplace_back(std::string() + "ma" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "epsilon" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "loglik");
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "fit" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "residuals" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "mu0");
    param_names__.emplace_back(std::string() + "sigma0");
    for (int sym1__ = 1; sym1__ <= d1; ++sym1__) {
      param_names__.emplace_back(std::string() + "breg" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      param_names__.emplace_back(std::string() + "ar0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
      param_names__.emplace_back(std::string() + "ma0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= s; ++sym1__) {
      param_names__.emplace_back(std::string() + "arch" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      param_names__.emplace_back(std::string() + "garch" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= h; ++sym1__) {
      param_names__.emplace_back(std::string() + "mgarch" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= v_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "v" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= gamma_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
        param_names__.emplace_back(std::string() + "ar" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
        param_names__.emplace_back(std::string() + "ma" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "epsilon" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "loglik");
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "fit" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "residuals" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"breg\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(d1) + "},\"block\":\"parameters\"},{\"name\":\"ar0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"ma0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"parameters\"},{\"name\":\"arch\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(s) + "},\"block\":\"parameters\"},{\"name\":\"garch\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"mgarch\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(h) + "},\"block\":\"parameters\"},{\"name\":\"v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(v_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lambda_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(gamma_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"ar\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"loglik\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"fit\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"residuals\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"breg\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(d1) + "},\"block\":\"parameters\"},{\"name\":\"ar0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"ma0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"parameters\"},{\"name\":\"arch\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(s) + "},\"block\":\"parameters\"},{\"name\":\"garch\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(k) + "},\"block\":\"parameters\"},{\"name\":\"mgarch\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(h) + "},\"block\":\"parameters\"},{\"name\":\"v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(v_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lambda_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(gamma_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"ar\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"loglik\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"fit\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"residuals\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((1 + 1) + d1) + p) + q) + s) + k) +
      h) + v_1dim__) + lambda_1dim__) + gamma_1dim__);
    const size_t num_transformed = emit_transformed_parameters * (((((p + q)
      + n) + n) + n));
    const size_t num_gen_quantities = emit_generated_quantities * ((((1 + n)
      + n) + n));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((1 + 1) + d1) + p) + q) + s) + k) +
      h) + v_1dim__) + lambda_1dim__) + gamma_1dim__);
    const size_t num_transformed = emit_transformed_parameters * (((((p + q)
      + n) + n) + n));
    const size_t num_gen_quantities = emit_generated_quantities * ((((1 + n)
      + n) + n));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_tgarch_namespace::model_tgarch;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_tgarch_namespace::profiles__;
}
#endif
#endif
