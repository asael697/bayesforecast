// Generated by rstantools.  Do not edit by hand.

/*
    Bforecast is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Bforecast is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Bforecast.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.36.0-91-ge511e97
#include <stan/model/model_header.hpp>
namespace model_ets_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 300> locations_array__ =
  {" (found before start of program)",
  " (in 'ets', line 38, column 2 to column 18)",
  " (in 'ets', line 39, column 2 to column 23)",
  " (in 'ets', line 40, column 2 to column 30)",
  " (in 'ets', line 41, column 2 to column 38)",
  " (in 'ets', line 42, column 2 to column 40)",
  " (in 'ets', line 43, column 2 to column 42)",
  " (in 'ets', line 44, column 2 to column 31)",
  " (in 'ets', line 45, column 2 to column 33)",
  " (in 'ets', line 47, column 2 to column 14)",
  " (in 'ets', line 48, column 2 to column 23)",
  " (in 'ets', line 49, column 2 to column 28)",
  " (in 'ets', line 52, column 2 to column 15)",
  " (in 'ets', line 53, column 2 to column 20)",
  " (in 'ets', line 54, column 2 to column 14)",
  " (in 'ets', line 55, column 2 to column 20)",
  " (in 'ets', line 56, column 2 to column 20)",
  " (in 'ets', line 57, column 2 to column 29)",
  " (in 'ets', line 210, column 2 to column 18)",
  " (in 'ets', line 211, column 2 to column 20)",
  " (in 'ets', line 212, column 2 to column 16)",
  " (in 'ets', line 213, column 2 to column 22)",
  " (in 'ets', line 60, column 7 to column 28)",
  " (in 'ets', line 59, column 13 to column 28)",
  " (in 'ets', line 59, column 2 to line 60, column 28)",
  " (in 'ets', line 62, column 2 to column 16)",
  " (in 'ets', line 62, column 16 to column 32)",
  " (in 'ets', line 63, column 2 to column 28)",
  " (in 'ets', line 64, column 17 to column 34)",
  " (in 'ets', line 64, column 2 to column 34)",
  " (in 'ets', line 65, column 31 to column 51)",
  " (in 'ets', line 65, column 17 to column 51)",
  " (in 'ets', line 65, column 2 to column 51)",
  " (in 'ets', line 67, column 16 to column 54)",
  " (in 'ets', line 67, column 2 to column 54)",
  " (in 'ets', line 71, column 4 to column 53)",
  " (in 'ets', line 72, column 28 to column 50)",
  " (in 'ets', line 72, column 4 to column 50)",
  " (in 'ets', line 73, column 4 to column 20)",
  " (in 'ets', line 77, column 21 to column 47)",
  " (in 'ets', line 77, column 6 to column 47)",
  " (in 'ets', line 78, column 6 to column 62)",
  " (in 'ets', line 79, column 6 to column 22)",
  " (in 'ets', line 75, column 18 to line 80, column 5)",
  " (in 'ets', line 75, column 4 to line 80, column 5)",
  " (in 'ets', line 84, column 9 to column 69)",
  " (in 'ets', line 85, column 25 to column 51)",
  " (in 'ets', line 85, column 9 to column 51)",
  " (in 'ets', line 86, column 9 to column 25)",
  " (in 'ets', line 83, column 16 to line 87, column 8)",
  " (in 'ets', line 83, column 7 to line 87, column 8)",
  " (in 'ets', line 82, column 19 to line 88, column 5)",
  " (in 'ets', line 82, column 4 to line 88, column 5)",
  " (in 'ets', line 90, column 4 to column 30)",
  " (in 'ets', line 69, column 16 to line 91, column 3)",
  " (in 'ets', line 69, column 2 to line 91, column 3)",
  " (in 'ets', line 221, column 6 to column 51)",
  " (in 'ets', line 222, column 6 to column 50)",
  " (in 'ets', line 223, column 6 to column 27)",
  " (in 'ets', line 220, column 8 to line 224, column 5)",
  " (in 'ets', line 216, column 6 to column 59)",
  " (in 'ets', line 217, column 5 to column 57)",
  " (in 'ets', line 218, column 5 to column 26)",
  " (in 'ets', line 215, column 17 to line 219, column 5)",
  " (in 'ets', line 215, column 4 to line 224, column 5)",
  " (in 'ets', line 214, column 15 to line 225, column 3)",
  " (in 'ets', line 214, column 2 to line 225, column 3)",
  " (in 'ets', line 226, column 2 to column 22)",
  " (in 'ets', line 107, column 30 to column 104)",
  " (in 'ets', line 107, column 7 to column 104)",
  " (in 'ets', line 106, column 30 to column 80)",
  " (in 'ets', line 106, column 7 to line 107, column 104)",
  " (in 'ets', line 105, column 30 to column 81)",
  " (in 'ets', line 105, column 7 to line 107, column 104)",
  " (in 'ets', line 104, column 30 to column 91)",
  " (in 'ets', line 104, column 7 to line 107, column 104)",
  " (in 'ets', line 103, column 30 to column 53)",
  " (in 'ets', line 103, column 7 to line 107, column 104)",
  " (in 'ets', line 102, column 30 to column 84)",
  " (in 'ets', line 102, column 7 to line 107, column 104)",
  " (in 'ets', line 101, column 30 to column 95)",
  " (in 'ets', line 101, column 7 to line 107, column 104)",
  " (in 'ets', line 100, column 30 to column 92)",
  " (in 'ets', line 100, column 7 to line 107, column 104)",
  " (in 'ets', line 99, column 30 to column 111)",
  " (in 'ets', line 99, column 7 to line 107, column 104)",
  " (in 'ets', line 98, column 30 to column 93)",
  " (in 'ets', line 98, column 7 to line 107, column 104)",
  " (in 'ets', line 97, column 30 to column 90)",
  " (in 'ets', line 97, column 7 to line 107, column 104)",
  " (in 'ets', line 96, column 30 to column 92)",
  " (in 'ets', line 96, column 2 to line 107, column 104)",
  " (in 'ets', line 122, column 34 to column 109)",
  " (in 'ets', line 122, column 11 to column 109)",
  " (in 'ets', line 121, column 34 to column 85)",
  " (in 'ets', line 121, column 11 to line 122, column 109)",
  " (in 'ets', line 120, column 34 to column 86)",
  " (in 'ets', line 120, column 11 to line 122, column 109)",
  " (in 'ets', line 119, column 34 to column 96)",
  " (in 'ets', line 119, column 11 to line 122, column 109)",
  " (in 'ets', line 118, column 34 to column 57)",
  " (in 'ets', line 118, column 11 to line 122, column 109)",
  " (in 'ets', line 117, column 34 to column 89)",
  " (in 'ets', line 117, column 11 to line 122, column 109)",
  " (in 'ets', line 116, column 34 to column 100)",
  " (in 'ets', line 116, column 11 to line 122, column 109)",
  " (in 'ets', line 115, column 34 to column 97)",
  " (in 'ets', line 115, column 11 to line 122, column 109)",
  " (in 'ets', line 114, column 34 to column 116)",
  " (in 'ets', line 114, column 11 to line 122, column 109)",
  " (in 'ets', line 113, column 34 to column 98)",
  " (in 'ets', line 113, column 11 to line 122, column 109)",
  " (in 'ets', line 112, column 34 to column 95)",
  " (in 'ets', line 112, column 11 to line 122, column 109)",
  " (in 'ets', line 111, column 34 to column 97)",
  " (in 'ets', line 111, column 6 to line 122, column 109)",
  " (in 'ets', line 110, column 18 to line 123, column 5)",
  " (in 'ets', line 110, column 4 to line 123, column 5)",
  " (in 'ets', line 109, column 12 to line 124, column 3)",
  " (in 'ets', line 109, column 2 to line 124, column 3)",
  " (in 'ets', line 128, column 29 to column 89)",
  " (in 'ets', line 128, column 7 to column 89)",
  " (in 'ets', line 127, column 29 to column 86)",
  " (in 'ets', line 127, column 7 to line 128, column 89)",
  " (in 'ets', line 126, column 26 to column 85)",
  " (in 'ets', line 126, column 2 to line 128, column 89)",
  " (in 'ets', line 141, column 30 to column 104)",
  " (in 'ets', line 141, column 7 to column 104)",
  " (in 'ets', line 140, column 30 to column 80)",
  " (in 'ets', line 140, column 7 to line 141, column 104)",
  " (in 'ets', line 139, column 30 to column 81)",
  " (in 'ets', line 139, column 7 to line 141, column 104)",
  " (in 'ets', line 138, column 30 to column 91)",
  " (in 'ets', line 138, column 7 to line 141, column 104)",
  " (in 'ets', line 137, column 30 to column 53)",
  " (in 'ets', line 137, column 7 to line 141, column 104)",
  " (in 'ets', line 136, column 30 to column 84)",
  " (in 'ets', line 136, column 7 to line 141, column 104)",
  " (in 'ets', line 135, column 30 to column 95)",
  " (in 'ets', line 135, column 7 to line 141, column 104)",
  " (in 'ets', line 134, column 30 to column 92)",
  " (in 'ets', line 134, column 7 to line 141, column 104)",
  " (in 'ets', line 133, column 30 to column 111)",
  " (in 'ets', line 133, column 7 to line 141, column 104)",
  " (in 'ets', line 132, column 30 to column 93)",
  " (in 'ets', line 132, column 7 to line 141, column 104)",
  " (in 'ets', line 131, column 30 to column 90)",
  " (in 'ets', line 131, column 7 to line 141, column 104)",
  " (in 'ets', line 130, column 30 to column 92)",
  " (in 'ets', line 130, column 2 to line 141, column 104)",
  " (in 'ets', line 146, column 31 to column 94)",
  " (in 'ets', line 146, column 9 to column 94)",
  " (in 'ets', line 145, column 31 to column 91)",
  " (in 'ets', line 145, column 9 to line 146, column 94)",
  " (in 'ets', line 144, column 28 to column 90)",
  " (in 'ets', line 144, column 4 to line 146, column 94)",
  " (in 'ets', line 159, column 32 to column 106)",
  " (in 'ets', line 159, column 9 to column 106)",
  " (in 'ets', line 158, column 32 to column 82)",
  " (in 'ets', line 158, column 9 to line 159, column 106)",
  " (in 'ets', line 157, column 32 to column 83)",
  " (in 'ets', line 157, column 9 to line 159, column 106)",
  " (in 'ets', line 156, column 32 to column 93)",
  " (in 'ets', line 156, column 9 to line 159, column 106)",
  " (in 'ets', line 155, column 32 to column 55)",
  " (in 'ets', line 155, column 9 to line 159, column 106)",
  " (in 'ets', line 154, column 32 to column 86)",
  " (in 'ets', line 154, column 9 to line 159, column 106)",
  " (in 'ets', line 153, column 32 to column 97)",
  " (in 'ets', line 153, column 9 to line 159, column 106)",
  " (in 'ets', line 152, column 32 to column 94)",
  " (in 'ets', line 152, column 9 to line 159, column 106)",
  " (in 'ets', line 151, column 32 to column 113)",
  " (in 'ets', line 151, column 9 to line 159, column 106)",
  " (in 'ets', line 150, column 32 to column 95)",
  " (in 'ets', line 150, column 9 to line 159, column 106)",
  " (in 'ets', line 149, column 32 to column 92)",
  " (in 'ets', line 149, column 9 to line 159, column 106)",
  " (in 'ets', line 148, column 32 to column 94)",
  " (in 'ets', line 148, column 4 to line 159, column 106)",
  " (in 'ets', line 143, column 16 to line 160, column 3)",
  " (in 'ets', line 143, column 2 to line 160, column 3)",
  " (in 'ets', line 165, column 32 to column 98)",
  " (in 'ets', line 165, column 9 to column 98)",
  " (in 'ets', line 164, column 32 to column 95)",
  " (in 'ets', line 164, column 9 to line 165, column 98)",
  " (in 'ets', line 163, column 29 to column 94)",
  " (in 'ets', line 163, column 4 to line 165, column 98)",
  " (in 'ets', line 162, column 17 to line 166, column 4)",
  " (in 'ets', line 162, column 3 to line 166, column 4)",
  " (in 'ets', line 171, column 34 to column 106)",
  " (in 'ets', line 171, column 9 to column 106)",
  " (in 'ets', line 170, column 34 to column 103)",
  " (in 'ets', line 170, column 9 to line 171, column 106)",
  " (in 'ets', line 169, column 31 to column 102)",
  " (in 'ets', line 169, column 4 to line 171, column 106)",
  " (in 'ets', line 184, column 35 to column 118)",
  " (in 'ets', line 184, column 9 to column 118)",
  " (in 'ets', line 183, column 35 to column 91)",
  " (in 'ets', line 183, column 9 to line 184, column 118)",
  " (in 'ets', line 182, column 35 to column 92)",
  " (in 'ets', line 182, column 9 to line 184, column 118)",
  " (in 'ets', line 181, column 35 to column 105)",
  " (in 'ets', line 181, column 9 to line 184, column 118)",
  " (in 'ets', line 180, column 35 to column 58)",
  " (in 'ets', line 180, column 9 to line 184, column 118)",
  " (in 'ets', line 179, column 35 to column 95)",
  " (in 'ets', line 179, column 9 to line 184, column 118)",
  " (in 'ets', line 178, column 35 to column 109)",
  " (in 'ets', line 178, column 9 to line 184, column 118)",
  " (in 'ets', line 177, column 35 to column 106)",
  " (in 'ets', line 177, column 9 to line 184, column 118)",
  " (in 'ets', line 176, column 35 to column 128)",
  " (in 'ets', line 176, column 9 to line 184, column 118)",
  " (in 'ets', line 175, column 35 to column 107)",
  " (in 'ets', line 175, column 9 to line 184, column 118)",
  " (in 'ets', line 174, column 35 to column 104)",
  " (in 'ets', line 174, column 9 to line 184, column 118)",
  " (in 'ets', line 173, column 35 to column 104)",
  " (in 'ets', line 173, column 4 to line 184, column 118)",
  " (in 'ets', line 168, column 17 to line 185, column 4)",
  " (in 'ets', line 168, column 3 to line 185, column 4)",
  " (in 'ets', line 207, column 4 to column 44)",
  " (in 'ets', line 200, column 29 to column 95)",
  " (in 'ets', line 200, column 9 to column 95)",
  " (in 'ets', line 199, column 29 to column 74)",
  " (in 'ets', line 199, column 9 to line 200, column 95)",
  " (in 'ets', line 198, column 29 to column 75)",
  " (in 'ets', line 198, column 9 to line 200, column 95)",
  " (in 'ets', line 197, column 29 to column 82)",
  " (in 'ets', line 197, column 9 to line 200, column 95)",
  " (in 'ets', line 196, column 29 to column 54)",
  " (in 'ets', line 196, column 9 to line 200, column 95)",
  " (in 'ets', line 195, column 29 to column 78)",
  " (in 'ets', line 195, column 9 to line 200, column 95)",
  " (in 'ets', line 194, column 29 to column 86)",
  " (in 'ets', line 194, column 9 to line 200, column 95)",
  " (in 'ets', line 193, column 29 to column 83)",
  " (in 'ets', line 193, column 9 to line 200, column 95)",
  " (in 'ets', line 192, column 29 to column 99)",
  " (in 'ets', line 192, column 9 to line 200, column 95)",
  " (in 'ets', line 191, column 29 to column 84)",
  " (in 'ets', line 191, column 9 to line 200, column 95)",
  " (in 'ets', line 190, column 29 to column 81)",
  " (in 'ets', line 190, column 9 to line 200, column 95)",
  " (in 'ets', line 189, column 26 to column 80)",
  " (in 'ets', line 189, column 4 to line 200, column 95)",
  " (in 'ets', line 202, column 4 to column 37)",
  " (in 'ets', line 203, column 4 to column 54)",
  " (in 'ets', line 204, column 4 to column 50)",
  " (in 'ets', line 187, column 15 to line 205, column 3)",
  " (in 'ets', line 187, column 2 to line 207, column 44)",
  " (in 'ets', line 10, column 2 to column 17)",
  " (in 'ets', line 11, column 2 to column 17)",
  " (in 'ets', line 12, column 9 to column 10)",
  " (in 'ets', line 12, column 11 to column 13)",
  " (in 'ets', line 12, column 2 to column 20)",
  " (in 'ets', line 13, column 2 to column 22)",
  " (in 'ets', line 14, column 9 to column 10)",
  " (in 'ets', line 14, column 2 to column 14)",
  " (in 'ets', line 16, column 2 to column 29)",
  " (in 'ets', line 17, column 2 to column 29)",
  " (in 'ets', line 18, column 2 to column 29)",
  " (in 'ets', line 19, column 2 to column 28)",
  " (in 'ets', line 21, column 2 to column 25)",
  " (in 'ets', line 22, column 2 to column 22)",
  " (in 'ets', line 23, column 2 to column 24)",
  " (in 'ets', line 24, column 2 to column 24)",
  " (in 'ets', line 25, column 2 to column 25)",
  " (in 'ets', line 26, column 2 to column 27)",
  " (in 'ets', line 27, column 9 to column 11)",
  " (in 'ets', line 27, column 2 to column 26)",
  " (in 'ets', line 29, column 2 to column 25)",
  " (in 'ets', line 30, column 2 to column 25)",
  " (in 'ets', line 31, column 2 to column 28)",
  " (in 'ets', line 34, column 2 to column 17)",
  " (in 'ets', line 35, column 17 to column 23)",
  " (in 'ets', line 35, column 2 to column 23)",
  " (in 'ets', line 38, column 9 to column 11)",
  " (in 'ets', line 41, column 26 to column 31)",
  " (in 'ets', line 42, column 26 to column 31)",
  " (in 'ets', line 43, column 26 to column 31)",
  " (in 'ets', line 44, column 21 to column 27)",
  " (in 'ets', line 45, column 18 to column 24)",
  " (in 'ets', line 48, column 9 to column 14)",
  " (in 'ets', line 49, column 9 to column 16)",
  " (in 'ets', line 52, column 9 to column 10)",
  " (in 'ets', line 53, column 9 to column 10)",
  " (in 'ets', line 54, column 9 to column 10)",
  " (in 'ets', line 55, column 9 to column 16)",
  " (in 'ets', line 56, column 9 to column 16)",
  " (in 'ets', line 57, column 18 to column 24)",
  " (in 'ets', line 211, column 9 to column 10)",
  " (in 'ets', line 212, column 9 to column 10)",
  " (in 'ets', line 213, column 9 to column 10)",
  " (in 'ets', line 3, column 4 to column 11)",
  " (in 'ets', line 4, column 4 to column 66)",
  " (in 'ets', line 5, column 4 to column 20)",
  " (in 'ets', line 6, column 4 to column 19)",
  " (in 'ets', line 2, column 18 to line 7, column 3)"};
template <typename T0__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>>* = nullptr>
stan::promote_args_t<T0__> Jpv(const T0__& v, std::ostream* pstream__);
// real Jpv(real)
template <typename T0__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>>*>
stan::promote_args_t<T0__> Jpv(const T0__& v, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ y = DUMMY_VAR__;
    current_statement__ = 296;
    y = ((stan::math::trigamma((v / 2)) -
      stan::math::trigamma(((v + 1) / 2))) - ((2 * (v + 3)) / ((v * (v + 1))
      * (v + 1))));
    current_statement__ = 297;
    y = ((v / (v + 3)) * y);
    current_statement__ = 298;
    return stan::math::sqrt(y);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_ets final : public model_base_crtp<model_ets> {
private:
  int n;
  int d1;
  Eigen::Matrix<double,-1,-1> xreg_data__;
  int period;
  Eigen::Matrix<double,-1,1> y_data__;
  int is_td;
  int is_dp;
  int is_ss;
  int genT;
  Eigen::Matrix<double,-1,1> prior_sigma0_data__;
  Eigen::Matrix<double,-1,1> prior_dfv_data__;
  Eigen::Matrix<double,-1,1> prior_level_data__;
  Eigen::Matrix<double,-1,1> prior_trend_data__;
  Eigen::Matrix<double,-1,1> prior_damped_data__;
  Eigen::Matrix<double,-1,1> prior_seasonal_data__;
  Eigen::Matrix<double,-1,-1> prior_breg_data__;
  Eigen::Matrix<double,-1,1> prior_level1_data__;
  Eigen::Matrix<double,-1,1> prior_trend1_data__;
  Eigen::Matrix<double,-1,1> prior_seasonal1_data__;
  int m;
  int v_1dim__;
  int lambda_1dim__;
  int seasonal1_1dim__;
  int b_1dim__;
  int s_1dim__;
  int v1_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> xreg{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_sigma0{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_dfv{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_level{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_trend{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_damped{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_seasonal{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> prior_breg{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_level1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_trend1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_seasonal1{nullptr, 0};
public:
  ~model_ets() {}
  model_ets(stan::io::var_context& context__, unsigned int random_seed__ = 0,
            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    auto base_rng__ = stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_ets_namespace::model_ets";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 252;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      current_statement__ = 252;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 252;
      stan::math::check_greater_or_equal(function__, "n", n, 0);
      current_statement__ = 253;
      context__.validate_dims("data initialization", "d1", "int",
        std::vector<size_t>{});
      d1 = std::numeric_limits<int>::min();
      current_statement__ = 253;
      d1 = context__.vals_i("d1")[(1 - 1)];
      current_statement__ = 253;
      stan::math::check_greater_or_equal(function__, "d1", d1, 0);
      current_statement__ = 254;
      stan::math::validate_non_negative_index("xreg", "n", n);
      current_statement__ = 255;
      stan::math::validate_non_negative_index("xreg", "d1", d1);
      current_statement__ = 256;
      context__.validate_dims("data initialization", "xreg", "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(d1)});
      xreg_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, d1,
                      std::numeric_limits<double>::quiet_NaN());
      new (&xreg) Eigen::Map<Eigen::Matrix<double,-1,-1>>(xreg_data__.data(),
        n, d1);
      {
        std::vector<local_scalar_t__> xreg_flat__;
        current_statement__ = 256;
        xreg_flat__ = context__.vals_r("xreg");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= d1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            stan::model::assign(xreg, xreg_flat__[(pos__ - 1)],
              "assigning variable xreg", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 257;
      context__.validate_dims("data initialization", "period", "int",
        std::vector<size_t>{});
      period = std::numeric_limits<int>::min();
      current_statement__ = 257;
      period = context__.vals_i("period")[(1 - 1)];
      current_statement__ = 257;
      stan::math::check_greater_or_equal(function__, "period", period, 0);
      current_statement__ = 258;
      stan::math::validate_non_negative_index("y", "n", n);
      current_statement__ = 259;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), n);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 259;
        y_flat__ = context__.vals_r("y");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 260;
      context__.validate_dims("data initialization", "is_td", "int",
        std::vector<size_t>{});
      is_td = std::numeric_limits<int>::min();
      current_statement__ = 260;
      is_td = context__.vals_i("is_td")[(1 - 1)];
      current_statement__ = 260;
      stan::math::check_greater_or_equal(function__, "is_td", is_td, 0);
      current_statement__ = 260;
      stan::math::check_less_or_equal(function__, "is_td", is_td, 1);
      current_statement__ = 261;
      context__.validate_dims("data initialization", "is_dp", "int",
        std::vector<size_t>{});
      is_dp = std::numeric_limits<int>::min();
      current_statement__ = 261;
      is_dp = context__.vals_i("is_dp")[(1 - 1)];
      current_statement__ = 261;
      stan::math::check_greater_or_equal(function__, "is_dp", is_dp, 0);
      current_statement__ = 261;
      stan::math::check_less_or_equal(function__, "is_dp", is_dp, 1);
      current_statement__ = 262;
      context__.validate_dims("data initialization", "is_ss", "int",
        std::vector<size_t>{});
      is_ss = std::numeric_limits<int>::min();
      current_statement__ = 262;
      is_ss = context__.vals_i("is_ss")[(1 - 1)];
      current_statement__ = 262;
      stan::math::check_greater_or_equal(function__, "is_ss", is_ss, 0);
      current_statement__ = 262;
      stan::math::check_less_or_equal(function__, "is_ss", is_ss, 1);
      current_statement__ = 263;
      context__.validate_dims("data initialization", "genT", "int",
        std::vector<size_t>{});
      genT = std::numeric_limits<int>::min();
      current_statement__ = 263;
      genT = context__.vals_i("genT")[(1 - 1)];
      current_statement__ = 263;
      stan::math::check_greater_or_equal(function__, "genT", genT, 0);
      current_statement__ = 263;
      stan::math::check_less_or_equal(function__, "genT", genT, 1);
      current_statement__ = 264;
      context__.validate_dims("data initialization", "prior_sigma0",
        "double", std::vector<size_t>{static_cast<size_t>(4)});
      prior_sigma0_data__ = Eigen::Matrix<double,-1,1>::Constant(4,
                              std::numeric_limits<double>::quiet_NaN());
      new (&prior_sigma0)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_sigma0_data__.data(), 4);
      {
        std::vector<local_scalar_t__> prior_sigma0_flat__;
        current_statement__ = 264;
        prior_sigma0_flat__ = context__.vals_r("prior_sigma0");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          stan::model::assign(prior_sigma0, prior_sigma0_flat__[(pos__ - 1)],
            "assigning variable prior_sigma0", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 265;
      context__.validate_dims("data initialization", "prior_dfv", "double",
        std::vector<size_t>{static_cast<size_t>(4)});
      prior_dfv_data__ = Eigen::Matrix<double,-1,1>::Constant(4,
                           std::numeric_limits<double>::quiet_NaN());
      new (&prior_dfv)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_dfv_data__.data(), 4);
      {
        std::vector<local_scalar_t__> prior_dfv_flat__;
        current_statement__ = 265;
        prior_dfv_flat__ = context__.vals_r("prior_dfv");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          stan::model::assign(prior_dfv, prior_dfv_flat__[(pos__ - 1)],
            "assigning variable prior_dfv", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 266;
      context__.validate_dims("data initialization", "prior_level", "double",
        std::vector<size_t>{static_cast<size_t>(4)});
      prior_level_data__ = Eigen::Matrix<double,-1,1>::Constant(4,
                             std::numeric_limits<double>::quiet_NaN());
      new (&prior_level)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_level_data__.data(), 4);
      {
        std::vector<local_scalar_t__> prior_level_flat__;
        current_statement__ = 266;
        prior_level_flat__ = context__.vals_r("prior_level");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          stan::model::assign(prior_level, prior_level_flat__[(pos__ - 1)],
            "assigning variable prior_level", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 267;
      context__.validate_dims("data initialization", "prior_trend", "double",
        std::vector<size_t>{static_cast<size_t>(4)});
      prior_trend_data__ = Eigen::Matrix<double,-1,1>::Constant(4,
                             std::numeric_limits<double>::quiet_NaN());
      new (&prior_trend)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_trend_data__.data(), 4);
      {
        std::vector<local_scalar_t__> prior_trend_flat__;
        current_statement__ = 267;
        prior_trend_flat__ = context__.vals_r("prior_trend");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          stan::model::assign(prior_trend, prior_trend_flat__[(pos__ - 1)],
            "assigning variable prior_trend", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 268;
      context__.validate_dims("data initialization", "prior_damped",
        "double", std::vector<size_t>{static_cast<size_t>(4)});
      prior_damped_data__ = Eigen::Matrix<double,-1,1>::Constant(4,
                              std::numeric_limits<double>::quiet_NaN());
      new (&prior_damped)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_damped_data__.data(), 4);
      {
        std::vector<local_scalar_t__> prior_damped_flat__;
        current_statement__ = 268;
        prior_damped_flat__ = context__.vals_r("prior_damped");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          stan::model::assign(prior_damped, prior_damped_flat__[(pos__ - 1)],
            "assigning variable prior_damped", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 269;
      context__.validate_dims("data initialization", "prior_seasonal",
        "double", std::vector<size_t>{static_cast<size_t>(4)});
      prior_seasonal_data__ = Eigen::Matrix<double,-1,1>::Constant(4,
                                std::numeric_limits<double>::quiet_NaN());
      new (&prior_seasonal)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_seasonal_data__.data(),
        4);
      {
        std::vector<local_scalar_t__> prior_seasonal_flat__;
        current_statement__ = 269;
        prior_seasonal_flat__ = context__.vals_r("prior_seasonal");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          stan::model::assign(prior_seasonal, prior_seasonal_flat__[(pos__ -
            1)], "assigning variable prior_seasonal",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 270;
      stan::math::validate_non_negative_index("prior_breg", "d1", d1);
      current_statement__ = 271;
      context__.validate_dims("data initialization", "prior_breg", "double",
        std::vector<size_t>{static_cast<size_t>(d1), static_cast<size_t>(4)});
      prior_breg_data__ = Eigen::Matrix<double,-1,-1>::Constant(d1, 4,
                            std::numeric_limits<double>::quiet_NaN());
      new (&prior_breg)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(prior_breg_data__.data(), d1,
        4);
      {
        std::vector<local_scalar_t__> prior_breg_flat__;
        current_statement__ = 271;
        prior_breg_flat__ = context__.vals_r("prior_breg");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= d1; ++sym2__) {
            stan::model::assign(prior_breg, prior_breg_flat__[(pos__ - 1)],
              "assigning variable prior_breg",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 272;
      context__.validate_dims("data initialization", "prior_level1",
        "double", std::vector<size_t>{static_cast<size_t>(4)});
      prior_level1_data__ = Eigen::Matrix<double,-1,1>::Constant(4,
                              std::numeric_limits<double>::quiet_NaN());
      new (&prior_level1)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_level1_data__.data(), 4);
      {
        std::vector<local_scalar_t__> prior_level1_flat__;
        current_statement__ = 272;
        prior_level1_flat__ = context__.vals_r("prior_level1");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          stan::model::assign(prior_level1, prior_level1_flat__[(pos__ - 1)],
            "assigning variable prior_level1", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 273;
      context__.validate_dims("data initialization", "prior_trend1",
        "double", std::vector<size_t>{static_cast<size_t>(4)});
      prior_trend1_data__ = Eigen::Matrix<double,-1,1>::Constant(4,
                              std::numeric_limits<double>::quiet_NaN());
      new (&prior_trend1)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_trend1_data__.data(), 4);
      {
        std::vector<local_scalar_t__> prior_trend1_flat__;
        current_statement__ = 273;
        prior_trend1_flat__ = context__.vals_r("prior_trend1");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          stan::model::assign(prior_trend1, prior_trend1_flat__[(pos__ - 1)],
            "assigning variable prior_trend1", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 274;
      context__.validate_dims("data initialization", "prior_seasonal1",
        "double", std::vector<size_t>{static_cast<size_t>(4)});
      prior_seasonal1_data__ = Eigen::Matrix<double,-1,1>::Constant(4,
                                 std::numeric_limits<double>::quiet_NaN());
      new (&prior_seasonal1)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_seasonal1_data__.data(),
        4);
      {
        std::vector<local_scalar_t__> prior_seasonal1_flat__;
        current_statement__ = 274;
        prior_seasonal1_flat__ = context__.vals_r("prior_seasonal1");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          stan::model::assign(prior_seasonal1, prior_seasonal1_flat__[(pos__
            - 1)], "assigning variable prior_seasonal1",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 275;
      m = std::numeric_limits<int>::min();
      current_statement__ = 275;
      m = period;
      current_statement__ = 277;
      if (stan::math::logical_eq(is_ss, 0)) {
        current_statement__ = 276;
        m = 1;
      }
      current_statement__ = 278;
      stan::math::validate_non_negative_index("breg", "d1", d1);
      current_statement__ = 279;
      stan::math::validate_non_negative_index("trend", "is_td", is_td);
      current_statement__ = 280;
      stan::math::validate_non_negative_index("damped", "is_dp", is_dp);
      current_statement__ = 281;
      stan::math::validate_non_negative_index("seasonal", "is_ss", is_ss);
      current_statement__ = 282;
      v_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 282;
      v_1dim__ = (genT * 1);
      current_statement__ = 282;
      stan::math::validate_non_negative_index("v", "genT * 1", v_1dim__);
      current_statement__ = 283;
      lambda_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 283;
      lambda_1dim__ = (genT * 1);
      current_statement__ = 283;
      stan::math::validate_non_negative_index("lambda", "genT * 1",
        lambda_1dim__);
      current_statement__ = 284;
      stan::math::validate_non_negative_index("trend1", "is_td", is_td);
      current_statement__ = 285;
      seasonal1_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 285;
      seasonal1_1dim__ = (m * is_ss);
      current_statement__ = 285;
      stan::math::validate_non_negative_index("seasonal1", "m * is_ss",
        seasonal1_1dim__);
      current_statement__ = 286;
      stan::math::validate_non_negative_index("mu", "n", n);
      current_statement__ = 287;
      stan::math::validate_non_negative_index("epsilon", "n", n);
      current_statement__ = 288;
      stan::math::validate_non_negative_index("l", "n", n);
      current_statement__ = 289;
      b_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 289;
      b_1dim__ = (is_td * n);
      current_statement__ = 289;
      stan::math::validate_non_negative_index("b", "is_td * n", b_1dim__);
      current_statement__ = 290;
      s_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 290;
      s_1dim__ = (is_ss * n);
      current_statement__ = 290;
      stan::math::validate_non_negative_index("s", "is_ss * n", s_1dim__);
      current_statement__ = 291;
      v1_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 291;
      v1_1dim__ = (genT * 1);
      current_statement__ = 291;
      stan::math::validate_non_negative_index("v1", "genT * 1", v1_1dim__);
      current_statement__ = 292;
      stan::math::validate_non_negative_index("log_lik", "n", n);
      current_statement__ = 293;
      stan::math::validate_non_negative_index("fit", "n", n);
      current_statement__ = 294;
      stan::math::validate_non_negative_index("residuals", "n", n);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = d1 + 1 + 1 + is_td + is_dp + is_ss + v_1dim__ +
      lambda_1dim__ + 1 + is_td + seasonal1_1dim__;
  }
  inline std::string model_name() const final {
    return "model_ets";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.36.0-91-ge511e97",
             "stancflags = --allow-undefined"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ = "model_ets_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto breg =
        in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(d1);
      current_statement__ = 2;
      auto sigma0 =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 3;
      auto level =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 4;
      auto trend =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__,
          is_td);
      current_statement__ = 5;
      auto damped =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__,
          is_dp);
      current_statement__ = 6;
      auto seasonal =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__,
          is_ss);
      current_statement__ = 7;
      auto v =
        in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__,-1,1>,
          jacobian__>(2.01, lp__, v_1dim__);
      current_statement__ = 8;
      auto lambda =
        in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__,-1,1>,
          jacobian__>(1, lp__, lambda_1dim__);
      current_statement__ = 9;
      auto level1 = in__.template read<local_scalar_t__>();
      current_statement__ = 10;
      auto trend1 =
        in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(is_td);
      current_statement__ = 11;
      auto seasonal1 =
        in__.template read<
          Eigen::Matrix<local_scalar_t__,-1,1>>(seasonal1_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> epsilon =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> l =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(b_1dim__, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> s =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(s_1dim__, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> v1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(v1_1dim__,
          DUMMY_VAR__);
      current_statement__ = 24;
      if (stan::math::logical_gt(d1, 0)) {
        current_statement__ = 23;
        stan::model::assign(mu, stan::math::multiply(xreg, breg),
          "assigning variable mu");
      } else {
        current_statement__ = 22;
        stan::model::assign(mu, stan::math::rep_vector(0, n),
          "assigning variable mu");
      }
      current_statement__ = 25;
      stan::model::assign(l, level1, "assigning variable l",
        stan::model::index_uni(1));
      current_statement__ = 26;
      stan::model::assign(mu,
        (stan::model::rvalue(mu, "mu", stan::model::index_uni(1)) + level1),
        "assigning variable mu", stan::model::index_uni(1));
      current_statement__ = 27;
      stan::model::assign(epsilon,
        (stan::model::rvalue(y, "y", stan::model::index_uni(1)) -
        stan::model::rvalue(mu, "mu", stan::model::index_uni(1))),
        "assigning variable epsilon", stan::model::index_uni(1));
      current_statement__ = 29;
      if (stan::math::logical_eq(is_td, 1)) {
        current_statement__ = 28;
        stan::model::assign(b,
          stan::model::rvalue(trend1, "trend1", stan::model::index_uni(1)),
          "assigning variable b", stan::model::index_uni(1));
      }
      current_statement__ = 32;
      if (stan::math::logical_eq(is_ss, 1)) {
        current_statement__ = 31;
        for (int i = 1; i <= m; ++i) {
          current_statement__ = 30;
          stan::model::assign(s,
            stan::model::rvalue(seasonal1, "seasonal1",
              stan::model::index_uni(i)), "assigning variable s",
            stan::model::index_uni(i));
        }
      }
      current_statement__ = 34;
      if (stan::math::logical_eq(genT, 1)) {
        current_statement__ = 33;
        stan::model::assign(v1,
          stan::math::sqrt(
            (((stan::model::rvalue(v, "v", stan::model::index_uni(1)) - 2) *
            stan::model::rvalue(lambda, "lambda", stan::model::index_uni(1)))
            / stan::model::rvalue(v, "v", stan::model::index_uni(1)))),
          "assigning variable v1", stan::model::index_uni(1));
      }
      current_statement__ = 55;
      for (int i = 2; i <= n; ++i) {
        current_statement__ = 35;
        stan::model::assign(l, ((level *
          (stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
          stan::model::rvalue(mu, "mu", stan::model::index_uni(i)))) + ((1 -
          level) *
          stan::model::rvalue(l, "l", stan::model::index_uni((i - 1))))),
          "assigning variable l", stan::model::index_uni(i));
        current_statement__ = 37;
        if ((stan::math::primitive_value(stan::math::logical_eq(is_ss, 1)) &&
            stan::math::primitive_value(stan::math::logical_gt(i, m)))) {
          current_statement__ = 36;
          stan::model::assign(l,
            (stan::model::rvalue(l, "l", stan::model::index_uni(i)) +
            (-(level) *
            stan::model::rvalue(s, "s", stan::model::index_uni((i - m))))),
            "assigning variable l", stan::model::index_uni(i));
        }
        current_statement__ = 38;
        stan::model::assign(mu,
          (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
          stan::model::rvalue(l, "l", stan::model::index_uni((i - 1)))),
          "assigning variable mu", stan::model::index_uni(i));
        current_statement__ = 44;
        if (stan::math::logical_eq(is_td, 1)) {
          current_statement__ = 40;
          if (stan::math::logical_eq(is_dp, 1)) {
            current_statement__ = 39;
            stan::model::assign(b,
              (stan::model::rvalue(damped, "damped",
                 stan::model::index_uni(1)) *
              stan::model::rvalue(b, "b", stan::model::index_uni((i - 1)))),
              "assigning variable b", stan::model::index_uni((i - 1)));
          }
          current_statement__ = 41;
          stan::model::assign(b,
            ((stan::model::rvalue(trend, "trend", stan::model::index_uni(1))
            * (stan::model::rvalue(l, "l", stan::model::index_uni(i)) -
            stan::model::rvalue(l, "l", stan::model::index_uni((i - 1))))) +
            ((1 -
            stan::model::rvalue(trend, "trend", stan::model::index_uni(1))) *
            stan::model::rvalue(b, "b", stan::model::index_uni((i - 1))))),
            "assigning variable b", stan::model::index_uni(i));
          current_statement__ = 42;
          stan::model::assign(mu,
            (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
            stan::model::rvalue(b, "b", stan::model::index_uni((i - 1)))),
            "assigning variable mu", stan::model::index_uni(i));
        }
        current_statement__ = 52;
        if (stan::math::logical_eq(is_ss, 1)) {
          current_statement__ = 50;
          if (stan::math::logical_gt(i, m)) {
            current_statement__ = 45;
            stan::model::assign(s,
              ((stan::model::rvalue(seasonal, "seasonal",
                  stan::model::index_uni(1)) *
              (stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
              stan::model::rvalue(l, "l", stan::model::index_uni(i)))) + ((1
              -
              stan::model::rvalue(seasonal, "seasonal",
                stan::model::index_uni(1))) *
              stan::model::rvalue(s, "s", stan::model::index_uni((i - m))))),
              "assigning variable s", stan::model::index_uni(i));
            current_statement__ = 47;
            if (stan::math::logical_eq(is_td, 1)) {
              current_statement__ = 46;
              stan::model::assign(s,
                (stan::model::rvalue(s, "s", stan::model::index_uni(i)) +
                (-(stan::model::rvalue(seasonal, "seasonal",
                     stan::model::index_uni(1))) *
                stan::model::rvalue(b, "b", stan::model::index_uni(i)))),
                "assigning variable s", stan::model::index_uni(i));
            }
            current_statement__ = 48;
            stan::model::assign(mu,
              (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
              stan::model::rvalue(s, "s", stan::model::index_uni((i - m)))),
              "assigning variable mu", stan::model::index_uni(i));
          }
        }
        current_statement__ = 53;
        stan::model::assign(epsilon,
          (stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
          stan::model::rvalue(mu, "mu", stan::model::index_uni(i))),
          "assigning variable epsilon", stan::model::index_uni(i));
      }
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "v1", v1, 1);
      {
        current_statement__ = 91;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_sigma0, "prior_sigma0",
                stan::model::index_uni(4)), 1)) {
          current_statement__ = 90;
          lp_accum__.add(stan::math::normal_lpdf<false>(sigma0,
                           stan::model::rvalue(prior_sigma0, "prior_sigma0",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(prior_sigma0, "prior_sigma0",
                             stan::model::index_uni(2))));
        } else {
          current_statement__ = 89;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_sigma0, "prior_sigma0",
                  stan::model::index_uni(4)), 2)) {
            current_statement__ = 88;
            lp_accum__.add(stan::math::beta_lpdf<false>(sigma0,
                             stan::model::rvalue(prior_sigma0,
                               "prior_sigma0", stan::model::index_uni(1)),
                             stan::model::rvalue(prior_sigma0,
                               "prior_sigma0", stan::model::index_uni(2))));
          } else {
            current_statement__ = 87;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_sigma0, "prior_sigma0",
                    stan::model::index_uni(4)), 3)) {
              current_statement__ = 86;
              lp_accum__.add(stan::math::uniform_lpdf<false>(sigma0,
                               stan::model::rvalue(prior_sigma0,
                                 "prior_sigma0", stan::model::index_uni(1)),
                               stan::model::rvalue(prior_sigma0,
                                 "prior_sigma0", stan::model::index_uni(2))));
            } else {
              current_statement__ = 85;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_sigma0, "prior_sigma0",
                      stan::model::index_uni(4)), 4)) {
                current_statement__ = 84;
                lp_accum__.add(stan::math::student_t_lpdf<false>(sigma0,
                                 stan::model::rvalue(prior_sigma0,
                                   "prior_sigma0", stan::model::index_uni(3)),
                                 stan::model::rvalue(prior_sigma0,
                                   "prior_sigma0", stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_sigma0,
                                   "prior_sigma0", stan::model::index_uni(2))));
              } else {
                current_statement__ = 83;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_sigma0, "prior_sigma0",
                        stan::model::index_uni(4)), 5)) {
                  current_statement__ = 82;
                  lp_accum__.add(stan::math::cauchy_lpdf<false>(sigma0,
                                   stan::model::rvalue(prior_sigma0,
                                     "prior_sigma0",
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_sigma0,
                                     "prior_sigma0",
                                     stan::model::index_uni(2))));
                } else {
                  current_statement__ = 81;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_sigma0, "prior_sigma0",
                          stan::model::index_uni(4)), 6)) {
                    current_statement__ = 80;
                    lp_accum__.add(stan::math::inv_gamma_lpdf<false>(sigma0,
                                     stan::model::rvalue(prior_sigma0,
                                       "prior_sigma0",
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_sigma0,
                                       "prior_sigma0",
                                       stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 79;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_sigma0, "prior_sigma0",
                            stan::model::index_uni(4)), 7)) {
                      current_statement__ = 78;
                      lp_accum__.add(stan::math::inv_chi_square_lpdf<false>(
                                       sigma0,
                                       stan::model::rvalue(prior_sigma0,
                                         "prior_sigma0",
                                         stan::model::index_uni(3))));
                    } else {
                      current_statement__ = 77;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_sigma0, "prior_sigma0",
                              stan::model::index_uni(4)), 8)) {
                        current_statement__ = 76;
                        lp_accum__.add(-(stan::math::log(sigma0)));
                      } else {
                        current_statement__ = 75;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_sigma0,
                                "prior_sigma0", stan::model::index_uni(4)), 9)) {
                          current_statement__ = 74;
                          lp_accum__.add(stan::math::gamma_lpdf<false>(
                                           sigma0,
                                           stan::model::rvalue(prior_sigma0,
                                             "prior_sigma0",
                                             stan::model::index_uni(1)),
                                           stan::model::rvalue(prior_sigma0,
                                             "prior_sigma0",
                                             stan::model::index_uni(2))));
                        } else {
                          current_statement__ = 73;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_sigma0,
                                  "prior_sigma0", stan::model::index_uni(4)),
                                10)) {
                            current_statement__ = 72;
                            lp_accum__.add(stan::math::exponential_lpdf<
                                             false>(sigma0,
                                             stan::model::rvalue(
                                               prior_sigma0, "prior_sigma0",
                                               stan::model::index_uni(2))));
                          } else {
                            current_statement__ = 71;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_sigma0,
                                    "prior_sigma0", stan::model::index_uni(4)),
                                  11)) {
                              current_statement__ = 70;
                              lp_accum__.add(stan::math::chi_square_lpdf<
                                               false>(sigma0,
                                               stan::model::rvalue(
                                                 prior_sigma0,
                                                 "prior_sigma0",
                                                 stan::model::index_uni(3))));
                            } else {
                              current_statement__ = 69;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_sigma0,
                                      "prior_sigma0",
                                      stan::model::index_uni(4)), 12)) {
                                current_statement__ = 68;
                                lp_accum__.add(stan::math::double_exponential_lpdf<
                                                 false>(sigma0,
                                                 stan::model::rvalue(
                                                   prior_sigma0,
                                                   "prior_sigma0",
                                                   stan::model::index_uni(1)),
                                                 stan::model::rvalue(
                                                   prior_sigma0,
                                                   "prior_sigma0",
                                                   stan::model::index_uni(2))));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 119;
        if (stan::math::logical_gt(d1, 0)) {
          current_statement__ = 117;
          for (int i = 1; i <= d1; ++i) {
            current_statement__ = 115;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_breg, "prior_breg",
                    stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
              current_statement__ = 114;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(breg, "breg",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(prior_breg, "prior_breg",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_breg, "prior_breg",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 113;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_breg, "prior_breg",
                      stan::model::index_uni(i), stan::model::index_uni(4)),
                    2)) {
                current_statement__ = 112;
                lp_accum__.add(stan::math::beta_lpdf<false>(
                                 stan::model::rvalue(breg, "breg",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(prior_breg,
                                   "prior_breg", stan::model::index_uni(i),
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_breg,
                                   "prior_breg", stan::model::index_uni(i),
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 111;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_breg, "prior_breg",
                        stan::model::index_uni(i), stan::model::index_uni(4)),
                      3)) {
                  current_statement__ = 110;
                  lp_accum__.add(stan::math::uniform_lpdf<false>(
                                   stan::model::rvalue(breg, "breg",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(prior_breg,
                                     "prior_breg", stan::model::index_uni(i),
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_breg,
                                     "prior_breg", stan::model::index_uni(i),
                                     stan::model::index_uni(2))));
                } else {
                  current_statement__ = 109;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_breg, "prior_breg",
                          stan::model::index_uni(i),
                          stan::model::index_uni(4)), 4)) {
                    current_statement__ = 108;
                    lp_accum__.add(stan::math::student_t_lpdf<false>(
                                     stan::model::rvalue(breg, "breg",
                                       stan::model::index_uni(i)),
                                     stan::model::rvalue(prior_breg,
                                       "prior_breg",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(3)),
                                     stan::model::rvalue(prior_breg,
                                       "prior_breg",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_breg,
                                       "prior_breg",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 107;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_breg, "prior_breg",
                            stan::model::index_uni(i),
                            stan::model::index_uni(4)), 5)) {
                      current_statement__ = 106;
                      lp_accum__.add(stan::math::cauchy_lpdf<false>(
                                       stan::model::rvalue(breg, "breg",
                                         stan::model::index_uni(i)),
                                       stan::model::rvalue(prior_breg,
                                         "prior_breg",
                                         stan::model::index_uni(i),
                                         stan::model::index_uni(1)),
                                       stan::model::rvalue(prior_breg,
                                         "prior_breg",
                                         stan::model::index_uni(i),
                                         stan::model::index_uni(2))));
                    } else {
                      current_statement__ = 105;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_breg, "prior_breg",
                              stan::model::index_uni(i),
                              stan::model::index_uni(4)), 6)) {
                        current_statement__ = 104;
                        lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                                         stan::model::rvalue(breg, "breg",
                                           stan::model::index_uni(i)),
                                         stan::model::rvalue(prior_breg,
                                           "prior_breg",
                                           stan::model::index_uni(i),
                                           stan::model::index_uni(1)),
                                         stan::model::rvalue(prior_breg,
                                           "prior_breg",
                                           stan::model::index_uni(i),
                                           stan::model::index_uni(2))));
                      } else {
                        current_statement__ = 103;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_breg, "prior_breg",
                                stan::model::index_uni(i),
                                stan::model::index_uni(4)), 7)) {
                          current_statement__ = 102;
                          lp_accum__.add(stan::math::inv_chi_square_lpdf<
                                           false>(
                                           stan::model::rvalue(breg, "breg",
                                             stan::model::index_uni(i)),
                                           stan::model::rvalue(prior_breg,
                                             "prior_breg",
                                             stan::model::index_uni(i),
                                             stan::model::index_uni(3))));
                        } else {
                          current_statement__ = 101;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_breg, "prior_breg",
                                  stan::model::index_uni(i),
                                  stan::model::index_uni(4)), 8)) {
                            current_statement__ = 100;
                            lp_accum__.add(-(stan::math::log(sigma0)));
                          } else {
                            current_statement__ = 99;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_breg,
                                    "prior_breg", stan::model::index_uni(i),
                                    stan::model::index_uni(4)), 9)) {
                              current_statement__ = 98;
                              lp_accum__.add(stan::math::gamma_lpdf<false>(
                                               stan::model::rvalue(breg,
                                                 "breg",
                                                 stan::model::index_uni(i)),
                                               stan::model::rvalue(
                                                 prior_breg, "prior_breg",
                                                 stan::model::index_uni(i),
                                                 stan::model::index_uni(1)),
                                               stan::model::rvalue(
                                                 prior_breg, "prior_breg",
                                                 stan::model::index_uni(i),
                                                 stan::model::index_uni(2))));
                            } else {
                              current_statement__ = 97;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_breg,
                                      "prior_breg",
                                      stan::model::index_uni(i),
                                      stan::model::index_uni(4)), 10)) {
                                current_statement__ = 96;
                                lp_accum__.add(stan::math::exponential_lpdf<
                                                 false>(
                                                 stan::model::rvalue(breg,
                                                   "breg",
                                                   stan::model::index_uni(i)),
                                                 stan::model::rvalue(
                                                   prior_breg, "prior_breg",
                                                   stan::model::index_uni(i),
                                                   stan::model::index_uni(2))));
                              } else {
                                current_statement__ = 95;
                                if (stan::math::logical_eq(
                                      stan::model::rvalue(prior_breg,
                                        "prior_breg",
                                        stan::model::index_uni(i),
                                        stan::model::index_uni(4)), 11)) {
                                  current_statement__ = 94;
                                  lp_accum__.add(stan::math::chi_square_lpdf<
                                                   false>(
                                                   stan::model::rvalue(breg,
                                                     "breg",
                                                     stan::model::index_uni(i)),
                                                   stan::model::rvalue(
                                                     prior_breg,
                                                     "prior_breg",
                                                     stan::model::index_uni(i),
                                                     stan::model::index_uni(3))));
                                } else {
                                  current_statement__ = 93;
                                  if (stan::math::logical_eq(
                                        stan::model::rvalue(prior_breg,
                                          "prior_breg",
                                          stan::model::index_uni(i),
                                          stan::model::index_uni(4)), 12)) {
                                    current_statement__ = 92;
                                    lp_accum__.add(stan::math::double_exponential_lpdf<
                                                     false>(
                                                     stan::model::rvalue(
                                                       breg, "breg",
                                                       stan::model::index_uni(
                                                         i)),
                                                     stan::model::rvalue(
                                                       prior_breg,
                                                       "prior_breg",
                                                       stan::model::index_uni(
                                                         i),
                                                       stan::model::index_uni(
                                                         1)),
                                                     stan::model::rvalue(
                                                       prior_breg,
                                                       "prior_breg",
                                                       stan::model::index_uni(
                                                         i),
                                                       stan::model::index_uni(
                                                         2))));
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 125;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_level, "prior_level",
                stan::model::index_uni(4)), 1)) {
          current_statement__ = 124;
          lp_accum__.add(stan::math::normal_lpdf<false>(level,
                           stan::model::rvalue(prior_level, "prior_level",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(prior_level, "prior_level",
                             stan::model::index_uni(2))));
        } else {
          current_statement__ = 123;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_level, "prior_level",
                  stan::model::index_uni(4)), 2)) {
            current_statement__ = 122;
            lp_accum__.add(stan::math::beta_lpdf<false>(level,
                             stan::model::rvalue(prior_level, "prior_level",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_level, "prior_level",
                               stan::model::index_uni(2))));
          } else {
            current_statement__ = 121;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_level, "prior_level",
                    stan::model::index_uni(4)), 3)) {
              current_statement__ = 120;
              lp_accum__.add(stan::math::uniform_lpdf<false>(level,
                               stan::model::rvalue(prior_level,
                                 "prior_level", stan::model::index_uni(1)),
                               stan::model::rvalue(prior_level,
                                 "prior_level", stan::model::index_uni(2))));
            }
          }
        }
        current_statement__ = 149;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_level1, "prior_level1",
                stan::model::index_uni(4)), 1)) {
          current_statement__ = 148;
          lp_accum__.add(stan::math::normal_lpdf<false>(level1,
                           stan::model::rvalue(prior_level1, "prior_level1",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(prior_level1, "prior_level1",
                             stan::model::index_uni(2))));
        } else {
          current_statement__ = 147;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_level1, "prior_level1",
                  stan::model::index_uni(4)), 2)) {
            current_statement__ = 146;
            lp_accum__.add(stan::math::beta_lpdf<false>(level1,
                             stan::model::rvalue(prior_level1,
                               "prior_level1", stan::model::index_uni(1)),
                             stan::model::rvalue(prior_level1,
                               "prior_level1", stan::model::index_uni(2))));
          } else {
            current_statement__ = 145;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_level1, "prior_level1",
                    stan::model::index_uni(4)), 3)) {
              current_statement__ = 144;
              lp_accum__.add(stan::math::uniform_lpdf<false>(level1,
                               stan::model::rvalue(prior_level1,
                                 "prior_level1", stan::model::index_uni(1)),
                               stan::model::rvalue(prior_level1,
                                 "prior_level1", stan::model::index_uni(2))));
            } else {
              current_statement__ = 143;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_level1, "prior_level1",
                      stan::model::index_uni(4)), 4)) {
                current_statement__ = 142;
                lp_accum__.add(stan::math::student_t_lpdf<false>(level1,
                                 stan::model::rvalue(prior_level1,
                                   "prior_level1", stan::model::index_uni(3)),
                                 stan::model::rvalue(prior_level1,
                                   "prior_level1", stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_level1,
                                   "prior_level1", stan::model::index_uni(2))));
              } else {
                current_statement__ = 141;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_level1, "prior_level1",
                        stan::model::index_uni(4)), 5)) {
                  current_statement__ = 140;
                  lp_accum__.add(stan::math::cauchy_lpdf<false>(level1,
                                   stan::model::rvalue(prior_level1,
                                     "prior_level1",
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_level1,
                                     "prior_level1",
                                     stan::model::index_uni(2))));
                } else {
                  current_statement__ = 139;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_level1, "prior_level1",
                          stan::model::index_uni(4)), 6)) {
                    current_statement__ = 138;
                    lp_accum__.add(stan::math::inv_gamma_lpdf<false>(level1,
                                     stan::model::rvalue(prior_level1,
                                       "prior_level1",
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_level1,
                                       "prior_level1",
                                       stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 137;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_level1, "prior_level1",
                            stan::model::index_uni(4)), 7)) {
                      current_statement__ = 136;
                      lp_accum__.add(stan::math::inv_chi_square_lpdf<false>(
                                       level1,
                                       stan::model::rvalue(prior_level1,
                                         "prior_level1",
                                         stan::model::index_uni(3))));
                    } else {
                      current_statement__ = 135;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_level1, "prior_level1",
                              stan::model::index_uni(4)), 8)) {
                        current_statement__ = 134;
                        lp_accum__.add(-(stan::math::log(sigma0)));
                      } else {
                        current_statement__ = 133;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_level1,
                                "prior_level1", stan::model::index_uni(4)), 9)) {
                          current_statement__ = 132;
                          lp_accum__.add(stan::math::gamma_lpdf<false>(
                                           level1,
                                           stan::model::rvalue(prior_level1,
                                             "prior_level1",
                                             stan::model::index_uni(1)),
                                           stan::model::rvalue(prior_level1,
                                             "prior_level1",
                                             stan::model::index_uni(2))));
                        } else {
                          current_statement__ = 131;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_level1,
                                  "prior_level1", stan::model::index_uni(4)),
                                10)) {
                            current_statement__ = 130;
                            lp_accum__.add(stan::math::exponential_lpdf<
                                             false>(level1,
                                             stan::model::rvalue(
                                               prior_level1, "prior_level1",
                                               stan::model::index_uni(2))));
                          } else {
                            current_statement__ = 129;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_level1,
                                    "prior_level1", stan::model::index_uni(4)),
                                  11)) {
                              current_statement__ = 128;
                              lp_accum__.add(stan::math::chi_square_lpdf<
                                               false>(level1,
                                               stan::model::rvalue(
                                                 prior_level1,
                                                 "prior_level1",
                                                 stan::model::index_uni(3))));
                            } else {
                              current_statement__ = 127;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_level1,
                                      "prior_level1",
                                      stan::model::index_uni(4)), 12)) {
                                current_statement__ = 126;
                                lp_accum__.add(stan::math::double_exponential_lpdf<
                                                 false>(level1,
                                                 stan::model::rvalue(
                                                   prior_level1,
                                                   "prior_level1",
                                                   stan::model::index_uni(1)),
                                                 stan::model::rvalue(
                                                   prior_level1,
                                                   "prior_level1",
                                                   stan::model::index_uni(2))));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 181;
        if (stan::math::logical_eq(is_td, 1)) {
          current_statement__ = 155;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_trend, "prior_trend",
                  stan::model::index_uni(4)), 1)) {
            current_statement__ = 154;
            lp_accum__.add(stan::math::normal_lpdf<false>(
                             stan::model::rvalue(trend, "trend",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_trend, "prior_trend",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_trend, "prior_trend",
                               stan::model::index_uni(2))));
          } else {
            current_statement__ = 153;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_trend, "prior_trend",
                    stan::model::index_uni(4)), 2)) {
              current_statement__ = 152;
              lp_accum__.add(stan::math::beta_lpdf<false>(
                               stan::model::rvalue(trend, "trend",
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_trend,
                                 "prior_trend", stan::model::index_uni(1)),
                               stan::model::rvalue(prior_trend,
                                 "prior_trend", stan::model::index_uni(2))));
            } else {
              current_statement__ = 151;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_trend, "prior_trend",
                      stan::model::index_uni(4)), 3)) {
                current_statement__ = 150;
                lp_accum__.add(stan::math::uniform_lpdf<false>(
                                 stan::model::rvalue(trend, "trend",
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_trend,
                                   "prior_trend", stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_trend,
                                   "prior_trend", stan::model::index_uni(2))));
              }
            }
          }
          current_statement__ = 179;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_trend1, "prior_trend1",
                  stan::model::index_uni(4)), 1)) {
            current_statement__ = 178;
            lp_accum__.add(stan::math::normal_lpdf<false>(trend1,
                             stan::model::rvalue(prior_trend1,
                               "prior_trend1", stan::model::index_uni(1)),
                             stan::model::rvalue(prior_trend1,
                               "prior_trend1", stan::model::index_uni(2))));
          } else {
            current_statement__ = 177;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_trend1, "prior_trend1",
                    stan::model::index_uni(4)), 2)) {
              current_statement__ = 176;
              lp_accum__.add(stan::math::beta_lpdf<false>(trend1,
                               stan::model::rvalue(prior_trend1,
                                 "prior_trend1", stan::model::index_uni(1)),
                               stan::model::rvalue(prior_trend1,
                                 "prior_trend1", stan::model::index_uni(2))));
            } else {
              current_statement__ = 175;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_trend1, "prior_trend1",
                      stan::model::index_uni(4)), 3)) {
                current_statement__ = 174;
                lp_accum__.add(stan::math::uniform_lpdf<false>(trend1,
                                 stan::model::rvalue(prior_trend1,
                                   "prior_trend1", stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_trend1,
                                   "prior_trend1", stan::model::index_uni(2))));
              } else {
                current_statement__ = 173;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_trend1, "prior_trend1",
                        stan::model::index_uni(4)), 4)) {
                  current_statement__ = 172;
                  lp_accum__.add(stan::math::student_t_lpdf<false>(trend1,
                                   stan::model::rvalue(prior_trend1,
                                     "prior_trend1",
                                     stan::model::index_uni(3)),
                                   stan::model::rvalue(prior_trend1,
                                     "prior_trend1",
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_trend1,
                                     "prior_trend1",
                                     stan::model::index_uni(2))));
                } else {
                  current_statement__ = 171;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_trend1, "prior_trend1",
                          stan::model::index_uni(4)), 5)) {
                    current_statement__ = 170;
                    lp_accum__.add(stan::math::cauchy_lpdf<false>(trend1,
                                     stan::model::rvalue(prior_trend1,
                                       "prior_trend1",
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_trend1,
                                       "prior_trend1",
                                       stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 169;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_trend1, "prior_trend1",
                            stan::model::index_uni(4)), 6)) {
                      current_statement__ = 168;
                      lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                                       trend1,
                                       stan::model::rvalue(prior_trend1,
                                         "prior_trend1",
                                         stan::model::index_uni(1)),
                                       stan::model::rvalue(prior_trend1,
                                         "prior_trend1",
                                         stan::model::index_uni(2))));
                    } else {
                      current_statement__ = 167;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_trend1, "prior_trend1",
                              stan::model::index_uni(4)), 7)) {
                        current_statement__ = 166;
                        lp_accum__.add(stan::math::inv_chi_square_lpdf<
                                         false>(trend1,
                                         stan::model::rvalue(prior_trend1,
                                           "prior_trend1",
                                           stan::model::index_uni(3))));
                      } else {
                        current_statement__ = 165;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_trend1,
                                "prior_trend1", stan::model::index_uni(4)), 8)) {
                          current_statement__ = 164;
                          lp_accum__.add(-(stan::math::log(sigma0)));
                        } else {
                          current_statement__ = 163;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_trend1,
                                  "prior_trend1", stan::model::index_uni(4)),
                                9)) {
                            current_statement__ = 162;
                            lp_accum__.add(stan::math::gamma_lpdf<false>(
                                             trend1,
                                             stan::model::rvalue(
                                               prior_trend1, "prior_trend1",
                                               stan::model::index_uni(1)),
                                             stan::model::rvalue(
                                               prior_trend1, "prior_trend1",
                                               stan::model::index_uni(2))));
                          } else {
                            current_statement__ = 161;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_trend1,
                                    "prior_trend1", stan::model::index_uni(4)),
                                  10)) {
                              current_statement__ = 160;
                              lp_accum__.add(stan::math::exponential_lpdf<
                                               false>(trend1,
                                               stan::model::rvalue(
                                                 prior_trend1,
                                                 "prior_trend1",
                                                 stan::model::index_uni(2))));
                            } else {
                              current_statement__ = 159;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_trend1,
                                      "prior_trend1",
                                      stan::model::index_uni(4)), 11)) {
                                current_statement__ = 158;
                                lp_accum__.add(stan::math::chi_square_lpdf<
                                                 false>(trend1,
                                                 stan::model::rvalue(
                                                   prior_trend1,
                                                   "prior_trend1",
                                                   stan::model::index_uni(3))));
                              } else {
                                current_statement__ = 157;
                                if (stan::math::logical_eq(
                                      stan::model::rvalue(prior_trend1,
                                        "prior_trend1",
                                        stan::model::index_uni(4)), 12)) {
                                  current_statement__ = 156;
                                  lp_accum__.add(stan::math::double_exponential_lpdf<
                                                   false>(trend1,
                                                   stan::model::rvalue(
                                                     prior_trend1,
                                                     "prior_trend1",
                                                     stan::model::index_uni(1)),
                                                   stan::model::rvalue(
                                                     prior_trend1,
                                                     "prior_trend1",
                                                     stan::model::index_uni(2))));
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 189;
        if (stan::math::logical_eq(is_dp, 1)) {
          current_statement__ = 187;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_damped, "prior_damped",
                  stan::model::index_uni(4)), 1)) {
            current_statement__ = 186;
            lp_accum__.add(stan::math::normal_lpdf<false>(
                             stan::model::rvalue(damped, "damped",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_damped,
                               "prior_damped", stan::model::index_uni(1)),
                             stan::model::rvalue(prior_damped,
                               "prior_damped", stan::model::index_uni(2))));
          } else {
            current_statement__ = 185;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_damped, "prior_damped",
                    stan::model::index_uni(4)), 2)) {
              current_statement__ = 184;
              lp_accum__.add(stan::math::beta_lpdf<false>(
                               stan::model::rvalue(damped, "damped",
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_damped,
                                 "prior_damped", stan::model::index_uni(1)),
                               stan::model::rvalue(prior_damped,
                                 "prior_damped", stan::model::index_uni(2))));
            } else {
              current_statement__ = 183;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_damped, "prior_damped",
                      stan::model::index_uni(4)), 3)) {
                current_statement__ = 182;
                lp_accum__.add(stan::math::uniform_lpdf<false>(
                                 stan::model::rvalue(damped, "damped",
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_damped,
                                   "prior_damped", stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_damped,
                                   "prior_damped", stan::model::index_uni(2))));
              }
            }
          }
        }
        current_statement__ = 221;
        if (stan::math::logical_eq(is_ss, 1)) {
          current_statement__ = 195;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_seasonal, "prior_seasonal",
                  stan::model::index_uni(4)), 1)) {
            current_statement__ = 194;
            lp_accum__.add(stan::math::normal_lpdf<false>(
                             stan::model::rvalue(seasonal, "seasonal",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_seasonal,
                               "prior_seasonal", stan::model::index_uni(1)),
                             stan::model::rvalue(prior_seasonal,
                               "prior_seasonal", stan::model::index_uni(2))));
          } else {
            current_statement__ = 193;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_seasonal, "prior_seasonal",
                    stan::model::index_uni(4)), 2)) {
              current_statement__ = 192;
              lp_accum__.add(stan::math::beta_lpdf<false>(
                               stan::model::rvalue(seasonal, "seasonal",
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_seasonal,
                                 "prior_seasonal", stan::model::index_uni(1)),
                               stan::model::rvalue(prior_seasonal,
                                 "prior_seasonal", stan::model::index_uni(2))));
            } else {
              current_statement__ = 191;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_seasonal, "prior_seasonal",
                      stan::model::index_uni(4)), 3)) {
                current_statement__ = 190;
                lp_accum__.add(stan::math::uniform_lpdf<false>(
                                 stan::model::rvalue(seasonal, "seasonal",
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_seasonal,
                                   "prior_seasonal",
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_seasonal,
                                   "prior_seasonal",
                                   stan::model::index_uni(2))));
              }
            }
          }
          current_statement__ = 219;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_seasonal1, "prior_seasonal1",
                  stan::model::index_uni(4)), 1)) {
            current_statement__ = 218;
            lp_accum__.add(stan::math::normal_lpdf<false>(seasonal1,
                             stan::model::rvalue(prior_seasonal,
                               "prior_seasonal", stan::model::index_uni(1)),
                             stan::model::rvalue(prior_seasonal,
                               "prior_seasonal", stan::model::index_uni(2))));
          } else {
            current_statement__ = 217;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_seasonal1, "prior_seasonal1",
                    stan::model::index_uni(4)), 2)) {
              current_statement__ = 216;
              lp_accum__.add(stan::math::beta_lpdf<false>(seasonal1,
                               stan::model::rvalue(prior_seasonal1,
                                 "prior_seasonal1", stan::model::index_uni(1)),
                               stan::model::rvalue(prior_seasonal1,
                                 "prior_seasonal1", stan::model::index_uni(2))));
            } else {
              current_statement__ = 215;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_seasonal1, "prior_seasonal1",
                      stan::model::index_uni(4)), 3)) {
                current_statement__ = 214;
                lp_accum__.add(stan::math::uniform_lpdf<false>(seasonal1,
                                 stan::model::rvalue(prior_seasonal1,
                                   "prior_seasonal1",
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_seasonal1,
                                   "prior_seasonal1",
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 213;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_seasonal1, "prior_seasonal1",
                        stan::model::index_uni(4)), 4)) {
                  current_statement__ = 212;
                  lp_accum__.add(stan::math::student_t_lpdf<false>(seasonal1,
                                   stan::model::rvalue(prior_seasonal1,
                                     "prior_seasonal1",
                                     stan::model::index_uni(3)),
                                   stan::model::rvalue(prior_seasonal1,
                                     "prior_seasonal1",
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_seasonal1,
                                     "prior_seasonal1",
                                     stan::model::index_uni(2))));
                } else {
                  current_statement__ = 211;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_seasonal1,
                          "prior_seasonal1", stan::model::index_uni(4)), 5)) {
                    current_statement__ = 210;
                    lp_accum__.add(stan::math::cauchy_lpdf<false>(seasonal1,
                                     stan::model::rvalue(prior_seasonal1,
                                       "prior_seasonal1",
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_seasonal1,
                                       "prior_seasonal1",
                                       stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 209;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_seasonal1,
                            "prior_seasonal1", stan::model::index_uni(4)), 6)) {
                      current_statement__ = 208;
                      lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                                       seasonal1,
                                       stan::model::rvalue(prior_seasonal1,
                                         "prior_seasonal1",
                                         stan::model::index_uni(1)),
                                       stan::model::rvalue(prior_seasonal1,
                                         "prior_seasonal1",
                                         stan::model::index_uni(2))));
                    } else {
                      current_statement__ = 207;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_seasonal1,
                              "prior_seasonal1", stan::model::index_uni(4)),
                            7)) {
                        current_statement__ = 206;
                        lp_accum__.add(stan::math::inv_chi_square_lpdf<
                                         false>(seasonal1,
                                         stan::model::rvalue(prior_seasonal1,
                                           "prior_seasonal1",
                                           stan::model::index_uni(3))));
                      } else {
                        current_statement__ = 205;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_seasonal1,
                                "prior_seasonal1", stan::model::index_uni(4)),
                              8)) {
                          current_statement__ = 204;
                          lp_accum__.add(-(stan::math::log(sigma0)));
                        } else {
                          current_statement__ = 203;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_seasonal1,
                                  "prior_seasonal1",
                                  stan::model::index_uni(4)), 9)) {
                            current_statement__ = 202;
                            lp_accum__.add(stan::math::gamma_lpdf<false>(
                                             seasonal1,
                                             stan::model::rvalue(
                                               prior_seasonal1,
                                               "prior_seasonal1",
                                               stan::model::index_uni(1)),
                                             stan::model::rvalue(
                                               prior_seasonal1,
                                               "prior_seasonal1",
                                               stan::model::index_uni(2))));
                          } else {
                            current_statement__ = 201;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_seasonal1,
                                    "prior_seasonal1",
                                    stan::model::index_uni(4)), 10)) {
                              current_statement__ = 200;
                              lp_accum__.add(stan::math::exponential_lpdf<
                                               false>(seasonal1,
                                               stan::model::rvalue(
                                                 prior_seasonal1,
                                                 "prior_seasonal1",
                                                 stan::model::index_uni(2))));
                            } else {
                              current_statement__ = 199;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_seasonal1,
                                      "prior_seasonal1",
                                      stan::model::index_uni(4)), 11)) {
                                current_statement__ = 198;
                                lp_accum__.add(stan::math::chi_square_lpdf<
                                                 false>(seasonal1,
                                                 stan::model::rvalue(
                                                   prior_seasonal1,
                                                   "prior_seasonal1",
                                                   stan::model::index_uni(3))));
                              } else {
                                current_statement__ = 197;
                                if (stan::math::logical_eq(
                                      stan::model::rvalue(prior_seasonal1,
                                        "prior_seasonal1",
                                        stan::model::index_uni(4)), 12)) {
                                  current_statement__ = 196;
                                  lp_accum__.add(stan::math::double_exponential_lpdf<
                                                   false>(seasonal1,
                                                   stan::model::rvalue(
                                                     prior_seasonal1,
                                                     "prior_seasonal1",
                                                     stan::model::index_uni(1)),
                                                   stan::model::rvalue(
                                                     prior_seasonal1,
                                                     "prior_seasonal1",
                                                     stan::model::index_uni(2))));
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 251;
        if (stan::math::logical_eq(genT, 1)) {
          current_statement__ = 246;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_dfv, "prior_dfv",
                  stan::model::index_uni(4)), 1)) {
            current_statement__ = 245;
            lp_accum__.add(stan::math::normal_lpdf<false>(
                             stan::model::rvalue(v, "v",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_dfv, "prior_dfv",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_dfv, "prior_dfv",
                               stan::model::index_uni(2))));
          } else {
            current_statement__ = 244;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_dfv, "prior_dfv",
                    stan::model::index_uni(4)), 2)) {
              current_statement__ = 243;
              lp_accum__.add(stan::math::beta_lpdf<false>(
                               stan::model::rvalue(v, "v",
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_dfv, "prior_dfv",
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_dfv, "prior_dfv",
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 242;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_dfv, "prior_dfv",
                      stan::model::index_uni(4)), 3)) {
                current_statement__ = 241;
                lp_accum__.add(stan::math::uniform_lpdf<false>(
                                 stan::model::rvalue(v, "v",
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_dfv, "prior_dfv",
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_dfv, "prior_dfv",
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 240;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_dfv, "prior_dfv",
                        stan::model::index_uni(4)), 4)) {
                  current_statement__ = 239;
                  lp_accum__.add(stan::math::student_t_lpdf<false>(
                                   stan::model::rvalue(v, "v",
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_dfv,
                                     "prior_dfv", stan::model::index_uni(3)),
                                   stan::model::rvalue(prior_dfv,
                                     "prior_dfv", stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_dfv,
                                     "prior_dfv", stan::model::index_uni(2))));
                } else {
                  current_statement__ = 238;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_dfv, "prior_dfv",
                          stan::model::index_uni(4)), 5)) {
                    current_statement__ = 237;
                    lp_accum__.add(stan::math::cauchy_lpdf<false>(
                                     stan::model::rvalue(v, "v",
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_dfv,
                                       "prior_dfv", stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_dfv,
                                       "prior_dfv", stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 236;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_dfv, "prior_dfv",
                            stan::model::index_uni(4)), 6)) {
                      current_statement__ = 235;
                      lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                                       stan::model::rvalue(v, "v",
                                         stan::model::index_uni(1)),
                                       stan::model::rvalue(prior_dfv,
                                         "prior_dfv",
                                         stan::model::index_uni(1)),
                                       stan::model::rvalue(prior_dfv,
                                         "prior_dfv",
                                         stan::model::index_uni(2))));
                    } else {
                      current_statement__ = 234;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_dfv, "prior_dfv",
                              stan::model::index_uni(4)), 7)) {
                        current_statement__ = 233;
                        lp_accum__.add(stan::math::inv_chi_square_lpdf<
                                         false>(
                                         stan::model::rvalue(v, "v",
                                           stan::model::index_uni(1)),
                                         stan::model::rvalue(prior_dfv,
                                           "prior_dfv",
                                           stan::model::index_uni(3))));
                      } else {
                        current_statement__ = 232;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_dfv, "prior_dfv",
                                stan::model::index_uni(4)), 8)) {
                          current_statement__ = 231;
                          lp_accum__.add(stan::math::log(
                                           Jpv(
                                             stan::model::rvalue(v, "v",
                                               stan::model::index_uni(1)),
                                             pstream__)));
                        } else {
                          current_statement__ = 230;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_dfv, "prior_dfv",
                                  stan::model::index_uni(4)), 9)) {
                            current_statement__ = 229;
                            lp_accum__.add(stan::math::gamma_lpdf<false>(
                                             stan::model::rvalue(v, "v",
                                               stan::model::index_uni(1)),
                                             stan::model::rvalue(prior_dfv,
                                               "prior_dfv",
                                               stan::model::index_uni(1)),
                                             stan::model::rvalue(prior_dfv,
                                               "prior_dfv",
                                               stan::model::index_uni(2))));
                          } else {
                            current_statement__ = 228;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_dfv, "prior_dfv",
                                    stan::model::index_uni(4)), 10)) {
                              current_statement__ = 227;
                              lp_accum__.add(stan::math::exponential_lpdf<
                                               false>(
                                               stan::model::rvalue(v, "v",
                                                 stan::model::index_uni(1)),
                                               stan::model::rvalue(prior_dfv,
                                                 "prior_dfv",
                                                 stan::model::index_uni(2))));
                            } else {
                              current_statement__ = 226;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_dfv,
                                      "prior_dfv", stan::model::index_uni(4)),
                                    11)) {
                                current_statement__ = 225;
                                lp_accum__.add(stan::math::chi_square_lpdf<
                                                 false>(
                                                 stan::model::rvalue(v, "v",
                                                   stan::model::index_uni(1)),
                                                 stan::model::rvalue(
                                                   prior_dfv, "prior_dfv",
                                                   stan::model::index_uni(3))));
                              } else {
                                current_statement__ = 224;
                                if (stan::math::logical_eq(
                                      stan::model::rvalue(prior_dfv,
                                        "prior_dfv",
                                        stan::model::index_uni(4)), 12)) {
                                  current_statement__ = 223;
                                  lp_accum__.add(stan::math::double_exponential_lpdf<
                                                   false>(
                                                   stan::model::rvalue(v,
                                                     "v",
                                                     stan::model::index_uni(1)),
                                                   stan::model::rvalue(
                                                     prior_dfv, "prior_dfv",
                                                     stan::model::index_uni(1)),
                                                   stan::model::rvalue(
                                                     prior_dfv, "prior_dfv",
                                                     stan::model::index_uni(2))));
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          current_statement__ = 247;
          lp_accum__.add(stan::math::gamma_lpdf<false>(
                           stan::model::rvalue(v, "v",
                             stan::model::index_uni(1)), 2, 0.1));
          current_statement__ = 248;
          lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                           stan::model::rvalue(lambda, "lambda",
                             stan::model::index_uni(1)),
                           (stan::model::rvalue(v, "v",
                              stan::model::index_uni(1)) / 2),
                           (stan::model::rvalue(v, "v",
                              stan::model::index_uni(1)) / 2)));
          current_statement__ = 249;
          lp_accum__.add(stan::math::normal_lpdf<false>(epsilon, 0,
                           (stan::model::rvalue(v1, "v1",
                              stan::model::index_uni(1)) * sigma0)));
        } else {
          current_statement__ = 222;
          lp_accum__.add(stan::math::normal_lpdf<false>(epsilon, 0, sigma0));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ = "model_ets_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto breg =
        in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(d1);
      current_statement__ = 2;
      auto sigma0 =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 3;
      auto level =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 4;
      auto trend =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__,
          is_td);
      current_statement__ = 5;
      auto damped =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__,
          is_dp);
      current_statement__ = 6;
      auto seasonal =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__,
          is_ss);
      current_statement__ = 7;
      auto v =
        in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__,-1,1>,
          jacobian__>(2.01, lp__, v_1dim__);
      current_statement__ = 8;
      auto lambda =
        in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__,-1,1>,
          jacobian__>(1, lp__, lambda_1dim__);
      current_statement__ = 9;
      auto level1 = in__.template read<local_scalar_t__>();
      current_statement__ = 10;
      auto trend1 =
        in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(is_td);
      current_statement__ = 11;
      auto seasonal1 =
        in__.template read<
          Eigen::Matrix<local_scalar_t__,-1,1>>(seasonal1_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> epsilon =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> l =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> b =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(b_1dim__, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> s =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(s_1dim__, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> v1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(v1_1dim__,
          DUMMY_VAR__);
      current_statement__ = 24;
      if (stan::math::logical_gt(d1, 0)) {
        current_statement__ = 23;
        stan::model::assign(mu, stan::math::multiply(xreg, breg),
          "assigning variable mu");
      } else {
        current_statement__ = 22;
        stan::model::assign(mu, stan::math::rep_vector(0, n),
          "assigning variable mu");
      }
      current_statement__ = 25;
      stan::model::assign(l, level1, "assigning variable l",
        stan::model::index_uni(1));
      current_statement__ = 26;
      stan::model::assign(mu,
        (stan::model::rvalue(mu, "mu", stan::model::index_uni(1)) + level1),
        "assigning variable mu", stan::model::index_uni(1));
      current_statement__ = 27;
      stan::model::assign(epsilon,
        (stan::model::rvalue(y, "y", stan::model::index_uni(1)) -
        stan::model::rvalue(mu, "mu", stan::model::index_uni(1))),
        "assigning variable epsilon", stan::model::index_uni(1));
      current_statement__ = 29;
      if (stan::math::logical_eq(is_td, 1)) {
        current_statement__ = 28;
        stan::model::assign(b,
          stan::model::rvalue(trend1, "trend1", stan::model::index_uni(1)),
          "assigning variable b", stan::model::index_uni(1));
      }
      current_statement__ = 32;
      if (stan::math::logical_eq(is_ss, 1)) {
        current_statement__ = 31;
        for (int i = 1; i <= m; ++i) {
          current_statement__ = 30;
          stan::model::assign(s,
            stan::model::rvalue(seasonal1, "seasonal1",
              stan::model::index_uni(i)), "assigning variable s",
            stan::model::index_uni(i));
        }
      }
      current_statement__ = 34;
      if (stan::math::logical_eq(genT, 1)) {
        current_statement__ = 33;
        stan::model::assign(v1,
          stan::math::sqrt(
            (((stan::model::rvalue(v, "v", stan::model::index_uni(1)) - 2) *
            stan::model::rvalue(lambda, "lambda", stan::model::index_uni(1)))
            / stan::model::rvalue(v, "v", stan::model::index_uni(1)))),
          "assigning variable v1", stan::model::index_uni(1));
      }
      current_statement__ = 55;
      for (int i = 2; i <= n; ++i) {
        current_statement__ = 35;
        stan::model::assign(l, ((level *
          (stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
          stan::model::rvalue(mu, "mu", stan::model::index_uni(i)))) + ((1 -
          level) *
          stan::model::rvalue(l, "l", stan::model::index_uni((i - 1))))),
          "assigning variable l", stan::model::index_uni(i));
        current_statement__ = 37;
        if ((stan::math::primitive_value(stan::math::logical_eq(is_ss, 1)) &&
            stan::math::primitive_value(stan::math::logical_gt(i, m)))) {
          current_statement__ = 36;
          stan::model::assign(l,
            (stan::model::rvalue(l, "l", stan::model::index_uni(i)) +
            (-(level) *
            stan::model::rvalue(s, "s", stan::model::index_uni((i - m))))),
            "assigning variable l", stan::model::index_uni(i));
        }
        current_statement__ = 38;
        stan::model::assign(mu,
          (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
          stan::model::rvalue(l, "l", stan::model::index_uni((i - 1)))),
          "assigning variable mu", stan::model::index_uni(i));
        current_statement__ = 44;
        if (stan::math::logical_eq(is_td, 1)) {
          current_statement__ = 40;
          if (stan::math::logical_eq(is_dp, 1)) {
            current_statement__ = 39;
            stan::model::assign(b,
              (stan::model::rvalue(damped, "damped",
                 stan::model::index_uni(1)) *
              stan::model::rvalue(b, "b", stan::model::index_uni((i - 1)))),
              "assigning variable b", stan::model::index_uni((i - 1)));
          }
          current_statement__ = 41;
          stan::model::assign(b,
            ((stan::model::rvalue(trend, "trend", stan::model::index_uni(1))
            * (stan::model::rvalue(l, "l", stan::model::index_uni(i)) -
            stan::model::rvalue(l, "l", stan::model::index_uni((i - 1))))) +
            ((1 -
            stan::model::rvalue(trend, "trend", stan::model::index_uni(1))) *
            stan::model::rvalue(b, "b", stan::model::index_uni((i - 1))))),
            "assigning variable b", stan::model::index_uni(i));
          current_statement__ = 42;
          stan::model::assign(mu,
            (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
            stan::model::rvalue(b, "b", stan::model::index_uni((i - 1)))),
            "assigning variable mu", stan::model::index_uni(i));
        }
        current_statement__ = 52;
        if (stan::math::logical_eq(is_ss, 1)) {
          current_statement__ = 50;
          if (stan::math::logical_gt(i, m)) {
            current_statement__ = 45;
            stan::model::assign(s,
              ((stan::model::rvalue(seasonal, "seasonal",
                  stan::model::index_uni(1)) *
              (stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
              stan::model::rvalue(l, "l", stan::model::index_uni(i)))) + ((1
              -
              stan::model::rvalue(seasonal, "seasonal",
                stan::model::index_uni(1))) *
              stan::model::rvalue(s, "s", stan::model::index_uni((i - m))))),
              "assigning variable s", stan::model::index_uni(i));
            current_statement__ = 47;
            if (stan::math::logical_eq(is_td, 1)) {
              current_statement__ = 46;
              stan::model::assign(s,
                (stan::model::rvalue(s, "s", stan::model::index_uni(i)) +
                (-(stan::model::rvalue(seasonal, "seasonal",
                     stan::model::index_uni(1))) *
                stan::model::rvalue(b, "b", stan::model::index_uni(i)))),
                "assigning variable s", stan::model::index_uni(i));
            }
            current_statement__ = 48;
            stan::model::assign(mu,
              (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
              stan::model::rvalue(s, "s", stan::model::index_uni((i - m)))),
              "assigning variable mu", stan::model::index_uni(i));
          }
        }
        current_statement__ = 53;
        stan::model::assign(epsilon,
          (stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
          stan::model::rvalue(mu, "mu", stan::model::index_uni(i))),
          "assigning variable epsilon", stan::model::index_uni(i));
      }
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "v1", v1, 1);
      {
        current_statement__ = 91;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_sigma0, "prior_sigma0",
                stan::model::index_uni(4)), 1)) {
          current_statement__ = 90;
          lp_accum__.add(stan::math::normal_lpdf<false>(sigma0,
                           stan::model::rvalue(prior_sigma0, "prior_sigma0",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(prior_sigma0, "prior_sigma0",
                             stan::model::index_uni(2))));
        } else {
          current_statement__ = 89;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_sigma0, "prior_sigma0",
                  stan::model::index_uni(4)), 2)) {
            current_statement__ = 88;
            lp_accum__.add(stan::math::beta_lpdf<false>(sigma0,
                             stan::model::rvalue(prior_sigma0,
                               "prior_sigma0", stan::model::index_uni(1)),
                             stan::model::rvalue(prior_sigma0,
                               "prior_sigma0", stan::model::index_uni(2))));
          } else {
            current_statement__ = 87;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_sigma0, "prior_sigma0",
                    stan::model::index_uni(4)), 3)) {
              current_statement__ = 86;
              lp_accum__.add(stan::math::uniform_lpdf<false>(sigma0,
                               stan::model::rvalue(prior_sigma0,
                                 "prior_sigma0", stan::model::index_uni(1)),
                               stan::model::rvalue(prior_sigma0,
                                 "prior_sigma0", stan::model::index_uni(2))));
            } else {
              current_statement__ = 85;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_sigma0, "prior_sigma0",
                      stan::model::index_uni(4)), 4)) {
                current_statement__ = 84;
                lp_accum__.add(stan::math::student_t_lpdf<false>(sigma0,
                                 stan::model::rvalue(prior_sigma0,
                                   "prior_sigma0", stan::model::index_uni(3)),
                                 stan::model::rvalue(prior_sigma0,
                                   "prior_sigma0", stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_sigma0,
                                   "prior_sigma0", stan::model::index_uni(2))));
              } else {
                current_statement__ = 83;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_sigma0, "prior_sigma0",
                        stan::model::index_uni(4)), 5)) {
                  current_statement__ = 82;
                  lp_accum__.add(stan::math::cauchy_lpdf<false>(sigma0,
                                   stan::model::rvalue(prior_sigma0,
                                     "prior_sigma0",
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_sigma0,
                                     "prior_sigma0",
                                     stan::model::index_uni(2))));
                } else {
                  current_statement__ = 81;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_sigma0, "prior_sigma0",
                          stan::model::index_uni(4)), 6)) {
                    current_statement__ = 80;
                    lp_accum__.add(stan::math::inv_gamma_lpdf<false>(sigma0,
                                     stan::model::rvalue(prior_sigma0,
                                       "prior_sigma0",
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_sigma0,
                                       "prior_sigma0",
                                       stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 79;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_sigma0, "prior_sigma0",
                            stan::model::index_uni(4)), 7)) {
                      current_statement__ = 78;
                      lp_accum__.add(stan::math::inv_chi_square_lpdf<false>(
                                       sigma0,
                                       stan::model::rvalue(prior_sigma0,
                                         "prior_sigma0",
                                         stan::model::index_uni(3))));
                    } else {
                      current_statement__ = 77;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_sigma0, "prior_sigma0",
                              stan::model::index_uni(4)), 8)) {
                        current_statement__ = 76;
                        lp_accum__.add(-(stan::math::log(sigma0)));
                      } else {
                        current_statement__ = 75;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_sigma0,
                                "prior_sigma0", stan::model::index_uni(4)), 9)) {
                          current_statement__ = 74;
                          lp_accum__.add(stan::math::gamma_lpdf<false>(
                                           sigma0,
                                           stan::model::rvalue(prior_sigma0,
                                             "prior_sigma0",
                                             stan::model::index_uni(1)),
                                           stan::model::rvalue(prior_sigma0,
                                             "prior_sigma0",
                                             stan::model::index_uni(2))));
                        } else {
                          current_statement__ = 73;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_sigma0,
                                  "prior_sigma0", stan::model::index_uni(4)),
                                10)) {
                            current_statement__ = 72;
                            lp_accum__.add(stan::math::exponential_lpdf<
                                             false>(sigma0,
                                             stan::model::rvalue(
                                               prior_sigma0, "prior_sigma0",
                                               stan::model::index_uni(2))));
                          } else {
                            current_statement__ = 71;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_sigma0,
                                    "prior_sigma0", stan::model::index_uni(4)),
                                  11)) {
                              current_statement__ = 70;
                              lp_accum__.add(stan::math::chi_square_lpdf<
                                               false>(sigma0,
                                               stan::model::rvalue(
                                                 prior_sigma0,
                                                 "prior_sigma0",
                                                 stan::model::index_uni(3))));
                            } else {
                              current_statement__ = 69;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_sigma0,
                                      "prior_sigma0",
                                      stan::model::index_uni(4)), 12)) {
                                current_statement__ = 68;
                                lp_accum__.add(stan::math::double_exponential_lpdf<
                                                 false>(sigma0,
                                                 stan::model::rvalue(
                                                   prior_sigma0,
                                                   "prior_sigma0",
                                                   stan::model::index_uni(1)),
                                                 stan::model::rvalue(
                                                   prior_sigma0,
                                                   "prior_sigma0",
                                                   stan::model::index_uni(2))));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 119;
        if (stan::math::logical_gt(d1, 0)) {
          current_statement__ = 117;
          for (int i = 1; i <= d1; ++i) {
            current_statement__ = 115;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_breg, "prior_breg",
                    stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
              current_statement__ = 114;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(breg, "breg",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(prior_breg, "prior_breg",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_breg, "prior_breg",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 113;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_breg, "prior_breg",
                      stan::model::index_uni(i), stan::model::index_uni(4)),
                    2)) {
                current_statement__ = 112;
                lp_accum__.add(stan::math::beta_lpdf<false>(
                                 stan::model::rvalue(breg, "breg",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(prior_breg,
                                   "prior_breg", stan::model::index_uni(i),
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_breg,
                                   "prior_breg", stan::model::index_uni(i),
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 111;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_breg, "prior_breg",
                        stan::model::index_uni(i), stan::model::index_uni(4)),
                      3)) {
                  current_statement__ = 110;
                  lp_accum__.add(stan::math::uniform_lpdf<false>(
                                   stan::model::rvalue(breg, "breg",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(prior_breg,
                                     "prior_breg", stan::model::index_uni(i),
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_breg,
                                     "prior_breg", stan::model::index_uni(i),
                                     stan::model::index_uni(2))));
                } else {
                  current_statement__ = 109;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_breg, "prior_breg",
                          stan::model::index_uni(i),
                          stan::model::index_uni(4)), 4)) {
                    current_statement__ = 108;
                    lp_accum__.add(stan::math::student_t_lpdf<false>(
                                     stan::model::rvalue(breg, "breg",
                                       stan::model::index_uni(i)),
                                     stan::model::rvalue(prior_breg,
                                       "prior_breg",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(3)),
                                     stan::model::rvalue(prior_breg,
                                       "prior_breg",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_breg,
                                       "prior_breg",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 107;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_breg, "prior_breg",
                            stan::model::index_uni(i),
                            stan::model::index_uni(4)), 5)) {
                      current_statement__ = 106;
                      lp_accum__.add(stan::math::cauchy_lpdf<false>(
                                       stan::model::rvalue(breg, "breg",
                                         stan::model::index_uni(i)),
                                       stan::model::rvalue(prior_breg,
                                         "prior_breg",
                                         stan::model::index_uni(i),
                                         stan::model::index_uni(1)),
                                       stan::model::rvalue(prior_breg,
                                         "prior_breg",
                                         stan::model::index_uni(i),
                                         stan::model::index_uni(2))));
                    } else {
                      current_statement__ = 105;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_breg, "prior_breg",
                              stan::model::index_uni(i),
                              stan::model::index_uni(4)), 6)) {
                        current_statement__ = 104;
                        lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                                         stan::model::rvalue(breg, "breg",
                                           stan::model::index_uni(i)),
                                         stan::model::rvalue(prior_breg,
                                           "prior_breg",
                                           stan::model::index_uni(i),
                                           stan::model::index_uni(1)),
                                         stan::model::rvalue(prior_breg,
                                           "prior_breg",
                                           stan::model::index_uni(i),
                                           stan::model::index_uni(2))));
                      } else {
                        current_statement__ = 103;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_breg, "prior_breg",
                                stan::model::index_uni(i),
                                stan::model::index_uni(4)), 7)) {
                          current_statement__ = 102;
                          lp_accum__.add(stan::math::inv_chi_square_lpdf<
                                           false>(
                                           stan::model::rvalue(breg, "breg",
                                             stan::model::index_uni(i)),
                                           stan::model::rvalue(prior_breg,
                                             "prior_breg",
                                             stan::model::index_uni(i),
                                             stan::model::index_uni(3))));
                        } else {
                          current_statement__ = 101;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_breg, "prior_breg",
                                  stan::model::index_uni(i),
                                  stan::model::index_uni(4)), 8)) {
                            current_statement__ = 100;
                            lp_accum__.add(-(stan::math::log(sigma0)));
                          } else {
                            current_statement__ = 99;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_breg,
                                    "prior_breg", stan::model::index_uni(i),
                                    stan::model::index_uni(4)), 9)) {
                              current_statement__ = 98;
                              lp_accum__.add(stan::math::gamma_lpdf<false>(
                                               stan::model::rvalue(breg,
                                                 "breg",
                                                 stan::model::index_uni(i)),
                                               stan::model::rvalue(
                                                 prior_breg, "prior_breg",
                                                 stan::model::index_uni(i),
                                                 stan::model::index_uni(1)),
                                               stan::model::rvalue(
                                                 prior_breg, "prior_breg",
                                                 stan::model::index_uni(i),
                                                 stan::model::index_uni(2))));
                            } else {
                              current_statement__ = 97;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_breg,
                                      "prior_breg",
                                      stan::model::index_uni(i),
                                      stan::model::index_uni(4)), 10)) {
                                current_statement__ = 96;
                                lp_accum__.add(stan::math::exponential_lpdf<
                                                 false>(
                                                 stan::model::rvalue(breg,
                                                   "breg",
                                                   stan::model::index_uni(i)),
                                                 stan::model::rvalue(
                                                   prior_breg, "prior_breg",
                                                   stan::model::index_uni(i),
                                                   stan::model::index_uni(2))));
                              } else {
                                current_statement__ = 95;
                                if (stan::math::logical_eq(
                                      stan::model::rvalue(prior_breg,
                                        "prior_breg",
                                        stan::model::index_uni(i),
                                        stan::model::index_uni(4)), 11)) {
                                  current_statement__ = 94;
                                  lp_accum__.add(stan::math::chi_square_lpdf<
                                                   false>(
                                                   stan::model::rvalue(breg,
                                                     "breg",
                                                     stan::model::index_uni(i)),
                                                   stan::model::rvalue(
                                                     prior_breg,
                                                     "prior_breg",
                                                     stan::model::index_uni(i),
                                                     stan::model::index_uni(3))));
                                } else {
                                  current_statement__ = 93;
                                  if (stan::math::logical_eq(
                                        stan::model::rvalue(prior_breg,
                                          "prior_breg",
                                          stan::model::index_uni(i),
                                          stan::model::index_uni(4)), 12)) {
                                    current_statement__ = 92;
                                    lp_accum__.add(stan::math::double_exponential_lpdf<
                                                     false>(
                                                     stan::model::rvalue(
                                                       breg, "breg",
                                                       stan::model::index_uni(
                                                         i)),
                                                     stan::model::rvalue(
                                                       prior_breg,
                                                       "prior_breg",
                                                       stan::model::index_uni(
                                                         i),
                                                       stan::model::index_uni(
                                                         1)),
                                                     stan::model::rvalue(
                                                       prior_breg,
                                                       "prior_breg",
                                                       stan::model::index_uni(
                                                         i),
                                                       stan::model::index_uni(
                                                         2))));
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 125;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_level, "prior_level",
                stan::model::index_uni(4)), 1)) {
          current_statement__ = 124;
          lp_accum__.add(stan::math::normal_lpdf<false>(level,
                           stan::model::rvalue(prior_level, "prior_level",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(prior_level, "prior_level",
                             stan::model::index_uni(2))));
        } else {
          current_statement__ = 123;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_level, "prior_level",
                  stan::model::index_uni(4)), 2)) {
            current_statement__ = 122;
            lp_accum__.add(stan::math::beta_lpdf<false>(level,
                             stan::model::rvalue(prior_level, "prior_level",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_level, "prior_level",
                               stan::model::index_uni(2))));
          } else {
            current_statement__ = 121;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_level, "prior_level",
                    stan::model::index_uni(4)), 3)) {
              current_statement__ = 120;
              lp_accum__.add(stan::math::uniform_lpdf<false>(level,
                               stan::model::rvalue(prior_level,
                                 "prior_level", stan::model::index_uni(1)),
                               stan::model::rvalue(prior_level,
                                 "prior_level", stan::model::index_uni(2))));
            }
          }
        }
        current_statement__ = 149;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_level1, "prior_level1",
                stan::model::index_uni(4)), 1)) {
          current_statement__ = 148;
          lp_accum__.add(stan::math::normal_lpdf<false>(level1,
                           stan::model::rvalue(prior_level1, "prior_level1",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(prior_level1, "prior_level1",
                             stan::model::index_uni(2))));
        } else {
          current_statement__ = 147;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_level1, "prior_level1",
                  stan::model::index_uni(4)), 2)) {
            current_statement__ = 146;
            lp_accum__.add(stan::math::beta_lpdf<false>(level1,
                             stan::model::rvalue(prior_level1,
                               "prior_level1", stan::model::index_uni(1)),
                             stan::model::rvalue(prior_level1,
                               "prior_level1", stan::model::index_uni(2))));
          } else {
            current_statement__ = 145;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_level1, "prior_level1",
                    stan::model::index_uni(4)), 3)) {
              current_statement__ = 144;
              lp_accum__.add(stan::math::uniform_lpdf<false>(level1,
                               stan::model::rvalue(prior_level1,
                                 "prior_level1", stan::model::index_uni(1)),
                               stan::model::rvalue(prior_level1,
                                 "prior_level1", stan::model::index_uni(2))));
            } else {
              current_statement__ = 143;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_level1, "prior_level1",
                      stan::model::index_uni(4)), 4)) {
                current_statement__ = 142;
                lp_accum__.add(stan::math::student_t_lpdf<false>(level1,
                                 stan::model::rvalue(prior_level1,
                                   "prior_level1", stan::model::index_uni(3)),
                                 stan::model::rvalue(prior_level1,
                                   "prior_level1", stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_level1,
                                   "prior_level1", stan::model::index_uni(2))));
              } else {
                current_statement__ = 141;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_level1, "prior_level1",
                        stan::model::index_uni(4)), 5)) {
                  current_statement__ = 140;
                  lp_accum__.add(stan::math::cauchy_lpdf<false>(level1,
                                   stan::model::rvalue(prior_level1,
                                     "prior_level1",
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_level1,
                                     "prior_level1",
                                     stan::model::index_uni(2))));
                } else {
                  current_statement__ = 139;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_level1, "prior_level1",
                          stan::model::index_uni(4)), 6)) {
                    current_statement__ = 138;
                    lp_accum__.add(stan::math::inv_gamma_lpdf<false>(level1,
                                     stan::model::rvalue(prior_level1,
                                       "prior_level1",
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_level1,
                                       "prior_level1",
                                       stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 137;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_level1, "prior_level1",
                            stan::model::index_uni(4)), 7)) {
                      current_statement__ = 136;
                      lp_accum__.add(stan::math::inv_chi_square_lpdf<false>(
                                       level1,
                                       stan::model::rvalue(prior_level1,
                                         "prior_level1",
                                         stan::model::index_uni(3))));
                    } else {
                      current_statement__ = 135;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_level1, "prior_level1",
                              stan::model::index_uni(4)), 8)) {
                        current_statement__ = 134;
                        lp_accum__.add(-(stan::math::log(sigma0)));
                      } else {
                        current_statement__ = 133;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_level1,
                                "prior_level1", stan::model::index_uni(4)), 9)) {
                          current_statement__ = 132;
                          lp_accum__.add(stan::math::gamma_lpdf<false>(
                                           level1,
                                           stan::model::rvalue(prior_level1,
                                             "prior_level1",
                                             stan::model::index_uni(1)),
                                           stan::model::rvalue(prior_level1,
                                             "prior_level1",
                                             stan::model::index_uni(2))));
                        } else {
                          current_statement__ = 131;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_level1,
                                  "prior_level1", stan::model::index_uni(4)),
                                10)) {
                            current_statement__ = 130;
                            lp_accum__.add(stan::math::exponential_lpdf<
                                             false>(level1,
                                             stan::model::rvalue(
                                               prior_level1, "prior_level1",
                                               stan::model::index_uni(2))));
                          } else {
                            current_statement__ = 129;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_level1,
                                    "prior_level1", stan::model::index_uni(4)),
                                  11)) {
                              current_statement__ = 128;
                              lp_accum__.add(stan::math::chi_square_lpdf<
                                               false>(level1,
                                               stan::model::rvalue(
                                                 prior_level1,
                                                 "prior_level1",
                                                 stan::model::index_uni(3))));
                            } else {
                              current_statement__ = 127;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_level1,
                                      "prior_level1",
                                      stan::model::index_uni(4)), 12)) {
                                current_statement__ = 126;
                                lp_accum__.add(stan::math::double_exponential_lpdf<
                                                 false>(level1,
                                                 stan::model::rvalue(
                                                   prior_level1,
                                                   "prior_level1",
                                                   stan::model::index_uni(1)),
                                                 stan::model::rvalue(
                                                   prior_level1,
                                                   "prior_level1",
                                                   stan::model::index_uni(2))));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 181;
        if (stan::math::logical_eq(is_td, 1)) {
          current_statement__ = 155;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_trend, "prior_trend",
                  stan::model::index_uni(4)), 1)) {
            current_statement__ = 154;
            lp_accum__.add(stan::math::normal_lpdf<false>(
                             stan::model::rvalue(trend, "trend",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_trend, "prior_trend",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_trend, "prior_trend",
                               stan::model::index_uni(2))));
          } else {
            current_statement__ = 153;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_trend, "prior_trend",
                    stan::model::index_uni(4)), 2)) {
              current_statement__ = 152;
              lp_accum__.add(stan::math::beta_lpdf<false>(
                               stan::model::rvalue(trend, "trend",
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_trend,
                                 "prior_trend", stan::model::index_uni(1)),
                               stan::model::rvalue(prior_trend,
                                 "prior_trend", stan::model::index_uni(2))));
            } else {
              current_statement__ = 151;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_trend, "prior_trend",
                      stan::model::index_uni(4)), 3)) {
                current_statement__ = 150;
                lp_accum__.add(stan::math::uniform_lpdf<false>(
                                 stan::model::rvalue(trend, "trend",
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_trend,
                                   "prior_trend", stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_trend,
                                   "prior_trend", stan::model::index_uni(2))));
              }
            }
          }
          current_statement__ = 179;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_trend1, "prior_trend1",
                  stan::model::index_uni(4)), 1)) {
            current_statement__ = 178;
            lp_accum__.add(stan::math::normal_lpdf<false>(trend1,
                             stan::model::rvalue(prior_trend1,
                               "prior_trend1", stan::model::index_uni(1)),
                             stan::model::rvalue(prior_trend1,
                               "prior_trend1", stan::model::index_uni(2))));
          } else {
            current_statement__ = 177;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_trend1, "prior_trend1",
                    stan::model::index_uni(4)), 2)) {
              current_statement__ = 176;
              lp_accum__.add(stan::math::beta_lpdf<false>(trend1,
                               stan::model::rvalue(prior_trend1,
                                 "prior_trend1", stan::model::index_uni(1)),
                               stan::model::rvalue(prior_trend1,
                                 "prior_trend1", stan::model::index_uni(2))));
            } else {
              current_statement__ = 175;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_trend1, "prior_trend1",
                      stan::model::index_uni(4)), 3)) {
                current_statement__ = 174;
                lp_accum__.add(stan::math::uniform_lpdf<false>(trend1,
                                 stan::model::rvalue(prior_trend1,
                                   "prior_trend1", stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_trend1,
                                   "prior_trend1", stan::model::index_uni(2))));
              } else {
                current_statement__ = 173;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_trend1, "prior_trend1",
                        stan::model::index_uni(4)), 4)) {
                  current_statement__ = 172;
                  lp_accum__.add(stan::math::student_t_lpdf<false>(trend1,
                                   stan::model::rvalue(prior_trend1,
                                     "prior_trend1",
                                     stan::model::index_uni(3)),
                                   stan::model::rvalue(prior_trend1,
                                     "prior_trend1",
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_trend1,
                                     "prior_trend1",
                                     stan::model::index_uni(2))));
                } else {
                  current_statement__ = 171;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_trend1, "prior_trend1",
                          stan::model::index_uni(4)), 5)) {
                    current_statement__ = 170;
                    lp_accum__.add(stan::math::cauchy_lpdf<false>(trend1,
                                     stan::model::rvalue(prior_trend1,
                                       "prior_trend1",
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_trend1,
                                       "prior_trend1",
                                       stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 169;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_trend1, "prior_trend1",
                            stan::model::index_uni(4)), 6)) {
                      current_statement__ = 168;
                      lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                                       trend1,
                                       stan::model::rvalue(prior_trend1,
                                         "prior_trend1",
                                         stan::model::index_uni(1)),
                                       stan::model::rvalue(prior_trend1,
                                         "prior_trend1",
                                         stan::model::index_uni(2))));
                    } else {
                      current_statement__ = 167;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_trend1, "prior_trend1",
                              stan::model::index_uni(4)), 7)) {
                        current_statement__ = 166;
                        lp_accum__.add(stan::math::inv_chi_square_lpdf<
                                         false>(trend1,
                                         stan::model::rvalue(prior_trend1,
                                           "prior_trend1",
                                           stan::model::index_uni(3))));
                      } else {
                        current_statement__ = 165;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_trend1,
                                "prior_trend1", stan::model::index_uni(4)), 8)) {
                          current_statement__ = 164;
                          lp_accum__.add(-(stan::math::log(sigma0)));
                        } else {
                          current_statement__ = 163;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_trend1,
                                  "prior_trend1", stan::model::index_uni(4)),
                                9)) {
                            current_statement__ = 162;
                            lp_accum__.add(stan::math::gamma_lpdf<false>(
                                             trend1,
                                             stan::model::rvalue(
                                               prior_trend1, "prior_trend1",
                                               stan::model::index_uni(1)),
                                             stan::model::rvalue(
                                               prior_trend1, "prior_trend1",
                                               stan::model::index_uni(2))));
                          } else {
                            current_statement__ = 161;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_trend1,
                                    "prior_trend1", stan::model::index_uni(4)),
                                  10)) {
                              current_statement__ = 160;
                              lp_accum__.add(stan::math::exponential_lpdf<
                                               false>(trend1,
                                               stan::model::rvalue(
                                                 prior_trend1,
                                                 "prior_trend1",
                                                 stan::model::index_uni(2))));
                            } else {
                              current_statement__ = 159;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_trend1,
                                      "prior_trend1",
                                      stan::model::index_uni(4)), 11)) {
                                current_statement__ = 158;
                                lp_accum__.add(stan::math::chi_square_lpdf<
                                                 false>(trend1,
                                                 stan::model::rvalue(
                                                   prior_trend1,
                                                   "prior_trend1",
                                                   stan::model::index_uni(3))));
                              } else {
                                current_statement__ = 157;
                                if (stan::math::logical_eq(
                                      stan::model::rvalue(prior_trend1,
                                        "prior_trend1",
                                        stan::model::index_uni(4)), 12)) {
                                  current_statement__ = 156;
                                  lp_accum__.add(stan::math::double_exponential_lpdf<
                                                   false>(trend1,
                                                   stan::model::rvalue(
                                                     prior_trend1,
                                                     "prior_trend1",
                                                     stan::model::index_uni(1)),
                                                   stan::model::rvalue(
                                                     prior_trend1,
                                                     "prior_trend1",
                                                     stan::model::index_uni(2))));
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 189;
        if (stan::math::logical_eq(is_dp, 1)) {
          current_statement__ = 187;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_damped, "prior_damped",
                  stan::model::index_uni(4)), 1)) {
            current_statement__ = 186;
            lp_accum__.add(stan::math::normal_lpdf<false>(
                             stan::model::rvalue(damped, "damped",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_damped,
                               "prior_damped", stan::model::index_uni(1)),
                             stan::model::rvalue(prior_damped,
                               "prior_damped", stan::model::index_uni(2))));
          } else {
            current_statement__ = 185;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_damped, "prior_damped",
                    stan::model::index_uni(4)), 2)) {
              current_statement__ = 184;
              lp_accum__.add(stan::math::beta_lpdf<false>(
                               stan::model::rvalue(damped, "damped",
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_damped,
                                 "prior_damped", stan::model::index_uni(1)),
                               stan::model::rvalue(prior_damped,
                                 "prior_damped", stan::model::index_uni(2))));
            } else {
              current_statement__ = 183;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_damped, "prior_damped",
                      stan::model::index_uni(4)), 3)) {
                current_statement__ = 182;
                lp_accum__.add(stan::math::uniform_lpdf<false>(
                                 stan::model::rvalue(damped, "damped",
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_damped,
                                   "prior_damped", stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_damped,
                                   "prior_damped", stan::model::index_uni(2))));
              }
            }
          }
        }
        current_statement__ = 221;
        if (stan::math::logical_eq(is_ss, 1)) {
          current_statement__ = 195;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_seasonal, "prior_seasonal",
                  stan::model::index_uni(4)), 1)) {
            current_statement__ = 194;
            lp_accum__.add(stan::math::normal_lpdf<false>(
                             stan::model::rvalue(seasonal, "seasonal",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_seasonal,
                               "prior_seasonal", stan::model::index_uni(1)),
                             stan::model::rvalue(prior_seasonal,
                               "prior_seasonal", stan::model::index_uni(2))));
          } else {
            current_statement__ = 193;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_seasonal, "prior_seasonal",
                    stan::model::index_uni(4)), 2)) {
              current_statement__ = 192;
              lp_accum__.add(stan::math::beta_lpdf<false>(
                               stan::model::rvalue(seasonal, "seasonal",
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_seasonal,
                                 "prior_seasonal", stan::model::index_uni(1)),
                               stan::model::rvalue(prior_seasonal,
                                 "prior_seasonal", stan::model::index_uni(2))));
            } else {
              current_statement__ = 191;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_seasonal, "prior_seasonal",
                      stan::model::index_uni(4)), 3)) {
                current_statement__ = 190;
                lp_accum__.add(stan::math::uniform_lpdf<false>(
                                 stan::model::rvalue(seasonal, "seasonal",
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_seasonal,
                                   "prior_seasonal",
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_seasonal,
                                   "prior_seasonal",
                                   stan::model::index_uni(2))));
              }
            }
          }
          current_statement__ = 219;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_seasonal1, "prior_seasonal1",
                  stan::model::index_uni(4)), 1)) {
            current_statement__ = 218;
            lp_accum__.add(stan::math::normal_lpdf<false>(seasonal1,
                             stan::model::rvalue(prior_seasonal,
                               "prior_seasonal", stan::model::index_uni(1)),
                             stan::model::rvalue(prior_seasonal,
                               "prior_seasonal", stan::model::index_uni(2))));
          } else {
            current_statement__ = 217;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_seasonal1, "prior_seasonal1",
                    stan::model::index_uni(4)), 2)) {
              current_statement__ = 216;
              lp_accum__.add(stan::math::beta_lpdf<false>(seasonal1,
                               stan::model::rvalue(prior_seasonal1,
                                 "prior_seasonal1", stan::model::index_uni(1)),
                               stan::model::rvalue(prior_seasonal1,
                                 "prior_seasonal1", stan::model::index_uni(2))));
            } else {
              current_statement__ = 215;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_seasonal1, "prior_seasonal1",
                      stan::model::index_uni(4)), 3)) {
                current_statement__ = 214;
                lp_accum__.add(stan::math::uniform_lpdf<false>(seasonal1,
                                 stan::model::rvalue(prior_seasonal1,
                                   "prior_seasonal1",
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_seasonal1,
                                   "prior_seasonal1",
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 213;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_seasonal1, "prior_seasonal1",
                        stan::model::index_uni(4)), 4)) {
                  current_statement__ = 212;
                  lp_accum__.add(stan::math::student_t_lpdf<false>(seasonal1,
                                   stan::model::rvalue(prior_seasonal1,
                                     "prior_seasonal1",
                                     stan::model::index_uni(3)),
                                   stan::model::rvalue(prior_seasonal1,
                                     "prior_seasonal1",
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_seasonal1,
                                     "prior_seasonal1",
                                     stan::model::index_uni(2))));
                } else {
                  current_statement__ = 211;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_seasonal1,
                          "prior_seasonal1", stan::model::index_uni(4)), 5)) {
                    current_statement__ = 210;
                    lp_accum__.add(stan::math::cauchy_lpdf<false>(seasonal1,
                                     stan::model::rvalue(prior_seasonal1,
                                       "prior_seasonal1",
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_seasonal1,
                                       "prior_seasonal1",
                                       stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 209;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_seasonal1,
                            "prior_seasonal1", stan::model::index_uni(4)), 6)) {
                      current_statement__ = 208;
                      lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                                       seasonal1,
                                       stan::model::rvalue(prior_seasonal1,
                                         "prior_seasonal1",
                                         stan::model::index_uni(1)),
                                       stan::model::rvalue(prior_seasonal1,
                                         "prior_seasonal1",
                                         stan::model::index_uni(2))));
                    } else {
                      current_statement__ = 207;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_seasonal1,
                              "prior_seasonal1", stan::model::index_uni(4)),
                            7)) {
                        current_statement__ = 206;
                        lp_accum__.add(stan::math::inv_chi_square_lpdf<
                                         false>(seasonal1,
                                         stan::model::rvalue(prior_seasonal1,
                                           "prior_seasonal1",
                                           stan::model::index_uni(3))));
                      } else {
                        current_statement__ = 205;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_seasonal1,
                                "prior_seasonal1", stan::model::index_uni(4)),
                              8)) {
                          current_statement__ = 204;
                          lp_accum__.add(-(stan::math::log(sigma0)));
                        } else {
                          current_statement__ = 203;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_seasonal1,
                                  "prior_seasonal1",
                                  stan::model::index_uni(4)), 9)) {
                            current_statement__ = 202;
                            lp_accum__.add(stan::math::gamma_lpdf<false>(
                                             seasonal1,
                                             stan::model::rvalue(
                                               prior_seasonal1,
                                               "prior_seasonal1",
                                               stan::model::index_uni(1)),
                                             stan::model::rvalue(
                                               prior_seasonal1,
                                               "prior_seasonal1",
                                               stan::model::index_uni(2))));
                          } else {
                            current_statement__ = 201;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_seasonal1,
                                    "prior_seasonal1",
                                    stan::model::index_uni(4)), 10)) {
                              current_statement__ = 200;
                              lp_accum__.add(stan::math::exponential_lpdf<
                                               false>(seasonal1,
                                               stan::model::rvalue(
                                                 prior_seasonal1,
                                                 "prior_seasonal1",
                                                 stan::model::index_uni(2))));
                            } else {
                              current_statement__ = 199;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_seasonal1,
                                      "prior_seasonal1",
                                      stan::model::index_uni(4)), 11)) {
                                current_statement__ = 198;
                                lp_accum__.add(stan::math::chi_square_lpdf<
                                                 false>(seasonal1,
                                                 stan::model::rvalue(
                                                   prior_seasonal1,
                                                   "prior_seasonal1",
                                                   stan::model::index_uni(3))));
                              } else {
                                current_statement__ = 197;
                                if (stan::math::logical_eq(
                                      stan::model::rvalue(prior_seasonal1,
                                        "prior_seasonal1",
                                        stan::model::index_uni(4)), 12)) {
                                  current_statement__ = 196;
                                  lp_accum__.add(stan::math::double_exponential_lpdf<
                                                   false>(seasonal1,
                                                   stan::model::rvalue(
                                                     prior_seasonal1,
                                                     "prior_seasonal1",
                                                     stan::model::index_uni(1)),
                                                   stan::model::rvalue(
                                                     prior_seasonal1,
                                                     "prior_seasonal1",
                                                     stan::model::index_uni(2))));
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 251;
        if (stan::math::logical_eq(genT, 1)) {
          current_statement__ = 246;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_dfv, "prior_dfv",
                  stan::model::index_uni(4)), 1)) {
            current_statement__ = 245;
            lp_accum__.add(stan::math::normal_lpdf<false>(
                             stan::model::rvalue(v, "v",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_dfv, "prior_dfv",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_dfv, "prior_dfv",
                               stan::model::index_uni(2))));
          } else {
            current_statement__ = 244;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_dfv, "prior_dfv",
                    stan::model::index_uni(4)), 2)) {
              current_statement__ = 243;
              lp_accum__.add(stan::math::beta_lpdf<false>(
                               stan::model::rvalue(v, "v",
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_dfv, "prior_dfv",
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_dfv, "prior_dfv",
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 242;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_dfv, "prior_dfv",
                      stan::model::index_uni(4)), 3)) {
                current_statement__ = 241;
                lp_accum__.add(stan::math::uniform_lpdf<false>(
                                 stan::model::rvalue(v, "v",
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_dfv, "prior_dfv",
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_dfv, "prior_dfv",
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 240;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_dfv, "prior_dfv",
                        stan::model::index_uni(4)), 4)) {
                  current_statement__ = 239;
                  lp_accum__.add(stan::math::student_t_lpdf<false>(
                                   stan::model::rvalue(v, "v",
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_dfv,
                                     "prior_dfv", stan::model::index_uni(3)),
                                   stan::model::rvalue(prior_dfv,
                                     "prior_dfv", stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_dfv,
                                     "prior_dfv", stan::model::index_uni(2))));
                } else {
                  current_statement__ = 238;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_dfv, "prior_dfv",
                          stan::model::index_uni(4)), 5)) {
                    current_statement__ = 237;
                    lp_accum__.add(stan::math::cauchy_lpdf<false>(
                                     stan::model::rvalue(v, "v",
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_dfv,
                                       "prior_dfv", stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_dfv,
                                       "prior_dfv", stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 236;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_dfv, "prior_dfv",
                            stan::model::index_uni(4)), 6)) {
                      current_statement__ = 235;
                      lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                                       stan::model::rvalue(v, "v",
                                         stan::model::index_uni(1)),
                                       stan::model::rvalue(prior_dfv,
                                         "prior_dfv",
                                         stan::model::index_uni(1)),
                                       stan::model::rvalue(prior_dfv,
                                         "prior_dfv",
                                         stan::model::index_uni(2))));
                    } else {
                      current_statement__ = 234;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_dfv, "prior_dfv",
                              stan::model::index_uni(4)), 7)) {
                        current_statement__ = 233;
                        lp_accum__.add(stan::math::inv_chi_square_lpdf<
                                         false>(
                                         stan::model::rvalue(v, "v",
                                           stan::model::index_uni(1)),
                                         stan::model::rvalue(prior_dfv,
                                           "prior_dfv",
                                           stan::model::index_uni(3))));
                      } else {
                        current_statement__ = 232;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_dfv, "prior_dfv",
                                stan::model::index_uni(4)), 8)) {
                          current_statement__ = 231;
                          lp_accum__.add(stan::math::log(
                                           Jpv(
                                             stan::model::rvalue(v, "v",
                                               stan::model::index_uni(1)),
                                             pstream__)));
                        } else {
                          current_statement__ = 230;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_dfv, "prior_dfv",
                                  stan::model::index_uni(4)), 9)) {
                            current_statement__ = 229;
                            lp_accum__.add(stan::math::gamma_lpdf<false>(
                                             stan::model::rvalue(v, "v",
                                               stan::model::index_uni(1)),
                                             stan::model::rvalue(prior_dfv,
                                               "prior_dfv",
                                               stan::model::index_uni(1)),
                                             stan::model::rvalue(prior_dfv,
                                               "prior_dfv",
                                               stan::model::index_uni(2))));
                          } else {
                            current_statement__ = 228;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_dfv, "prior_dfv",
                                    stan::model::index_uni(4)), 10)) {
                              current_statement__ = 227;
                              lp_accum__.add(stan::math::exponential_lpdf<
                                               false>(
                                               stan::model::rvalue(v, "v",
                                                 stan::model::index_uni(1)),
                                               stan::model::rvalue(prior_dfv,
                                                 "prior_dfv",
                                                 stan::model::index_uni(2))));
                            } else {
                              current_statement__ = 226;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_dfv,
                                      "prior_dfv", stan::model::index_uni(4)),
                                    11)) {
                                current_statement__ = 225;
                                lp_accum__.add(stan::math::chi_square_lpdf<
                                                 false>(
                                                 stan::model::rvalue(v, "v",
                                                   stan::model::index_uni(1)),
                                                 stan::model::rvalue(
                                                   prior_dfv, "prior_dfv",
                                                   stan::model::index_uni(3))));
                              } else {
                                current_statement__ = 224;
                                if (stan::math::logical_eq(
                                      stan::model::rvalue(prior_dfv,
                                        "prior_dfv",
                                        stan::model::index_uni(4)), 12)) {
                                  current_statement__ = 223;
                                  lp_accum__.add(stan::math::double_exponential_lpdf<
                                                   false>(
                                                   stan::model::rvalue(v,
                                                     "v",
                                                     stan::model::index_uni(1)),
                                                   stan::model::rvalue(
                                                     prior_dfv, "prior_dfv",
                                                     stan::model::index_uni(1)),
                                                   stan::model::rvalue(
                                                     prior_dfv, "prior_dfv",
                                                     stan::model::index_uni(2))));
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          current_statement__ = 247;
          lp_accum__.add(stan::math::gamma_lpdf<false>(
                           stan::model::rvalue(v, "v",
                             stan::model::index_uni(1)), 2, 0.1));
          current_statement__ = 248;
          lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                           stan::model::rvalue(lambda, "lambda",
                             stan::model::index_uni(1)),
                           (stan::model::rvalue(v, "v",
                              stan::model::index_uni(1)) / 2),
                           (stan::model::rvalue(v, "v",
                              stan::model::index_uni(1)) / 2)));
          current_statement__ = 249;
          lp_accum__.add(stan::math::normal_lpdf<false>(epsilon, 0,
                           (stan::model::rvalue(v1, "v1",
                              stan::model::index_uni(1)) * sigma0)));
        } else {
          current_statement__ = 222;
          lp_accum__.add(stan::math::normal_lpdf<false>(epsilon, 0, sigma0));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "model_ets_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto breg =
        in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(d1);
      current_statement__ = 2;
      auto sigma0 =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 3;
      auto level =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      current_statement__ = 4;
      auto trend =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__,
          is_td);
      current_statement__ = 5;
      auto damped =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__,
          is_dp);
      current_statement__ = 6;
      auto seasonal =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, 1, lp__,
          is_ss);
      current_statement__ = 7;
      auto v =
        in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__,-1,1>,
          jacobian__>(2.01, lp__, v_1dim__);
      current_statement__ = 8;
      auto lambda =
        in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__,-1,1>,
          jacobian__>(1, lp__, lambda_1dim__);
      current_statement__ = 9;
      auto level1 = in__.template read<local_scalar_t__>();
      current_statement__ = 10;
      auto trend1 =
        in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(is_td);
      current_statement__ = 11;
      auto seasonal1 =
        in__.template read<
          Eigen::Matrix<local_scalar_t__,-1,1>>(seasonal1_1dim__);
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> epsilon =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> l =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> b =
        Eigen::Matrix<double,-1,1>::Constant(b_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> s =
        Eigen::Matrix<double,-1,1>::Constant(s_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> v1 =
        Eigen::Matrix<double,-1,1>::Constant(v1_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(breg);
      out__.write(sigma0);
      out__.write(level);
      out__.write(trend);
      out__.write(damped);
      out__.write(seasonal);
      out__.write(v);
      out__.write(lambda);
      out__.write(level1);
      out__.write(trend1);
      out__.write(seasonal1);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 24;
      if (stan::math::logical_gt(d1, 0)) {
        current_statement__ = 23;
        stan::model::assign(mu, stan::math::multiply(xreg, breg),
          "assigning variable mu");
      } else {
        current_statement__ = 22;
        stan::model::assign(mu, stan::math::rep_vector(0, n),
          "assigning variable mu");
      }
      current_statement__ = 25;
      stan::model::assign(l, level1, "assigning variable l",
        stan::model::index_uni(1));
      current_statement__ = 26;
      stan::model::assign(mu,
        (stan::model::rvalue(mu, "mu", stan::model::index_uni(1)) + level1),
        "assigning variable mu", stan::model::index_uni(1));
      current_statement__ = 27;
      stan::model::assign(epsilon,
        (stan::model::rvalue(y, "y", stan::model::index_uni(1)) -
        stan::model::rvalue(mu, "mu", stan::model::index_uni(1))),
        "assigning variable epsilon", stan::model::index_uni(1));
      current_statement__ = 29;
      if (stan::math::logical_eq(is_td, 1)) {
        current_statement__ = 28;
        stan::model::assign(b,
          stan::model::rvalue(trend1, "trend1", stan::model::index_uni(1)),
          "assigning variable b", stan::model::index_uni(1));
      }
      current_statement__ = 32;
      if (stan::math::logical_eq(is_ss, 1)) {
        current_statement__ = 31;
        for (int i = 1; i <= m; ++i) {
          current_statement__ = 30;
          stan::model::assign(s,
            stan::model::rvalue(seasonal1, "seasonal1",
              stan::model::index_uni(i)), "assigning variable s",
            stan::model::index_uni(i));
        }
      }
      current_statement__ = 34;
      if (stan::math::logical_eq(genT, 1)) {
        current_statement__ = 33;
        stan::model::assign(v1,
          stan::math::sqrt(
            (((stan::model::rvalue(v, "v", stan::model::index_uni(1)) - 2) *
            stan::model::rvalue(lambda, "lambda", stan::model::index_uni(1)))
            / stan::model::rvalue(v, "v", stan::model::index_uni(1)))),
          "assigning variable v1", stan::model::index_uni(1));
      }
      current_statement__ = 55;
      for (int i = 2; i <= n; ++i) {
        current_statement__ = 35;
        stan::model::assign(l, ((level *
          (stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
          stan::model::rvalue(mu, "mu", stan::model::index_uni(i)))) + ((1 -
          level) *
          stan::model::rvalue(l, "l", stan::model::index_uni((i - 1))))),
          "assigning variable l", stan::model::index_uni(i));
        current_statement__ = 37;
        if ((stan::math::primitive_value(stan::math::logical_eq(is_ss, 1)) &&
            stan::math::primitive_value(stan::math::logical_gt(i, m)))) {
          current_statement__ = 36;
          stan::model::assign(l,
            (stan::model::rvalue(l, "l", stan::model::index_uni(i)) +
            (-(level) *
            stan::model::rvalue(s, "s", stan::model::index_uni((i - m))))),
            "assigning variable l", stan::model::index_uni(i));
        }
        current_statement__ = 38;
        stan::model::assign(mu,
          (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
          stan::model::rvalue(l, "l", stan::model::index_uni((i - 1)))),
          "assigning variable mu", stan::model::index_uni(i));
        current_statement__ = 44;
        if (stan::math::logical_eq(is_td, 1)) {
          current_statement__ = 40;
          if (stan::math::logical_eq(is_dp, 1)) {
            current_statement__ = 39;
            stan::model::assign(b,
              (stan::model::rvalue(damped, "damped",
                 stan::model::index_uni(1)) *
              stan::model::rvalue(b, "b", stan::model::index_uni((i - 1)))),
              "assigning variable b", stan::model::index_uni((i - 1)));
          }
          current_statement__ = 41;
          stan::model::assign(b,
            ((stan::model::rvalue(trend, "trend", stan::model::index_uni(1))
            * (stan::model::rvalue(l, "l", stan::model::index_uni(i)) -
            stan::model::rvalue(l, "l", stan::model::index_uni((i - 1))))) +
            ((1 -
            stan::model::rvalue(trend, "trend", stan::model::index_uni(1))) *
            stan::model::rvalue(b, "b", stan::model::index_uni((i - 1))))),
            "assigning variable b", stan::model::index_uni(i));
          current_statement__ = 42;
          stan::model::assign(mu,
            (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
            stan::model::rvalue(b, "b", stan::model::index_uni((i - 1)))),
            "assigning variable mu", stan::model::index_uni(i));
        }
        current_statement__ = 52;
        if (stan::math::logical_eq(is_ss, 1)) {
          current_statement__ = 50;
          if (stan::math::logical_gt(i, m)) {
            current_statement__ = 45;
            stan::model::assign(s,
              ((stan::model::rvalue(seasonal, "seasonal",
                  stan::model::index_uni(1)) *
              (stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
              stan::model::rvalue(l, "l", stan::model::index_uni(i)))) + ((1
              -
              stan::model::rvalue(seasonal, "seasonal",
                stan::model::index_uni(1))) *
              stan::model::rvalue(s, "s", stan::model::index_uni((i - m))))),
              "assigning variable s", stan::model::index_uni(i));
            current_statement__ = 47;
            if (stan::math::logical_eq(is_td, 1)) {
              current_statement__ = 46;
              stan::model::assign(s,
                (stan::model::rvalue(s, "s", stan::model::index_uni(i)) +
                (-(stan::model::rvalue(seasonal, "seasonal",
                     stan::model::index_uni(1))) *
                stan::model::rvalue(b, "b", stan::model::index_uni(i)))),
                "assigning variable s", stan::model::index_uni(i));
            }
            current_statement__ = 48;
            stan::model::assign(mu,
              (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
              stan::model::rvalue(s, "s", stan::model::index_uni((i - m)))),
              "assigning variable mu", stan::model::index_uni(i));
          }
        }
        current_statement__ = 53;
        stan::model::assign(epsilon,
          (stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
          stan::model::rvalue(mu, "mu", stan::model::index_uni(i))),
          "assigning variable epsilon", stan::model::index_uni(i));
      }
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "v1", v1, 1);
      if (emit_transformed_parameters__) {
        out__.write(mu);
        out__.write(epsilon);
        out__.write(l);
        out__.write(b);
        out__.write(s);
        out__.write(v1);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      double loglik = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 18;
      loglik = 0;
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> fit =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> residuals =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 66;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 64;
        if (stan::math::logical_eq(genT, 1)) {
          current_statement__ = 60;
          stan::model::assign(residuals,
            stan::math::student_t_rng(
              stan::model::rvalue(v, "v", stan::model::index_uni(1)),
              stan::model::rvalue(epsilon, "epsilon",
                stan::model::index_uni(i)), sigma0, base_rng__),
            "assigning variable residuals", stan::model::index_uni(i));
          current_statement__ = 61;
          stan::model::assign(log_lik,
            stan::math::student_t_lpdf<false>(
              stan::model::rvalue(y, "y", stan::model::index_uni(i)),
              stan::model::rvalue(v, "v", stan::model::index_uni(1)),
              stan::model::rvalue(mu, "mu", stan::model::index_uni(i)),
              sigma0), "assigning variable log_lik",
            stan::model::index_uni(i));
          current_statement__ = 62;
          loglik = (loglik +
            stan::model::rvalue(log_lik, "log_lik", stan::model::index_uni(i)));
        } else {
          current_statement__ = 56;
          stan::model::assign(residuals,
            stan::math::normal_rng(
              stan::model::rvalue(epsilon, "epsilon",
                stan::model::index_uni(i)), sigma0, base_rng__),
            "assigning variable residuals", stan::model::index_uni(i));
          current_statement__ = 57;
          stan::model::assign(log_lik,
            stan::math::normal_lpdf<false>(
              stan::model::rvalue(y, "y", stan::model::index_uni(i)),
              stan::model::rvalue(mu, "mu", stan::model::index_uni(i)),
              sigma0), "assigning variable log_lik",
            stan::model::index_uni(i));
          current_statement__ = 58;
          loglik = (loglik +
            stan::model::rvalue(log_lik, "log_lik", stan::model::index_uni(i)));
        }
      }
      current_statement__ = 67;
      stan::model::assign(fit, stan::math::subtract(y, residuals),
        "assigning variable fit");
      out__.write(loglik);
      out__.write(log_lik);
      out__.write(fit);
      out__.write(residuals);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> breg =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d1, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(breg,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(d1),
        "assigning variable breg");
      out__.write(breg);
      local_scalar_t__ sigma0 = DUMMY_VAR__;
      current_statement__ = 2;
      sigma0 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma0);
      local_scalar_t__ level = DUMMY_VAR__;
      current_statement__ = 3;
      level = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, level);
      Eigen::Matrix<local_scalar_t__,-1,1> trend =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(is_td, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(trend,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(is_td),
        "assigning variable trend");
      out__.write_free_lub(0, 1, trend);
      Eigen::Matrix<local_scalar_t__,-1,1> damped =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(is_dp, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(damped,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(is_dp),
        "assigning variable damped");
      out__.write_free_lub(0, 1, damped);
      Eigen::Matrix<local_scalar_t__,-1,1> seasonal =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(is_ss, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(seasonal,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(is_ss),
        "assigning variable seasonal");
      out__.write_free_lub(0, 1, seasonal);
      Eigen::Matrix<local_scalar_t__,-1,1> v =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(v_1dim__, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(v,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(v_1dim__),
        "assigning variable v");
      out__.write_free_lb(2.01, v);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda_1dim__,
          DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(lambda,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(lambda_1dim__),
        "assigning variable lambda");
      out__.write_free_lb(1, lambda);
      local_scalar_t__ level1 = DUMMY_VAR__;
      current_statement__ = 9;
      level1 = in__.read<local_scalar_t__>();
      out__.write(level1);
      Eigen::Matrix<local_scalar_t__,-1,1> trend1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(is_td, DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(trend1,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(is_td),
        "assigning variable trend1");
      out__.write(trend1);
      Eigen::Matrix<local_scalar_t__,-1,1> seasonal1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(seasonal1_1dim__,
          DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(seasonal1,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(seasonal1_1dim__),
        "assigning variable seasonal1");
      out__.write(seasonal1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "breg", "double",
        std::vector<size_t>{static_cast<size_t>(d1)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "sigma0", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "level", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "trend", "double",
        std::vector<size_t>{static_cast<size_t>(is_td)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "damped", "double",
        std::vector<size_t>{static_cast<size_t>(is_dp)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "seasonal",
        "double", std::vector<size_t>{static_cast<size_t>(is_ss)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "v", "double",
        std::vector<size_t>{static_cast<size_t>(v_1dim__)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "lambda", "double",
        std::vector<size_t>{static_cast<size_t>(lambda_1dim__)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "level1", "double",
        std::vector<size_t>{});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "trend1", "double",
        std::vector<size_t>{static_cast<size_t>(is_td)});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization", "seasonal1",
        "double", std::vector<size_t>{static_cast<size_t>(seasonal1_1dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> breg =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d1, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> breg_flat__;
        current_statement__ = 1;
        breg_flat__ = context__.vals_r("breg");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= d1; ++sym1__) {
          stan::model::assign(breg, breg_flat__[(pos__ - 1)],
            "assigning variable breg", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(breg);
      local_scalar_t__ sigma0 = DUMMY_VAR__;
      current_statement__ = 2;
      sigma0 = context__.vals_r("sigma0")[(1 - 1)];
      out__.write_free_lb(0, sigma0);
      local_scalar_t__ level = DUMMY_VAR__;
      current_statement__ = 3;
      level = context__.vals_r("level")[(1 - 1)];
      out__.write_free_lub(0, 1, level);
      Eigen::Matrix<local_scalar_t__,-1,1> trend =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(is_td, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> trend_flat__;
        current_statement__ = 4;
        trend_flat__ = context__.vals_r("trend");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= is_td; ++sym1__) {
          stan::model::assign(trend, trend_flat__[(pos__ - 1)],
            "assigning variable trend", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0, 1, trend);
      Eigen::Matrix<local_scalar_t__,-1,1> damped =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(is_dp, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> damped_flat__;
        current_statement__ = 5;
        damped_flat__ = context__.vals_r("damped");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= is_dp; ++sym1__) {
          stan::model::assign(damped, damped_flat__[(pos__ - 1)],
            "assigning variable damped", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0, 1, damped);
      Eigen::Matrix<local_scalar_t__,-1,1> seasonal =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(is_ss, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> seasonal_flat__;
        current_statement__ = 6;
        seasonal_flat__ = context__.vals_r("seasonal");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= is_ss; ++sym1__) {
          stan::model::assign(seasonal, seasonal_flat__[(pos__ - 1)],
            "assigning variable seasonal", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0, 1, seasonal);
      Eigen::Matrix<local_scalar_t__,-1,1> v =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(v_1dim__, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> v_flat__;
        current_statement__ = 7;
        v_flat__ = context__.vals_r("v");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= v_1dim__; ++sym1__) {
          stan::model::assign(v, v_flat__[(pos__ - 1)],
            "assigning variable v", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(2.01, v);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> lambda_flat__;
        current_statement__ = 8;
        lambda_flat__ = context__.vals_r("lambda");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
          stan::model::assign(lambda, lambda_flat__[(pos__ - 1)],
            "assigning variable lambda", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(1, lambda);
      local_scalar_t__ level1 = DUMMY_VAR__;
      current_statement__ = 9;
      level1 = context__.vals_r("level1")[(1 - 1)];
      out__.write(level1);
      Eigen::Matrix<local_scalar_t__,-1,1> trend1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(is_td, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> trend1_flat__;
        current_statement__ = 10;
        trend1_flat__ = context__.vals_r("trend1");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= is_td; ++sym1__) {
          stan::model::assign(trend1, trend1_flat__[(pos__ - 1)],
            "assigning variable trend1", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(trend1);
      Eigen::Matrix<local_scalar_t__,-1,1> seasonal1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(seasonal1_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> seasonal1_flat__;
        current_statement__ = 11;
        seasonal1_flat__ = context__.vals_r("seasonal1");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= seasonal1_1dim__; ++sym1__) {
          stan::model::assign(seasonal1, seasonal1_flat__[(pos__ - 1)],
            "assigning variable seasonal1", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(seasonal1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"breg", "sigma0", "level", "trend",
                "damped", "seasonal", "v", "lambda", "level1", "trend1",
                "seasonal1"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"mu", "epsilon", "l", "b", "s", "v1"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"loglik", "log_lik", "fit", "residuals"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    d1)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(is_td)},
                std::vector<size_t>{static_cast<size_t>(is_dp)},
                std::vector<size_t>{static_cast<size_t>(is_ss)},
                std::vector<size_t>{static_cast<size_t>(v_1dim__)},
                std::vector<size_t>{static_cast<size_t>(lambda_1dim__)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(is_td)},
                std::vector<size_t>{static_cast<size_t>(seasonal1_1dim__)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(b_1dim__)},
             std::vector<size_t>{static_cast<size_t>(s_1dim__)},
             std::vector<size_t>{static_cast<size_t>(v1_1dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(n)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= d1; ++sym1__) {
      param_names__.emplace_back(std::string() + "breg" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma0");
    param_names__.emplace_back(std::string() + "level");
    for (int sym1__ = 1; sym1__ <= is_td; ++sym1__) {
      param_names__.emplace_back(std::string() + "trend" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= is_dp; ++sym1__) {
      param_names__.emplace_back(std::string() + "damped" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= is_ss; ++sym1__) {
      param_names__.emplace_back(std::string() + "seasonal" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= v_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "v" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "level1");
    for (int sym1__ = 1; sym1__ <= is_td; ++sym1__) {
      param_names__.emplace_back(std::string() + "trend1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= seasonal1_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "seasonal1" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "epsilon" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "l" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= b_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "b" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= s_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "s" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= v1_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "v1" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "loglik");
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "fit" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "residuals" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= d1; ++sym1__) {
      param_names__.emplace_back(std::string() + "breg" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sigma0");
    param_names__.emplace_back(std::string() + "level");
    for (int sym1__ = 1; sym1__ <= is_td; ++sym1__) {
      param_names__.emplace_back(std::string() + "trend" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= is_dp; ++sym1__) {
      param_names__.emplace_back(std::string() + "damped" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= is_ss; ++sym1__) {
      param_names__.emplace_back(std::string() + "seasonal" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= v_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "v" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "level1");
    for (int sym1__ = 1; sym1__ <= is_td; ++sym1__) {
      param_names__.emplace_back(std::string() + "trend1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= seasonal1_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "seasonal1" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "epsilon" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "l" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= b_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "b" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= s_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "s" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= v1_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "v1" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "loglik");
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "fit" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "residuals" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"breg\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(d1) + "},\"block\":\"parameters\"},{\"name\":\"sigma0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"level\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"trend\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(is_td) + "},\"block\":\"parameters\"},{\"name\":\"damped\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(is_dp) + "},\"block\":\"parameters\"},{\"name\":\"seasonal\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(is_ss) + "},\"block\":\"parameters\"},{\"name\":\"v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(v_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lambda_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"level1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"trend1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(is_td) + "},\"block\":\"parameters\"},{\"name\":\"seasonal1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(seasonal1_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"l\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(b_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"s\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(s_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"v1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(v1_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"loglik\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"fit\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"residuals\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"breg\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(d1) + "},\"block\":\"parameters\"},{\"name\":\"sigma0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"level\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"trend\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(is_td) + "},\"block\":\"parameters\"},{\"name\":\"damped\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(is_dp) + "},\"block\":\"parameters\"},{\"name\":\"seasonal\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(is_ss) + "},\"block\":\"parameters\"},{\"name\":\"v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(v_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lambda_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"level1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"trend1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(is_td) + "},\"block\":\"parameters\"},{\"name\":\"seasonal1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(seasonal1_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"l\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(b_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"s\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(s_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"v1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(v1_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"loglik\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"fit\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"residuals\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((d1 + 1) + 1) + is_td) + is_dp) +
      is_ss) + v_1dim__) + lambda_1dim__) + 1) + is_td) + seasonal1_1dim__);
    const size_t num_transformed = emit_transformed_parameters * ((((((n + n)
      + n) + b_1dim__) + s_1dim__) + v1_1dim__));
    const size_t num_gen_quantities = emit_generated_quantities * ((((1 + n)
      + n) + n));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((d1 + 1) + 1) + is_td) + is_dp) +
      is_ss) + v_1dim__) + lambda_1dim__) + 1) + is_td) + seasonal1_1dim__);
    const size_t num_transformed = emit_transformed_parameters * ((((((n + n)
      + n) + b_1dim__) + s_1dim__) + v1_1dim__));
    const size_t num_gen_quantities = emit_generated_quantities * ((((1 + n)
      + n) + n));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_ets_namespace::model_ets;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_ets_namespace::profiles__;
}
#endif
#endif
