// Generated by rstantools.  Do not edit by hand.

/*
    Bforecast is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Bforecast is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Bforecast.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.36.0-91-ge511e97
#include <stan/model/model_header.hpp>
namespace model_SVM_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 219> locations_array__ =
  {" (found before start of program)",
  " (in 'SVM', line 18, column 2 to column 11)",
  " (in 'SVM', line 19, column 2 to column 13)",
  " (in 'SVM', line 20, column 2 to column 18)",
  " (in 'SVM', line 21, column 2 to column 34)",
  " (in 'SVM', line 22, column 2 to column 34)",
  " (in 'SVM', line 23, column 2 to column 31)",
  " (in 'SVM', line 24, column 2 to column 23)",
  " (in 'SVM', line 25, column 2 to column 17)",
  " (in 'SVM', line 29, column 2 to column 15)",
  " (in 'SVM', line 30, column 2 to column 15)",
  " (in 'SVM', line 31, column 2 to column 12)",
  " (in 'SVM', line 33, column 2 to column 15)",
  " (in 'SVM', line 34, column 2 to column 20)",
  " (in 'SVM', line 35, column 2 to column 28)",
  " (in 'SVM', line 152, column 2 to column 29)",
  " (in 'SVM', line 153, column 2 to column 16)",
  " (in 'SVM', line 154, column 2 to column 22)",
  " (in 'SVM', line 155, column 2 to column 20)",
  " (in 'SVM', line 156, column 2 to column 18)",
  " (in 'SVM', line 41, column 9 to column 30)",
  " (in 'SVM', line 40, column 26 to column 41)",
  " (in 'SVM', line 40, column 4 to line 41, column 30)",
  " (in 'SVM', line 39, column 16 to line 42, column 3)",
  " (in 'SVM', line 39, column 2 to line 42, column 3)",
  " (in 'SVM', line 45, column 9 to column 28)",
  " (in 'SVM', line 44, column 27 to column 42)",
  " (in 'SVM', line 44, column 4 to line 45, column 28)",
  " (in 'SVM', line 43, column 15 to line 46, column 3)",
  " (in 'SVM', line 43, column 2 to line 46, column 3)",
  " (in 'SVM', line 48, column 7 to column 24)",
  " (in 'SVM', line 47, column 27 to column 40)",
  " (in 'SVM', line 47, column 2 to line 48, column 24)",
  " (in 'SVM', line 51, column 7 to column 28)",
  " (in 'SVM', line 50, column 13 to column 35)",
  " (in 'SVM', line 50, column 2 to line 51, column 28)",
  " (in 'SVM', line 53, column 2 to column 14)",
  " (in 'SVM', line 54, column 2 to column 16)",
  " (in 'SVM', line 55, column 2 to column 28)",
  " (in 'SVM', line 58, column 4 to column 16)",
  " (in 'SVM', line 59, column 4 to column 18)",
  " (in 'SVM', line 61, column 38 to column 60)",
  " (in 'SVM', line 61, column 28 to column 60)",
  " (in 'SVM', line 61, column 14 to column 60)",
  " (in 'SVM', line 61, column 4 to column 60)",
  " (in 'SVM', line 63, column 38 to column 66)",
  " (in 'SVM', line 63, column 28 to column 66)",
  " (in 'SVM', line 63, column 14 to column 66)",
  " (in 'SVM', line 63, column 4 to column 66)",
  " (in 'SVM', line 64, column 4 to column 30)",
  " (in 'SVM', line 66, column 4 to column 34)",
  " (in 'SVM', line 57, column 15 to line 67, column 3)",
  " (in 'SVM', line 57, column 2 to line 67, column 3)",
  " (in 'SVM', line 158, column 4 to column 51)",
  " (in 'SVM', line 159, column 4 to column 50)",
  " (in 'SVM', line 157, column 16 to line 160, column 3)",
  " (in 'SVM', line 157, column 2 to line 160, column 3)",
  " (in 'SVM', line 161, column 2 to column 22)",
  " (in 'SVM', line 162, column 2 to column 24)",
  " (in 'SVM', line 82, column 27 to column 92)",
  " (in 'SVM', line 82, column 7 to column 92)",
  " (in 'SVM', line 81, column 27 to column 71)",
  " (in 'SVM', line 81, column 7 to line 82, column 92)",
  " (in 'SVM', line 80, column 27 to column 72)",
  " (in 'SVM', line 80, column 7 to line 82, column 92)",
  " (in 'SVM', line 79, column 27 to column 79)",
  " (in 'SVM', line 79, column 7 to line 82, column 92)",
  " (in 'SVM', line 78, column 27 to column 50)",
  " (in 'SVM', line 78, column 7 to line 82, column 92)",
  " (in 'SVM', line 77, column 27 to column 75)",
  " (in 'SVM', line 77, column 7 to line 82, column 92)",
  " (in 'SVM', line 76, column 27 to column 83)",
  " (in 'SVM', line 76, column 7 to line 82, column 92)",
  " (in 'SVM', line 75, column 27 to column 80)",
  " (in 'SVM', line 75, column 7 to line 82, column 92)",
  " (in 'SVM', line 74, column 27 to column 96)",
  " (in 'SVM', line 74, column 7 to line 82, column 92)",
  " (in 'SVM', line 73, column 27 to column 81)",
  " (in 'SVM', line 73, column 7 to line 82, column 92)",
  " (in 'SVM', line 72, column 27 to column 78)",
  " (in 'SVM', line 72, column 7 to line 82, column 92)",
  " (in 'SVM', line 71, column 27 to column 80)",
  " (in 'SVM', line 71, column 2 to line 82, column 92)",
  " (in 'SVM', line 95, column 30 to column 104)",
  " (in 'SVM', line 95, column 7 to column 104)",
  " (in 'SVM', line 94, column 30 to column 80)",
  " (in 'SVM', line 94, column 7 to line 95, column 104)",
  " (in 'SVM', line 93, column 30 to column 81)",
  " (in 'SVM', line 93, column 7 to line 95, column 104)",
  " (in 'SVM', line 92, column 30 to column 91)",
  " (in 'SVM', line 92, column 7 to line 95, column 104)",
  " (in 'SVM', line 91, column 30 to column 53)",
  " (in 'SVM', line 91, column 7 to line 95, column 104)",
  " (in 'SVM', line 90, column 30 to column 84)",
  " (in 'SVM', line 90, column 7 to line 95, column 104)",
  " (in 'SVM', line 89, column 30 to column 95)",
  " (in 'SVM', line 89, column 7 to line 95, column 104)",
  " (in 'SVM', line 88, column 30 to column 92)",
  " (in 'SVM', line 88, column 7 to line 95, column 104)",
  " (in 'SVM', line 87, column 30 to column 111)",
  " (in 'SVM', line 87, column 7 to line 95, column 104)",
  " (in 'SVM', line 86, column 30 to column 93)",
  " (in 'SVM', line 86, column 7 to line 95, column 104)",
  " (in 'SVM', line 85, column 30 to column 90)",
  " (in 'SVM', line 85, column 7 to line 95, column 104)",
  " (in 'SVM', line 84, column 30 to column 92)",
  " (in 'SVM', line 84, column 2 to line 95, column 104)",
  " (in 'SVM', line 110, column 34 to column 109)",
  " (in 'SVM', line 110, column 11 to column 109)",
  " (in 'SVM', line 109, column 34 to column 85)",
  " (in 'SVM', line 109, column 11 to line 110, column 109)",
  " (in 'SVM', line 108, column 34 to column 86)",
  " (in 'SVM', line 108, column 11 to line 110, column 109)",
  " (in 'SVM', line 107, column 34 to column 96)",
  " (in 'SVM', line 107, column 11 to line 110, column 109)",
  " (in 'SVM', line 106, column 34 to column 57)",
  " (in 'SVM', line 106, column 11 to line 110, column 109)",
  " (in 'SVM', line 105, column 34 to column 89)",
  " (in 'SVM', line 105, column 11 to line 110, column 109)",
  " (in 'SVM', line 104, column 34 to column 100)",
  " (in 'SVM', line 104, column 11 to line 110, column 109)",
  " (in 'SVM', line 103, column 34 to column 97)",
  " (in 'SVM', line 103, column 11 to line 110, column 109)",
  " (in 'SVM', line 102, column 34 to column 116)",
  " (in 'SVM', line 102, column 11 to line 110, column 109)",
  " (in 'SVM', line 101, column 34 to column 98)",
  " (in 'SVM', line 101, column 11 to line 110, column 109)",
  " (in 'SVM', line 100, column 34 to column 95)",
  " (in 'SVM', line 100, column 11 to line 110, column 109)",
  " (in 'SVM', line 99, column 34 to column 97)",
  " (in 'SVM', line 99, column 6 to line 110, column 109)",
  " (in 'SVM', line 98, column 18 to line 111, column 5)",
  " (in 'SVM', line 98, column 4 to line 111, column 5)",
  " (in 'SVM', line 97, column 12 to line 112, column 3)",
  " (in 'SVM', line 97, column 2 to line 112, column 3)",
  " (in 'SVM', line 118, column 31 to column 90)",
  " (in 'SVM', line 118, column 10 to column 90)",
  " (in 'SVM', line 117, column 31 to column 92)",
  " (in 'SVM', line 117, column 10 to line 118, column 90)",
  " (in 'SVM', line 116, column 26 to column 84)",
  " (in 'SVM', line 116, column 5 to line 118, column 90)",
  " (in 'SVM', line 115, column 17 to line 119, column 5)",
  " (in 'SVM', line 115, column 4 to line 119, column 5)",
  " (in 'SVM', line 114, column 11 to line 120, column 3)",
  " (in 'SVM', line 114, column 2 to line 120, column 3)",
  " (in 'SVM', line 126, column 32 to column 91)",
  " (in 'SVM', line 126, column 11 to column 91)",
  " (in 'SVM', line 125, column 32 to column 93)",
  " (in 'SVM', line 125, column 11 to line 126, column 91)",
  " (in 'SVM', line 124, column 27 to column 85)",
  " (in 'SVM', line 124, column 6 to line 126, column 91)",
  " (in 'SVM', line 123, column 17 to line 127, column 5)",
  " (in 'SVM', line 123, column 4 to line 127, column 5)",
  " (in 'SVM', line 122, column 11 to line 128, column 3)",
  " (in 'SVM', line 122, column 2 to line 128, column 3)",
  " (in 'SVM', line 141, column 31 to column 106)",
  " (in 'SVM', line 141, column 7 to column 106)",
  " (in 'SVM', line 140, column 31 to column 81)",
  " (in 'SVM', line 140, column 7 to line 141, column 106)",
  " (in 'SVM', line 139, column 31 to column 82)",
  " (in 'SVM', line 139, column 7 to line 141, column 106)",
  " (in 'SVM', line 138, column 31 to column 93)",
  " (in 'SVM', line 138, column 7 to line 141, column 106)",
  " (in 'SVM', line 137, column 31 to column 54)",
  " (in 'SVM', line 137, column 7 to line 141, column 106)",
  " (in 'SVM', line 136, column 31 to column 85)",
  " (in 'SVM', line 136, column 7 to line 141, column 106)",
  " (in 'SVM', line 135, column 31 to column 97)",
  " (in 'SVM', line 135, column 7 to line 141, column 106)",
  " (in 'SVM', line 134, column 31 to column 94)",
  " (in 'SVM', line 134, column 7 to line 141, column 106)",
  " (in 'SVM', line 133, column 31 to column 114)",
  " (in 'SVM', line 133, column 7 to line 141, column 106)",
  " (in 'SVM', line 132, column 31 to column 95)",
  " (in 'SVM', line 132, column 7 to line 141, column 106)",
  " (in 'SVM', line 131, column 31 to column 92)",
  " (in 'SVM', line 131, column 7 to line 141, column 106)",
  " (in 'SVM', line 130, column 31 to column 94)",
  " (in 'SVM', line 130, column 2 to line 141, column 106)",
  " (in 'SVM', line 145, column 30 to column 92)",
  " (in 'SVM', line 145, column 7 to column 92)",
  " (in 'SVM', line 144, column 30 to column 89)",
  " (in 'SVM', line 144, column 7 to line 145, column 92)",
  " (in 'SVM', line 143, column 25 to column 86)",
  " (in 'SVM', line 143, column 2 to line 145, column 92)",
  " (in 'SVM', line 147, column 2 to column 34)",
  " (in 'SVM', line 149, column 2 to column 44)",
  " (in 'SVM', line 2, column 2 to column 17)",
  " (in 'SVM', line 3, column 2 to column 17)",
  " (in 'SVM', line 4, column 2 to column 17)",
  " (in 'SVM', line 5, column 2 to column 17)",
  " (in 'SVM', line 6, column 9 to column 10)",
  " (in 'SVM', line 6, column 11 to column 13)",
  " (in 'SVM', line 6, column 2 to column 20)",
  " (in 'SVM', line 7, column 9 to column 10)",
  " (in 'SVM', line 7, column 2 to column 14)",
  " (in 'SVM', line 9, column 2 to column 22)",
  " (in 'SVM', line 10, column 2 to column 25)",
  " (in 'SVM', line 11, column 9 to column 10)",
  " (in 'SVM', line 11, column 2 to column 23)",
  " (in 'SVM', line 12, column 9 to column 10)",
  " (in 'SVM', line 12, column 2 to column 23)",
  " (in 'SVM', line 13, column 2 to column 25)",
  " (in 'SVM', line 14, column 2 to column 26)",
  " (in 'SVM', line 15, column 9 to column 11)",
  " (in 'SVM', line 15, column 2 to column 26)",
  " (in 'SVM', line 20, column 9 to column 11)",
  " (in 'SVM', line 21, column 27 to column 28)",
  " (in 'SVM', line 22, column 27 to column 28)",
  " (in 'SVM', line 25, column 9 to column 10)",
  " (in 'SVM', line 29, column 9 to column 10)",
  " (in 'SVM', line 30, column 9 to column 10)",
  " (in 'SVM', line 33, column 9 to column 10)",
  " (in 'SVM', line 34, column 9 to column 10)",
  " (in 'SVM', line 35, column 9 to column 10)",
  " (in 'SVM', line 152, column 9 to column 10)",
  " (in 'SVM', line 153, column 9 to column 10)",
  " (in 'SVM', line 154, column 9 to column 10)",
  " (in 'SVM', line 155, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_SVM final : public model_base_crtp<model_SVM> {
private:
  int n;
  int p;
  int q;
  int d1;
  Eigen::Matrix<double,-1,-1> xreg_data__;
  Eigen::Matrix<double,-1,1> y_data__;
  Eigen::Matrix<double,-1,1> prior_mu0_data__;
  Eigen::Matrix<double,-1,1> prior_sigma0_data__;
  Eigen::Matrix<double,-1,-1> prior_ar_data__;
  Eigen::Matrix<double,-1,-1> prior_ma_data__;
  Eigen::Matrix<double,-1,-1> prior_beta_data__;
  Eigen::Matrix<double,-1,-1> prior_alpha_data__;
  Eigen::Matrix<double,-1,-1> prior_breg_data__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> xreg{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_mu0{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_sigma0{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> prior_ar{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> prior_ma{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> prior_beta{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> prior_alpha{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> prior_breg{nullptr, 0, 0};
public:
  ~model_SVM() {}
  model_SVM(stan::io::var_context& context__, unsigned int random_seed__ = 0,
            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    auto base_rng__ = stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_SVM_namespace::model_SVM";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 187;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      current_statement__ = 187;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 187;
      stan::math::check_greater_or_equal(function__, "n", n, 0);
      current_statement__ = 188;
      context__.validate_dims("data initialization", "p", "int",
        std::vector<size_t>{});
      p = std::numeric_limits<int>::min();
      current_statement__ = 188;
      p = context__.vals_i("p")[(1 - 1)];
      current_statement__ = 188;
      stan::math::check_greater_or_equal(function__, "p", p, 0);
      current_statement__ = 189;
      context__.validate_dims("data initialization", "q", "int",
        std::vector<size_t>{});
      q = std::numeric_limits<int>::min();
      current_statement__ = 189;
      q = context__.vals_i("q")[(1 - 1)];
      current_statement__ = 189;
      stan::math::check_greater_or_equal(function__, "q", q, 0);
      current_statement__ = 190;
      context__.validate_dims("data initialization", "d1", "int",
        std::vector<size_t>{});
      d1 = std::numeric_limits<int>::min();
      current_statement__ = 190;
      d1 = context__.vals_i("d1")[(1 - 1)];
      current_statement__ = 190;
      stan::math::check_greater_or_equal(function__, "d1", d1, 0);
      current_statement__ = 191;
      stan::math::validate_non_negative_index("xreg", "n", n);
      current_statement__ = 192;
      stan::math::validate_non_negative_index("xreg", "d1", d1);
      current_statement__ = 193;
      context__.validate_dims("data initialization", "xreg", "double",
        std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(d1)});
      xreg_data__ = Eigen::Matrix<double,-1,-1>::Constant(n, d1,
                      std::numeric_limits<double>::quiet_NaN());
      new (&xreg) Eigen::Map<Eigen::Matrix<double,-1,-1>>(xreg_data__.data(),
        n, d1);
      {
        std::vector<local_scalar_t__> xreg_flat__;
        current_statement__ = 193;
        xreg_flat__ = context__.vals_r("xreg");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= d1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            stan::model::assign(xreg, xreg_flat__[(pos__ - 1)],
              "assigning variable xreg", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 194;
      stan::math::validate_non_negative_index("y", "n", n);
      current_statement__ = 195;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(n,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), n);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 195;
        y_flat__ = context__.vals_r("y");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 196;
      context__.validate_dims("data initialization", "prior_mu0", "double",
        std::vector<size_t>{static_cast<size_t>(4)});
      prior_mu0_data__ = Eigen::Matrix<double,-1,1>::Constant(4,
                           std::numeric_limits<double>::quiet_NaN());
      new (&prior_mu0)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_mu0_data__.data(), 4);
      {
        std::vector<local_scalar_t__> prior_mu0_flat__;
        current_statement__ = 196;
        prior_mu0_flat__ = context__.vals_r("prior_mu0");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          stan::model::assign(prior_mu0, prior_mu0_flat__[(pos__ - 1)],
            "assigning variable prior_mu0", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 197;
      context__.validate_dims("data initialization", "prior_sigma0",
        "double", std::vector<size_t>{static_cast<size_t>(4)});
      prior_sigma0_data__ = Eigen::Matrix<double,-1,1>::Constant(4,
                              std::numeric_limits<double>::quiet_NaN());
      new (&prior_sigma0)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_sigma0_data__.data(), 4);
      {
        std::vector<local_scalar_t__> prior_sigma0_flat__;
        current_statement__ = 197;
        prior_sigma0_flat__ = context__.vals_r("prior_sigma0");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          stan::model::assign(prior_sigma0, prior_sigma0_flat__[(pos__ - 1)],
            "assigning variable prior_sigma0", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 198;
      stan::math::validate_non_negative_index("prior_ar", "p", p);
      current_statement__ = 199;
      context__.validate_dims("data initialization", "prior_ar", "double",
        std::vector<size_t>{static_cast<size_t>(p), static_cast<size_t>(4)});
      prior_ar_data__ = Eigen::Matrix<double,-1,-1>::Constant(p, 4,
                          std::numeric_limits<double>::quiet_NaN());
      new (&prior_ar)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(prior_ar_data__.data(), p, 4);
      {
        std::vector<local_scalar_t__> prior_ar_flat__;
        current_statement__ = 199;
        prior_ar_flat__ = context__.vals_r("prior_ar");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= p; ++sym2__) {
            stan::model::assign(prior_ar, prior_ar_flat__[(pos__ - 1)],
              "assigning variable prior_ar", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 200;
      stan::math::validate_non_negative_index("prior_ma", "q", q);
      current_statement__ = 201;
      context__.validate_dims("data initialization", "prior_ma", "double",
        std::vector<size_t>{static_cast<size_t>(q), static_cast<size_t>(4)});
      prior_ma_data__ = Eigen::Matrix<double,-1,-1>::Constant(q, 4,
                          std::numeric_limits<double>::quiet_NaN());
      new (&prior_ma)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(prior_ma_data__.data(), q, 4);
      {
        std::vector<local_scalar_t__> prior_ma_flat__;
        current_statement__ = 201;
        prior_ma_flat__ = context__.vals_r("prior_ma");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= q; ++sym2__) {
            stan::model::assign(prior_ma, prior_ma_flat__[(pos__ - 1)],
              "assigning variable prior_ma", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 202;
      context__.validate_dims("data initialization", "prior_beta", "double",
        std::vector<size_t>{static_cast<size_t>(1), static_cast<size_t>(4)});
      prior_beta_data__ = Eigen::Matrix<double,-1,-1>::Constant(1, 4,
                            std::numeric_limits<double>::quiet_NaN());
      new (&prior_beta)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(prior_beta_data__.data(), 1,
        4);
      {
        std::vector<local_scalar_t__> prior_beta_flat__;
        current_statement__ = 202;
        prior_beta_flat__ = context__.vals_r("prior_beta");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            stan::model::assign(prior_beta, prior_beta_flat__[(pos__ - 1)],
              "assigning variable prior_beta",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 203;
      context__.validate_dims("data initialization", "prior_alpha", "double",
        std::vector<size_t>{static_cast<size_t>(1), static_cast<size_t>(4)});
      prior_alpha_data__ = Eigen::Matrix<double,-1,-1>::Constant(1, 4,
                             std::numeric_limits<double>::quiet_NaN());
      new (&prior_alpha)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(prior_alpha_data__.data(), 1,
        4);
      {
        std::vector<local_scalar_t__> prior_alpha_flat__;
        current_statement__ = 203;
        prior_alpha_flat__ = context__.vals_r("prior_alpha");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            stan::model::assign(prior_alpha, prior_alpha_flat__[(pos__ - 1)],
              "assigning variable prior_alpha",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 204;
      stan::math::validate_non_negative_index("prior_breg", "d1", d1);
      current_statement__ = 205;
      context__.validate_dims("data initialization", "prior_breg", "double",
        std::vector<size_t>{static_cast<size_t>(d1), static_cast<size_t>(4)});
      prior_breg_data__ = Eigen::Matrix<double,-1,-1>::Constant(d1, 4,
                            std::numeric_limits<double>::quiet_NaN());
      new (&prior_breg)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(prior_breg_data__.data(), d1,
        4);
      {
        std::vector<local_scalar_t__> prior_breg_flat__;
        current_statement__ = 205;
        prior_breg_flat__ = context__.vals_r("prior_breg");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= d1; ++sym2__) {
            stan::model::assign(prior_breg, prior_breg_flat__[(pos__ - 1)],
              "assigning variable prior_breg",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 206;
      stan::math::validate_non_negative_index("breg", "d1", d1);
      current_statement__ = 207;
      stan::math::validate_non_negative_index("ar0", "p", p);
      current_statement__ = 208;
      stan::math::validate_non_negative_index("ma0", "q", q);
      current_statement__ = 209;
      stan::math::validate_non_negative_index("hstd", "n", n);
      current_statement__ = 210;
      stan::math::validate_non_negative_index("ar", "p", p);
      current_statement__ = 211;
      stan::math::validate_non_negative_index("ma", "q", q);
      current_statement__ = 212;
      stan::math::validate_non_negative_index("mu", "n", n);
      current_statement__ = 213;
      stan::math::validate_non_negative_index("epsilon", "n", n);
      current_statement__ = 214;
      stan::math::validate_non_negative_index("h", "n", n);
      current_statement__ = 215;
      stan::math::validate_non_negative_index("sigma", "n", n);
      current_statement__ = 216;
      stan::math::validate_non_negative_index("fit", "n", n);
      current_statement__ = 217;
      stan::math::validate_non_negative_index("residuals", "n", n);
      current_statement__ = 218;
      stan::math::validate_non_negative_index("log_lik", "n", n);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + d1 + p + q + 1 + 1 + n;
  }
  inline std::string model_name() const final {
    return "model_SVM";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.36.0-91-ge511e97",
             "stancflags = --allow-undefined"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ = "model_SVM_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto mu0 = in__.template read<local_scalar_t__>();
      current_statement__ = 2;
      auto alpha = in__.template read<local_scalar_t__>();
      current_statement__ = 3;
      auto breg =
        in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(d1);
      current_statement__ = 4;
      auto ar0 =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-(1), 1, lp__, p);
      current_statement__ = 5;
      auto ma0 =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-(1), 1, lp__, q);
      current_statement__ = 6;
      auto beta0 =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(-(1),
          1, lp__);
      current_statement__ = 7;
      auto sigma0 =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 8;
      auto hstd = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(n);
      Eigen::Matrix<local_scalar_t__,-1,1> ar =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> ma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(q, DUMMY_VAR__);
      local_scalar_t__ beta = DUMMY_VAR__;
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> epsilon =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> h =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(h, stan::math::multiply(hstd, sigma0),
        "assigning variable h");
      current_statement__ = 24;
      for (int i = 1; i <= p; ++i) {
        current_statement__ = 22;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_ar, "prior_ar",
                stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
          current_statement__ = 21;
          stan::model::assign(ar,
            stan::model::rvalue(ar0, "ar0", stan::model::index_uni(i)),
            "assigning variable ar", stan::model::index_uni(i));
        } else {
          current_statement__ = 20;
          stan::model::assign(ar, ((2 *
            stan::model::rvalue(ar0, "ar0", stan::model::index_uni(i))) - 1),
            "assigning variable ar", stan::model::index_uni(i));
        }
      }
      current_statement__ = 29;
      for (int i = 1; i <= q; ++i) {
        current_statement__ = 27;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_ma, "prior_ma",
                stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
          current_statement__ = 26;
          stan::model::assign(ma,
            stan::model::rvalue(ma0, "ma0", stan::model::index_uni(i)),
            "assigning variable ma", stan::model::index_uni(i));
        } else {
          current_statement__ = 25;
          stan::model::assign(ma, ((2 *
            stan::model::rvalue(ma0, "ma0", stan::model::index_uni(i))) - 1),
            "assigning variable ma", stan::model::index_uni(i));
        }
      }
      current_statement__ = 32;
      if (stan::math::logical_eq(
            stan::model::rvalue(prior_beta, "prior_beta",
              stan::model::index_uni(1), stan::model::index_uni(4)), 1)) {
        current_statement__ = 31;
        beta = beta0;
      } else {
        current_statement__ = 30;
        beta = ((2 * beta0) - 1);
      }
      current_statement__ = 35;
      if (stan::math::logical_gt(d1, 0)) {
        current_statement__ = 34;
        stan::model::assign(mu,
          stan::math::add(mu0, stan::math::multiply(xreg, breg)),
          "assigning variable mu");
      } else {
        current_statement__ = 33;
        stan::model::assign(mu, stan::math::rep_vector(0, n),
          "assigning variable mu");
      }
      current_statement__ = 36;
      stan::model::assign(mu, mu0, "assigning variable mu",
        stan::model::index_uni(1));
      current_statement__ = 37;
      stan::model::assign(h,
        (stan::model::rvalue(h, "h", stan::model::index_uni(1)) + alpha),
        "assigning variable h", stan::model::index_uni(1));
      current_statement__ = 38;
      stan::model::assign(epsilon,
        (stan::model::rvalue(y, "y", stan::model::index_uni(1)) -
        stan::model::rvalue(mu, "mu", stan::model::index_uni(1))),
        "assigning variable epsilon", stan::model::index_uni(1));
      current_statement__ = 52;
      for (int i = 2; i <= n; ++i) {
        current_statement__ = 39;
        stan::model::assign(mu, mu0, "assigning variable mu",
          stan::model::index_uni(i));
        current_statement__ = 40;
        stan::model::assign(h,
          (stan::model::rvalue(h, "h", stan::model::index_uni(i)) + alpha),
          "assigning variable h", stan::model::index_uni(i));
        current_statement__ = 44;
        if (stan::math::logical_gt(p, 0)) {
          current_statement__ = 43;
          for (int j = 1; j <= p; ++j) {
            current_statement__ = 42;
            if (stan::math::logical_gt(i, j)) {
              current_statement__ = 41;
              stan::model::assign(mu,
                (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
                (stan::model::rvalue(y, "y", stan::model::index_uni((i - j)))
                * stan::model::rvalue(ar, "ar", stan::model::index_uni(j)))),
                "assigning variable mu", stan::model::index_uni(i));
            }
          }
        }
        current_statement__ = 48;
        if (stan::math::logical_gt(q, 0)) {
          current_statement__ = 47;
          for (int j = 1; j <= q; ++j) {
            current_statement__ = 46;
            if (stan::math::logical_gt(i, j)) {
              current_statement__ = 45;
              stan::model::assign(mu,
                (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
                (stan::model::rvalue(epsilon, "epsilon",
                   stan::model::index_uni((i - j))) *
                stan::model::rvalue(ma, "ma", stan::model::index_uni(j)))),
                "assigning variable mu", stan::model::index_uni(i));
            }
          }
        }
        current_statement__ = 49;
        stan::model::assign(epsilon,
          (stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
          stan::model::rvalue(mu, "mu", stan::model::index_uni(i))),
          "assigning variable epsilon", stan::model::index_uni(i));
        current_statement__ = 50;
        stan::model::assign(h,
          (stan::model::rvalue(h, "h", stan::model::index_uni(i)) + (beta *
          (stan::model::rvalue(h, "h", stan::model::index_uni((i - 1))) -
          alpha))), "assigning variable h", stan::model::index_uni(i));
      }
      {
        current_statement__ = 82;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_mu0, "prior_mu0",
                stan::model::index_uni(4)), 1)) {
          current_statement__ = 81;
          lp_accum__.add(stan::math::normal_lpdf<false>(mu0,
                           stan::model::rvalue(prior_mu0, "prior_mu0",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(prior_mu0, "prior_mu0",
                             stan::model::index_uni(2))));
        } else {
          current_statement__ = 80;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_mu0, "prior_mu0",
                  stan::model::index_uni(4)), 2)) {
            current_statement__ = 79;
            lp_accum__.add(stan::math::beta_lpdf<false>(mu0,
                             stan::model::rvalue(prior_mu0, "prior_mu0",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_mu0, "prior_mu0",
                               stan::model::index_uni(2))));
          } else {
            current_statement__ = 78;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_mu0, "prior_mu0",
                    stan::model::index_uni(4)), 3)) {
              current_statement__ = 77;
              lp_accum__.add(stan::math::uniform_lpdf<false>(mu0,
                               stan::model::rvalue(prior_mu0, "prior_mu0",
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_mu0, "prior_mu0",
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 76;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_mu0, "prior_mu0",
                      stan::model::index_uni(4)), 4)) {
                current_statement__ = 75;
                lp_accum__.add(stan::math::student_t_lpdf<false>(mu0,
                                 stan::model::rvalue(prior_mu0, "prior_mu0",
                                   stan::model::index_uni(3)),
                                 stan::model::rvalue(prior_mu0, "prior_mu0",
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_mu0, "prior_mu0",
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 74;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_mu0, "prior_mu0",
                        stan::model::index_uni(4)), 5)) {
                  current_statement__ = 73;
                  lp_accum__.add(stan::math::cauchy_lpdf<false>(mu0,
                                   stan::model::rvalue(prior_mu0,
                                     "prior_mu0", stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_mu0,
                                     "prior_mu0", stan::model::index_uni(2))));
                } else {
                  current_statement__ = 72;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_mu0, "prior_mu0",
                          stan::model::index_uni(4)), 6)) {
                    current_statement__ = 71;
                    lp_accum__.add(stan::math::inv_gamma_lpdf<false>(mu0,
                                     stan::model::rvalue(prior_mu0,
                                       "prior_mu0", stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_mu0,
                                       "prior_mu0", stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 70;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_mu0, "prior_mu0",
                            stan::model::index_uni(4)), 7)) {
                      current_statement__ = 69;
                      lp_accum__.add(stan::math::inv_chi_square_lpdf<false>(
                                       mu0,
                                       stan::model::rvalue(prior_mu0,
                                         "prior_mu0",
                                         stan::model::index_uni(3))));
                    } else {
                      current_statement__ = 68;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_mu0, "prior_mu0",
                              stan::model::index_uni(4)), 8)) {
                        current_statement__ = 67;
                        lp_accum__.add(-(stan::math::log(sigma0)));
                      } else {
                        current_statement__ = 66;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_mu0, "prior_mu0",
                                stan::model::index_uni(4)), 9)) {
                          current_statement__ = 65;
                          lp_accum__.add(stan::math::gamma_lpdf<false>(mu0,
                                           stan::model::rvalue(prior_mu0,
                                             "prior_mu0",
                                             stan::model::index_uni(1)),
                                           stan::model::rvalue(prior_mu0,
                                             "prior_mu0",
                                             stan::model::index_uni(2))));
                        } else {
                          current_statement__ = 64;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_mu0, "prior_mu0",
                                  stan::model::index_uni(4)), 10)) {
                            current_statement__ = 63;
                            lp_accum__.add(stan::math::exponential_lpdf<
                                             false>(mu0,
                                             stan::model::rvalue(prior_mu0,
                                               "prior_mu0",
                                               stan::model::index_uni(2))));
                          } else {
                            current_statement__ = 62;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_mu0, "prior_mu0",
                                    stan::model::index_uni(4)), 11)) {
                              current_statement__ = 61;
                              lp_accum__.add(stan::math::chi_square_lpdf<
                                               false>(mu0,
                                               stan::model::rvalue(prior_mu0,
                                                 "prior_mu0",
                                                 stan::model::index_uni(3))));
                            } else {
                              current_statement__ = 60;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_mu0,
                                      "prior_mu0", stan::model::index_uni(4)),
                                    12)) {
                                current_statement__ = 59;
                                lp_accum__.add(stan::math::double_exponential_lpdf<
                                                 false>(mu0,
                                                 stan::model::rvalue(
                                                   prior_mu0, "prior_mu0",
                                                   stan::model::index_uni(1)),
                                                 stan::model::rvalue(
                                                   prior_mu0, "prior_mu0",
                                                   stan::model::index_uni(2))));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 106;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_sigma0, "prior_sigma0",
                stan::model::index_uni(4)), 1)) {
          current_statement__ = 105;
          lp_accum__.add(stan::math::normal_lpdf<false>(sigma0,
                           stan::model::rvalue(prior_sigma0, "prior_sigma0",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(prior_sigma0, "prior_sigma0",
                             stan::model::index_uni(2))));
        } else {
          current_statement__ = 104;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_sigma0, "prior_sigma0",
                  stan::model::index_uni(4)), 2)) {
            current_statement__ = 103;
            lp_accum__.add(stan::math::beta_lpdf<false>(sigma0,
                             stan::model::rvalue(prior_sigma0,
                               "prior_sigma0", stan::model::index_uni(1)),
                             stan::model::rvalue(prior_sigma0,
                               "prior_sigma0", stan::model::index_uni(2))));
          } else {
            current_statement__ = 102;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_sigma0, "prior_sigma0",
                    stan::model::index_uni(4)), 3)) {
              current_statement__ = 101;
              lp_accum__.add(stan::math::uniform_lpdf<false>(sigma0,
                               stan::model::rvalue(prior_sigma0,
                                 "prior_sigma0", stan::model::index_uni(1)),
                               stan::model::rvalue(prior_sigma0,
                                 "prior_sigma0", stan::model::index_uni(2))));
            } else {
              current_statement__ = 100;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_sigma0, "prior_sigma0",
                      stan::model::index_uni(4)), 4)) {
                current_statement__ = 99;
                lp_accum__.add(stan::math::student_t_lpdf<false>(sigma0,
                                 stan::model::rvalue(prior_sigma0,
                                   "prior_sigma0", stan::model::index_uni(3)),
                                 stan::model::rvalue(prior_sigma0,
                                   "prior_sigma0", stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_sigma0,
                                   "prior_sigma0", stan::model::index_uni(2))));
              } else {
                current_statement__ = 98;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_sigma0, "prior_sigma0",
                        stan::model::index_uni(4)), 5)) {
                  current_statement__ = 97;
                  lp_accum__.add(stan::math::cauchy_lpdf<false>(sigma0,
                                   stan::model::rvalue(prior_sigma0,
                                     "prior_sigma0",
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_sigma0,
                                     "prior_sigma0",
                                     stan::model::index_uni(2))));
                } else {
                  current_statement__ = 96;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_sigma0, "prior_sigma0",
                          stan::model::index_uni(4)), 6)) {
                    current_statement__ = 95;
                    lp_accum__.add(stan::math::inv_gamma_lpdf<false>(sigma0,
                                     stan::model::rvalue(prior_sigma0,
                                       "prior_sigma0",
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_sigma0,
                                       "prior_sigma0",
                                       stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 94;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_sigma0, "prior_sigma0",
                            stan::model::index_uni(4)), 7)) {
                      current_statement__ = 93;
                      lp_accum__.add(stan::math::inv_chi_square_lpdf<false>(
                                       sigma0,
                                       stan::model::rvalue(prior_sigma0,
                                         "prior_sigma0",
                                         stan::model::index_uni(3))));
                    } else {
                      current_statement__ = 92;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_sigma0, "prior_sigma0",
                              stan::model::index_uni(4)), 8)) {
                        current_statement__ = 91;
                        lp_accum__.add(-(stan::math::log(sigma0)));
                      } else {
                        current_statement__ = 90;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_sigma0,
                                "prior_sigma0", stan::model::index_uni(4)), 9)) {
                          current_statement__ = 89;
                          lp_accum__.add(stan::math::gamma_lpdf<false>(
                                           sigma0,
                                           stan::model::rvalue(prior_sigma0,
                                             "prior_sigma0",
                                             stan::model::index_uni(1)),
                                           stan::model::rvalue(prior_sigma0,
                                             "prior_sigma0",
                                             stan::model::index_uni(2))));
                        } else {
                          current_statement__ = 88;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_sigma0,
                                  "prior_sigma0", stan::model::index_uni(4)),
                                10)) {
                            current_statement__ = 87;
                            lp_accum__.add(stan::math::exponential_lpdf<
                                             false>(sigma0,
                                             stan::model::rvalue(
                                               prior_sigma0, "prior_sigma0",
                                               stan::model::index_uni(2))));
                          } else {
                            current_statement__ = 86;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_sigma0,
                                    "prior_sigma0", stan::model::index_uni(4)),
                                  11)) {
                              current_statement__ = 85;
                              lp_accum__.add(stan::math::chi_square_lpdf<
                                               false>(sigma0,
                                               stan::model::rvalue(
                                                 prior_sigma0,
                                                 "prior_sigma0",
                                                 stan::model::index_uni(3))));
                            } else {
                              current_statement__ = 84;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_sigma0,
                                      "prior_sigma0",
                                      stan::model::index_uni(4)), 12)) {
                                current_statement__ = 83;
                                lp_accum__.add(stan::math::double_exponential_lpdf<
                                                 false>(sigma0,
                                                 stan::model::rvalue(
                                                   prior_sigma0,
                                                   "prior_sigma0",
                                                   stan::model::index_uni(1)),
                                                 stan::model::rvalue(
                                                   prior_sigma0,
                                                   "prior_sigma0",
                                                   stan::model::index_uni(2))));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 134;
        if (stan::math::logical_gt(d1, 0)) {
          current_statement__ = 132;
          for (int i = 1; i <= d1; ++i) {
            current_statement__ = 130;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_breg, "prior_breg",
                    stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
              current_statement__ = 129;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(breg, "breg",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(prior_breg, "prior_breg",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_breg, "prior_breg",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 128;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_breg, "prior_breg",
                      stan::model::index_uni(i), stan::model::index_uni(4)),
                    2)) {
                current_statement__ = 127;
                lp_accum__.add(stan::math::beta_lpdf<false>(
                                 stan::model::rvalue(breg, "breg",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(prior_breg,
                                   "prior_breg", stan::model::index_uni(i),
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_breg,
                                   "prior_breg", stan::model::index_uni(i),
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 126;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_breg, "prior_breg",
                        stan::model::index_uni(i), stan::model::index_uni(4)),
                      3)) {
                  current_statement__ = 125;
                  lp_accum__.add(stan::math::uniform_lpdf<false>(
                                   stan::model::rvalue(breg, "breg",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(prior_breg,
                                     "prior_breg", stan::model::index_uni(i),
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_breg,
                                     "prior_breg", stan::model::index_uni(i),
                                     stan::model::index_uni(2))));
                } else {
                  current_statement__ = 124;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_breg, "prior_breg",
                          stan::model::index_uni(i),
                          stan::model::index_uni(4)), 4)) {
                    current_statement__ = 123;
                    lp_accum__.add(stan::math::student_t_lpdf<false>(
                                     stan::model::rvalue(breg, "breg",
                                       stan::model::index_uni(i)),
                                     stan::model::rvalue(prior_breg,
                                       "prior_breg",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(3)),
                                     stan::model::rvalue(prior_breg,
                                       "prior_breg",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_breg,
                                       "prior_breg",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 122;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_breg, "prior_breg",
                            stan::model::index_uni(i),
                            stan::model::index_uni(4)), 5)) {
                      current_statement__ = 121;
                      lp_accum__.add(stan::math::cauchy_lpdf<false>(
                                       stan::model::rvalue(breg, "breg",
                                         stan::model::index_uni(i)),
                                       stan::model::rvalue(prior_breg,
                                         "prior_breg",
                                         stan::model::index_uni(i),
                                         stan::model::index_uni(1)),
                                       stan::model::rvalue(prior_breg,
                                         "prior_breg",
                                         stan::model::index_uni(i),
                                         stan::model::index_uni(2))));
                    } else {
                      current_statement__ = 120;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_breg, "prior_breg",
                              stan::model::index_uni(i),
                              stan::model::index_uni(4)), 6)) {
                        current_statement__ = 119;
                        lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                                         stan::model::rvalue(breg, "breg",
                                           stan::model::index_uni(i)),
                                         stan::model::rvalue(prior_breg,
                                           "prior_breg",
                                           stan::model::index_uni(i),
                                           stan::model::index_uni(1)),
                                         stan::model::rvalue(prior_breg,
                                           "prior_breg",
                                           stan::model::index_uni(i),
                                           stan::model::index_uni(2))));
                      } else {
                        current_statement__ = 118;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_breg, "prior_breg",
                                stan::model::index_uni(i),
                                stan::model::index_uni(4)), 7)) {
                          current_statement__ = 117;
                          lp_accum__.add(stan::math::inv_chi_square_lpdf<
                                           false>(
                                           stan::model::rvalue(breg, "breg",
                                             stan::model::index_uni(i)),
                                           stan::model::rvalue(prior_breg,
                                             "prior_breg",
                                             stan::model::index_uni(i),
                                             stan::model::index_uni(3))));
                        } else {
                          current_statement__ = 116;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_breg, "prior_breg",
                                  stan::model::index_uni(i),
                                  stan::model::index_uni(4)), 8)) {
                            current_statement__ = 115;
                            lp_accum__.add(-(stan::math::log(sigma0)));
                          } else {
                            current_statement__ = 114;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_breg,
                                    "prior_breg", stan::model::index_uni(i),
                                    stan::model::index_uni(4)), 9)) {
                              current_statement__ = 113;
                              lp_accum__.add(stan::math::gamma_lpdf<false>(
                                               stan::model::rvalue(breg,
                                                 "breg",
                                                 stan::model::index_uni(i)),
                                               stan::model::rvalue(
                                                 prior_breg, "prior_breg",
                                                 stan::model::index_uni(i),
                                                 stan::model::index_uni(1)),
                                               stan::model::rvalue(
                                                 prior_breg, "prior_breg",
                                                 stan::model::index_uni(i),
                                                 stan::model::index_uni(2))));
                            } else {
                              current_statement__ = 112;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_breg,
                                      "prior_breg",
                                      stan::model::index_uni(i),
                                      stan::model::index_uni(4)), 10)) {
                                current_statement__ = 111;
                                lp_accum__.add(stan::math::exponential_lpdf<
                                                 false>(
                                                 stan::model::rvalue(breg,
                                                   "breg",
                                                   stan::model::index_uni(i)),
                                                 stan::model::rvalue(
                                                   prior_breg, "prior_breg",
                                                   stan::model::index_uni(i),
                                                   stan::model::index_uni(2))));
                              } else {
                                current_statement__ = 110;
                                if (stan::math::logical_eq(
                                      stan::model::rvalue(prior_breg,
                                        "prior_breg",
                                        stan::model::index_uni(i),
                                        stan::model::index_uni(4)), 11)) {
                                  current_statement__ = 109;
                                  lp_accum__.add(stan::math::chi_square_lpdf<
                                                   false>(
                                                   stan::model::rvalue(breg,
                                                     "breg",
                                                     stan::model::index_uni(i)),
                                                   stan::model::rvalue(
                                                     prior_breg,
                                                     "prior_breg",
                                                     stan::model::index_uni(i),
                                                     stan::model::index_uni(3))));
                                } else {
                                  current_statement__ = 108;
                                  if (stan::math::logical_eq(
                                        stan::model::rvalue(prior_breg,
                                          "prior_breg",
                                          stan::model::index_uni(i),
                                          stan::model::index_uni(4)), 12)) {
                                    current_statement__ = 107;
                                    lp_accum__.add(stan::math::double_exponential_lpdf<
                                                     false>(
                                                     stan::model::rvalue(
                                                       breg, "breg",
                                                       stan::model::index_uni(
                                                         i)),
                                                     stan::model::rvalue(
                                                       prior_breg,
                                                       "prior_breg",
                                                       stan::model::index_uni(
                                                         i),
                                                       stan::model::index_uni(
                                                         1)),
                                                     stan::model::rvalue(
                                                       prior_breg,
                                                       "prior_breg",
                                                       stan::model::index_uni(
                                                         i),
                                                       stan::model::index_uni(
                                                         2))));
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 144;
        if (stan::math::logical_gt(p, 0)) {
          current_statement__ = 142;
          for (int i = 1; i <= p; ++i) {
            current_statement__ = 140;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_ar, "prior_ar",
                    stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
              current_statement__ = 139;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(ar0, "ar0",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(prior_ar, "prior_ar",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_ar, "prior_ar",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 138;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_ar, "prior_ar",
                      stan::model::index_uni(i), stan::model::index_uni(4)),
                    2)) {
                current_statement__ = 137;
                lp_accum__.add(stan::math::beta_lpdf<false>(
                                 stan::math::abs(
                                   stan::model::rvalue(ar0, "ar0",
                                     stan::model::index_uni(i))),
                                 stan::model::rvalue(prior_ar, "prior_ar",
                                   stan::model::index_uni(i),
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_ar, "prior_ar",
                                   stan::model::index_uni(i),
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 136;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_ar, "prior_ar",
                        stan::model::index_uni(i), stan::model::index_uni(4)),
                      3)) {
                  current_statement__ = 135;
                  lp_accum__.add(stan::math::uniform_lpdf<false>(
                                   stan::model::rvalue(ar0, "ar0",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(prior_ar, "prior_ar",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_ar, "prior_ar",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(2))));
                }
              }
            }
          }
        }
        current_statement__ = 154;
        if (stan::math::logical_gt(q, 0)) {
          current_statement__ = 152;
          for (int i = 1; i <= q; ++i) {
            current_statement__ = 150;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_ma, "prior_ma",
                    stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
              current_statement__ = 149;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(ma0, "ma0",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(prior_ma, "prior_ma",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_ma, "prior_ma",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 148;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_ma, "prior_ma",
                      stan::model::index_uni(i), stan::model::index_uni(4)),
                    2)) {
                current_statement__ = 147;
                lp_accum__.add(stan::math::beta_lpdf<false>(
                                 stan::math::abs(
                                   stan::model::rvalue(ma0, "ma0",
                                     stan::model::index_uni(i))),
                                 stan::model::rvalue(prior_ma, "prior_ma",
                                   stan::model::index_uni(i),
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_ma, "prior_ma",
                                   stan::model::index_uni(i),
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 146;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_ma, "prior_ma",
                        stan::model::index_uni(i), stan::model::index_uni(4)),
                      3)) {
                  current_statement__ = 145;
                  lp_accum__.add(stan::math::uniform_lpdf<false>(
                                   stan::model::rvalue(ma0, "ma0",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(prior_ma, "prior_ma",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_ma, "prior_ma",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(2))));
                }
              }
            }
          }
        }
        current_statement__ = 178;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_alpha, "prior_alpha",
                stan::model::index_uni(1), stan::model::index_uni(4)), 1)) {
          current_statement__ = 177;
          lp_accum__.add(stan::math::normal_lpdf<false>(alpha,
                           stan::model::rvalue(prior_alpha, "prior_alpha",
                             stan::model::index_uni(1),
                             stan::model::index_uni(1)),
                           stan::model::rvalue(prior_alpha, "prior_alpha",
                             stan::model::index_uni(1),
                             stan::model::index_uni(2))));
        } else {
          current_statement__ = 176;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_alpha, "prior_alpha",
                  stan::model::index_uni(1), stan::model::index_uni(4)), 2)) {
            current_statement__ = 175;
            lp_accum__.add(stan::math::beta_lpdf<false>(alpha,
                             stan::model::rvalue(prior_alpha, "prior_alpha",
                               stan::model::index_uni(1),
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_alpha, "prior_alpha",
                               stan::model::index_uni(1),
                               stan::model::index_uni(2))));
          } else {
            current_statement__ = 174;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_alpha, "prior_alpha",
                    stan::model::index_uni(1), stan::model::index_uni(4)), 3)) {
              current_statement__ = 173;
              lp_accum__.add(stan::math::uniform_lpdf<false>(alpha,
                               stan::model::rvalue(prior_alpha,
                                 "prior_alpha", stan::model::index_uni(1),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_alpha,
                                 "prior_alpha", stan::model::index_uni(1),
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 172;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_alpha, "prior_alpha",
                      stan::model::index_uni(1), stan::model::index_uni(4)),
                    4)) {
                current_statement__ = 171;
                lp_accum__.add(stan::math::student_t_lpdf<false>(alpha,
                                 stan::model::rvalue(prior_alpha,
                                   "prior_alpha", stan::model::index_uni(1),
                                   stan::model::index_uni(3)),
                                 stan::model::rvalue(prior_alpha,
                                   "prior_alpha", stan::model::index_uni(1),
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_alpha,
                                   "prior_alpha", stan::model::index_uni(1),
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 170;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_alpha, "prior_alpha",
                        stan::model::index_uni(1), stan::model::index_uni(4)),
                      5)) {
                  current_statement__ = 169;
                  lp_accum__.add(stan::math::cauchy_lpdf<false>(alpha,
                                   stan::model::rvalue(prior_alpha,
                                     "prior_alpha",
                                     stan::model::index_uni(1),
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_alpha,
                                     "prior_alpha",
                                     stan::model::index_uni(1),
                                     stan::model::index_uni(2))));
                } else {
                  current_statement__ = 168;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_alpha, "prior_alpha",
                          stan::model::index_uni(1),
                          stan::model::index_uni(4)), 6)) {
                    current_statement__ = 167;
                    lp_accum__.add(stan::math::inv_gamma_lpdf<false>(alpha,
                                     stan::model::rvalue(prior_alpha,
                                       "prior_alpha",
                                       stan::model::index_uni(1),
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_alpha,
                                       "prior_alpha",
                                       stan::model::index_uni(1),
                                       stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 166;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_alpha, "prior_alpha",
                            stan::model::index_uni(1),
                            stan::model::index_uni(4)), 7)) {
                      current_statement__ = 165;
                      lp_accum__.add(stan::math::inv_chi_square_lpdf<false>(
                                       alpha,
                                       stan::model::rvalue(prior_alpha,
                                         "prior_alpha",
                                         stan::model::index_uni(1),
                                         stan::model::index_uni(3))));
                    } else {
                      current_statement__ = 164;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_alpha, "prior_alpha",
                              stan::model::index_uni(1),
                              stan::model::index_uni(4)), 8)) {
                        current_statement__ = 163;
                        lp_accum__.add(-(stan::math::log(sigma0)));
                      } else {
                        current_statement__ = 162;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_alpha, "prior_alpha",
                                stan::model::index_uni(1),
                                stan::model::index_uni(4)), 9)) {
                          current_statement__ = 161;
                          lp_accum__.add(stan::math::gamma_lpdf<false>(alpha,
                                           stan::model::rvalue(prior_alpha,
                                             "prior_alpha",
                                             stan::model::index_uni(1),
                                             stan::model::index_uni(1)),
                                           stan::model::rvalue(prior_alpha,
                                             "prior_alpha",
                                             stan::model::index_uni(1),
                                             stan::model::index_uni(2))));
                        } else {
                          current_statement__ = 160;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_alpha,
                                  "prior_alpha", stan::model::index_uni(1),
                                  stan::model::index_uni(4)), 10)) {
                            current_statement__ = 159;
                            lp_accum__.add(stan::math::exponential_lpdf<
                                             false>(alpha,
                                             stan::model::rvalue(prior_alpha,
                                               "prior_alpha",
                                               stan::model::index_uni(1),
                                               stan::model::index_uni(2))));
                          } else {
                            current_statement__ = 158;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_alpha,
                                    "prior_alpha", stan::model::index_uni(1),
                                    stan::model::index_uni(4)), 11)) {
                              current_statement__ = 157;
                              lp_accum__.add(stan::math::chi_square_lpdf<
                                               false>(alpha,
                                               stan::model::rvalue(
                                                 prior_alpha, "prior_alpha",
                                                 stan::model::index_uni(1),
                                                 stan::model::index_uni(3))));
                            } else {
                              current_statement__ = 156;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_alpha,
                                      "prior_alpha",
                                      stan::model::index_uni(1),
                                      stan::model::index_uni(4)), 12)) {
                                current_statement__ = 155;
                                lp_accum__.add(stan::math::double_exponential_lpdf<
                                                 false>(alpha,
                                                 stan::model::rvalue(
                                                   prior_alpha,
                                                   "prior_alpha",
                                                   stan::model::index_uni(1),
                                                   stan::model::index_uni(1)),
                                                 stan::model::rvalue(
                                                   prior_alpha,
                                                   "prior_alpha",
                                                   stan::model::index_uni(1),
                                                   stan::model::index_uni(2))));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 184;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_beta, "prior_beta",
                stan::model::index_uni(1), stan::model::index_uni(4)), 1)) {
          current_statement__ = 183;
          lp_accum__.add(stan::math::normal_lpdf<false>(beta0,
                           stan::model::rvalue(prior_beta, "prior_beta",
                             stan::model::index_uni(1),
                             stan::model::index_uni(1)),
                           stan::model::rvalue(prior_beta, "prior_beta",
                             stan::model::index_uni(1),
                             stan::model::index_uni(2))));
        } else {
          current_statement__ = 182;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_beta, "prior_beta",
                  stan::model::index_uni(1), stan::model::index_uni(4)), 2)) {
            current_statement__ = 181;
            lp_accum__.add(stan::math::beta_lpdf<false>(beta0,
                             stan::model::rvalue(prior_beta, "prior_beta",
                               stan::model::index_uni(1),
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_beta, "prior_beta",
                               stan::model::index_uni(1),
                               stan::model::index_uni(2))));
          } else {
            current_statement__ = 180;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_beta, "prior_beta",
                    stan::model::index_uni(1), stan::model::index_uni(4)), 3)) {
              current_statement__ = 179;
              lp_accum__.add(stan::math::uniform_lpdf<false>(beta0,
                               stan::model::rvalue(prior_beta, "prior_beta",
                                 stan::model::index_uni(1),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_beta, "prior_beta",
                                 stan::model::index_uni(1),
                                 stan::model::index_uni(2))));
            }
          }
        }
        current_statement__ = 185;
        lp_accum__.add(stan::math::normal_lpdf<false>(hstd, 0, 1));
        current_statement__ = 186;
        lp_accum__.add(stan::math::normal_lpdf<false>(epsilon, 0,
                         stan::math::exp(stan::math::divide(h, 2))));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ = "model_SVM_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto mu0 = in__.template read<local_scalar_t__>();
      current_statement__ = 2;
      auto alpha = in__.template read<local_scalar_t__>();
      current_statement__ = 3;
      auto breg =
        in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(d1);
      current_statement__ = 4;
      auto ar0 =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-(1), 1, lp__, p);
      current_statement__ = 5;
      auto ma0 =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-(1), 1, lp__, q);
      current_statement__ = 6;
      auto beta0 =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(-(1),
          1, lp__);
      current_statement__ = 7;
      auto sigma0 =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 8;
      auto hstd = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(n);
      Eigen::Matrix<local_scalar_t__,-1,1> ar =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> ma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(q, DUMMY_VAR__);
      local_scalar_t__ beta = DUMMY_VAR__;
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> epsilon =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> h =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(h, stan::math::multiply(hstd, sigma0),
        "assigning variable h");
      current_statement__ = 24;
      for (int i = 1; i <= p; ++i) {
        current_statement__ = 22;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_ar, "prior_ar",
                stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
          current_statement__ = 21;
          stan::model::assign(ar,
            stan::model::rvalue(ar0, "ar0", stan::model::index_uni(i)),
            "assigning variable ar", stan::model::index_uni(i));
        } else {
          current_statement__ = 20;
          stan::model::assign(ar, ((2 *
            stan::model::rvalue(ar0, "ar0", stan::model::index_uni(i))) - 1),
            "assigning variable ar", stan::model::index_uni(i));
        }
      }
      current_statement__ = 29;
      for (int i = 1; i <= q; ++i) {
        current_statement__ = 27;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_ma, "prior_ma",
                stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
          current_statement__ = 26;
          stan::model::assign(ma,
            stan::model::rvalue(ma0, "ma0", stan::model::index_uni(i)),
            "assigning variable ma", stan::model::index_uni(i));
        } else {
          current_statement__ = 25;
          stan::model::assign(ma, ((2 *
            stan::model::rvalue(ma0, "ma0", stan::model::index_uni(i))) - 1),
            "assigning variable ma", stan::model::index_uni(i));
        }
      }
      current_statement__ = 32;
      if (stan::math::logical_eq(
            stan::model::rvalue(prior_beta, "prior_beta",
              stan::model::index_uni(1), stan::model::index_uni(4)), 1)) {
        current_statement__ = 31;
        beta = beta0;
      } else {
        current_statement__ = 30;
        beta = ((2 * beta0) - 1);
      }
      current_statement__ = 35;
      if (stan::math::logical_gt(d1, 0)) {
        current_statement__ = 34;
        stan::model::assign(mu,
          stan::math::add(mu0, stan::math::multiply(xreg, breg)),
          "assigning variable mu");
      } else {
        current_statement__ = 33;
        stan::model::assign(mu, stan::math::rep_vector(0, n),
          "assigning variable mu");
      }
      current_statement__ = 36;
      stan::model::assign(mu, mu0, "assigning variable mu",
        stan::model::index_uni(1));
      current_statement__ = 37;
      stan::model::assign(h,
        (stan::model::rvalue(h, "h", stan::model::index_uni(1)) + alpha),
        "assigning variable h", stan::model::index_uni(1));
      current_statement__ = 38;
      stan::model::assign(epsilon,
        (stan::model::rvalue(y, "y", stan::model::index_uni(1)) -
        stan::model::rvalue(mu, "mu", stan::model::index_uni(1))),
        "assigning variable epsilon", stan::model::index_uni(1));
      current_statement__ = 52;
      for (int i = 2; i <= n; ++i) {
        current_statement__ = 39;
        stan::model::assign(mu, mu0, "assigning variable mu",
          stan::model::index_uni(i));
        current_statement__ = 40;
        stan::model::assign(h,
          (stan::model::rvalue(h, "h", stan::model::index_uni(i)) + alpha),
          "assigning variable h", stan::model::index_uni(i));
        current_statement__ = 44;
        if (stan::math::logical_gt(p, 0)) {
          current_statement__ = 43;
          for (int j = 1; j <= p; ++j) {
            current_statement__ = 42;
            if (stan::math::logical_gt(i, j)) {
              current_statement__ = 41;
              stan::model::assign(mu,
                (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
                (stan::model::rvalue(y, "y", stan::model::index_uni((i - j)))
                * stan::model::rvalue(ar, "ar", stan::model::index_uni(j)))),
                "assigning variable mu", stan::model::index_uni(i));
            }
          }
        }
        current_statement__ = 48;
        if (stan::math::logical_gt(q, 0)) {
          current_statement__ = 47;
          for (int j = 1; j <= q; ++j) {
            current_statement__ = 46;
            if (stan::math::logical_gt(i, j)) {
              current_statement__ = 45;
              stan::model::assign(mu,
                (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
                (stan::model::rvalue(epsilon, "epsilon",
                   stan::model::index_uni((i - j))) *
                stan::model::rvalue(ma, "ma", stan::model::index_uni(j)))),
                "assigning variable mu", stan::model::index_uni(i));
            }
          }
        }
        current_statement__ = 49;
        stan::model::assign(epsilon,
          (stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
          stan::model::rvalue(mu, "mu", stan::model::index_uni(i))),
          "assigning variable epsilon", stan::model::index_uni(i));
        current_statement__ = 50;
        stan::model::assign(h,
          (stan::model::rvalue(h, "h", stan::model::index_uni(i)) + (beta *
          (stan::model::rvalue(h, "h", stan::model::index_uni((i - 1))) -
          alpha))), "assigning variable h", stan::model::index_uni(i));
      }
      {
        current_statement__ = 82;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_mu0, "prior_mu0",
                stan::model::index_uni(4)), 1)) {
          current_statement__ = 81;
          lp_accum__.add(stan::math::normal_lpdf<false>(mu0,
                           stan::model::rvalue(prior_mu0, "prior_mu0",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(prior_mu0, "prior_mu0",
                             stan::model::index_uni(2))));
        } else {
          current_statement__ = 80;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_mu0, "prior_mu0",
                  stan::model::index_uni(4)), 2)) {
            current_statement__ = 79;
            lp_accum__.add(stan::math::beta_lpdf<false>(mu0,
                             stan::model::rvalue(prior_mu0, "prior_mu0",
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_mu0, "prior_mu0",
                               stan::model::index_uni(2))));
          } else {
            current_statement__ = 78;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_mu0, "prior_mu0",
                    stan::model::index_uni(4)), 3)) {
              current_statement__ = 77;
              lp_accum__.add(stan::math::uniform_lpdf<false>(mu0,
                               stan::model::rvalue(prior_mu0, "prior_mu0",
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_mu0, "prior_mu0",
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 76;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_mu0, "prior_mu0",
                      stan::model::index_uni(4)), 4)) {
                current_statement__ = 75;
                lp_accum__.add(stan::math::student_t_lpdf<false>(mu0,
                                 stan::model::rvalue(prior_mu0, "prior_mu0",
                                   stan::model::index_uni(3)),
                                 stan::model::rvalue(prior_mu0, "prior_mu0",
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_mu0, "prior_mu0",
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 74;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_mu0, "prior_mu0",
                        stan::model::index_uni(4)), 5)) {
                  current_statement__ = 73;
                  lp_accum__.add(stan::math::cauchy_lpdf<false>(mu0,
                                   stan::model::rvalue(prior_mu0,
                                     "prior_mu0", stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_mu0,
                                     "prior_mu0", stan::model::index_uni(2))));
                } else {
                  current_statement__ = 72;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_mu0, "prior_mu0",
                          stan::model::index_uni(4)), 6)) {
                    current_statement__ = 71;
                    lp_accum__.add(stan::math::inv_gamma_lpdf<false>(mu0,
                                     stan::model::rvalue(prior_mu0,
                                       "prior_mu0", stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_mu0,
                                       "prior_mu0", stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 70;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_mu0, "prior_mu0",
                            stan::model::index_uni(4)), 7)) {
                      current_statement__ = 69;
                      lp_accum__.add(stan::math::inv_chi_square_lpdf<false>(
                                       mu0,
                                       stan::model::rvalue(prior_mu0,
                                         "prior_mu0",
                                         stan::model::index_uni(3))));
                    } else {
                      current_statement__ = 68;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_mu0, "prior_mu0",
                              stan::model::index_uni(4)), 8)) {
                        current_statement__ = 67;
                        lp_accum__.add(-(stan::math::log(sigma0)));
                      } else {
                        current_statement__ = 66;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_mu0, "prior_mu0",
                                stan::model::index_uni(4)), 9)) {
                          current_statement__ = 65;
                          lp_accum__.add(stan::math::gamma_lpdf<false>(mu0,
                                           stan::model::rvalue(prior_mu0,
                                             "prior_mu0",
                                             stan::model::index_uni(1)),
                                           stan::model::rvalue(prior_mu0,
                                             "prior_mu0",
                                             stan::model::index_uni(2))));
                        } else {
                          current_statement__ = 64;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_mu0, "prior_mu0",
                                  stan::model::index_uni(4)), 10)) {
                            current_statement__ = 63;
                            lp_accum__.add(stan::math::exponential_lpdf<
                                             false>(mu0,
                                             stan::model::rvalue(prior_mu0,
                                               "prior_mu0",
                                               stan::model::index_uni(2))));
                          } else {
                            current_statement__ = 62;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_mu0, "prior_mu0",
                                    stan::model::index_uni(4)), 11)) {
                              current_statement__ = 61;
                              lp_accum__.add(stan::math::chi_square_lpdf<
                                               false>(mu0,
                                               stan::model::rvalue(prior_mu0,
                                                 "prior_mu0",
                                                 stan::model::index_uni(3))));
                            } else {
                              current_statement__ = 60;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_mu0,
                                      "prior_mu0", stan::model::index_uni(4)),
                                    12)) {
                                current_statement__ = 59;
                                lp_accum__.add(stan::math::double_exponential_lpdf<
                                                 false>(mu0,
                                                 stan::model::rvalue(
                                                   prior_mu0, "prior_mu0",
                                                   stan::model::index_uni(1)),
                                                 stan::model::rvalue(
                                                   prior_mu0, "prior_mu0",
                                                   stan::model::index_uni(2))));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 106;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_sigma0, "prior_sigma0",
                stan::model::index_uni(4)), 1)) {
          current_statement__ = 105;
          lp_accum__.add(stan::math::normal_lpdf<false>(sigma0,
                           stan::model::rvalue(prior_sigma0, "prior_sigma0",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(prior_sigma0, "prior_sigma0",
                             stan::model::index_uni(2))));
        } else {
          current_statement__ = 104;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_sigma0, "prior_sigma0",
                  stan::model::index_uni(4)), 2)) {
            current_statement__ = 103;
            lp_accum__.add(stan::math::beta_lpdf<false>(sigma0,
                             stan::model::rvalue(prior_sigma0,
                               "prior_sigma0", stan::model::index_uni(1)),
                             stan::model::rvalue(prior_sigma0,
                               "prior_sigma0", stan::model::index_uni(2))));
          } else {
            current_statement__ = 102;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_sigma0, "prior_sigma0",
                    stan::model::index_uni(4)), 3)) {
              current_statement__ = 101;
              lp_accum__.add(stan::math::uniform_lpdf<false>(sigma0,
                               stan::model::rvalue(prior_sigma0,
                                 "prior_sigma0", stan::model::index_uni(1)),
                               stan::model::rvalue(prior_sigma0,
                                 "prior_sigma0", stan::model::index_uni(2))));
            } else {
              current_statement__ = 100;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_sigma0, "prior_sigma0",
                      stan::model::index_uni(4)), 4)) {
                current_statement__ = 99;
                lp_accum__.add(stan::math::student_t_lpdf<false>(sigma0,
                                 stan::model::rvalue(prior_sigma0,
                                   "prior_sigma0", stan::model::index_uni(3)),
                                 stan::model::rvalue(prior_sigma0,
                                   "prior_sigma0", stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_sigma0,
                                   "prior_sigma0", stan::model::index_uni(2))));
              } else {
                current_statement__ = 98;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_sigma0, "prior_sigma0",
                        stan::model::index_uni(4)), 5)) {
                  current_statement__ = 97;
                  lp_accum__.add(stan::math::cauchy_lpdf<false>(sigma0,
                                   stan::model::rvalue(prior_sigma0,
                                     "prior_sigma0",
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_sigma0,
                                     "prior_sigma0",
                                     stan::model::index_uni(2))));
                } else {
                  current_statement__ = 96;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_sigma0, "prior_sigma0",
                          stan::model::index_uni(4)), 6)) {
                    current_statement__ = 95;
                    lp_accum__.add(stan::math::inv_gamma_lpdf<false>(sigma0,
                                     stan::model::rvalue(prior_sigma0,
                                       "prior_sigma0",
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_sigma0,
                                       "prior_sigma0",
                                       stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 94;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_sigma0, "prior_sigma0",
                            stan::model::index_uni(4)), 7)) {
                      current_statement__ = 93;
                      lp_accum__.add(stan::math::inv_chi_square_lpdf<false>(
                                       sigma0,
                                       stan::model::rvalue(prior_sigma0,
                                         "prior_sigma0",
                                         stan::model::index_uni(3))));
                    } else {
                      current_statement__ = 92;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_sigma0, "prior_sigma0",
                              stan::model::index_uni(4)), 8)) {
                        current_statement__ = 91;
                        lp_accum__.add(-(stan::math::log(sigma0)));
                      } else {
                        current_statement__ = 90;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_sigma0,
                                "prior_sigma0", stan::model::index_uni(4)), 9)) {
                          current_statement__ = 89;
                          lp_accum__.add(stan::math::gamma_lpdf<false>(
                                           sigma0,
                                           stan::model::rvalue(prior_sigma0,
                                             "prior_sigma0",
                                             stan::model::index_uni(1)),
                                           stan::model::rvalue(prior_sigma0,
                                             "prior_sigma0",
                                             stan::model::index_uni(2))));
                        } else {
                          current_statement__ = 88;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_sigma0,
                                  "prior_sigma0", stan::model::index_uni(4)),
                                10)) {
                            current_statement__ = 87;
                            lp_accum__.add(stan::math::exponential_lpdf<
                                             false>(sigma0,
                                             stan::model::rvalue(
                                               prior_sigma0, "prior_sigma0",
                                               stan::model::index_uni(2))));
                          } else {
                            current_statement__ = 86;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_sigma0,
                                    "prior_sigma0", stan::model::index_uni(4)),
                                  11)) {
                              current_statement__ = 85;
                              lp_accum__.add(stan::math::chi_square_lpdf<
                                               false>(sigma0,
                                               stan::model::rvalue(
                                                 prior_sigma0,
                                                 "prior_sigma0",
                                                 stan::model::index_uni(3))));
                            } else {
                              current_statement__ = 84;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_sigma0,
                                      "prior_sigma0",
                                      stan::model::index_uni(4)), 12)) {
                                current_statement__ = 83;
                                lp_accum__.add(stan::math::double_exponential_lpdf<
                                                 false>(sigma0,
                                                 stan::model::rvalue(
                                                   prior_sigma0,
                                                   "prior_sigma0",
                                                   stan::model::index_uni(1)),
                                                 stan::model::rvalue(
                                                   prior_sigma0,
                                                   "prior_sigma0",
                                                   stan::model::index_uni(2))));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 134;
        if (stan::math::logical_gt(d1, 0)) {
          current_statement__ = 132;
          for (int i = 1; i <= d1; ++i) {
            current_statement__ = 130;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_breg, "prior_breg",
                    stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
              current_statement__ = 129;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(breg, "breg",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(prior_breg, "prior_breg",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_breg, "prior_breg",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 128;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_breg, "prior_breg",
                      stan::model::index_uni(i), stan::model::index_uni(4)),
                    2)) {
                current_statement__ = 127;
                lp_accum__.add(stan::math::beta_lpdf<false>(
                                 stan::model::rvalue(breg, "breg",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(prior_breg,
                                   "prior_breg", stan::model::index_uni(i),
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_breg,
                                   "prior_breg", stan::model::index_uni(i),
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 126;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_breg, "prior_breg",
                        stan::model::index_uni(i), stan::model::index_uni(4)),
                      3)) {
                  current_statement__ = 125;
                  lp_accum__.add(stan::math::uniform_lpdf<false>(
                                   stan::model::rvalue(breg, "breg",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(prior_breg,
                                     "prior_breg", stan::model::index_uni(i),
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_breg,
                                     "prior_breg", stan::model::index_uni(i),
                                     stan::model::index_uni(2))));
                } else {
                  current_statement__ = 124;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_breg, "prior_breg",
                          stan::model::index_uni(i),
                          stan::model::index_uni(4)), 4)) {
                    current_statement__ = 123;
                    lp_accum__.add(stan::math::student_t_lpdf<false>(
                                     stan::model::rvalue(breg, "breg",
                                       stan::model::index_uni(i)),
                                     stan::model::rvalue(prior_breg,
                                       "prior_breg",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(3)),
                                     stan::model::rvalue(prior_breg,
                                       "prior_breg",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_breg,
                                       "prior_breg",
                                       stan::model::index_uni(i),
                                       stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 122;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_breg, "prior_breg",
                            stan::model::index_uni(i),
                            stan::model::index_uni(4)), 5)) {
                      current_statement__ = 121;
                      lp_accum__.add(stan::math::cauchy_lpdf<false>(
                                       stan::model::rvalue(breg, "breg",
                                         stan::model::index_uni(i)),
                                       stan::model::rvalue(prior_breg,
                                         "prior_breg",
                                         stan::model::index_uni(i),
                                         stan::model::index_uni(1)),
                                       stan::model::rvalue(prior_breg,
                                         "prior_breg",
                                         stan::model::index_uni(i),
                                         stan::model::index_uni(2))));
                    } else {
                      current_statement__ = 120;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_breg, "prior_breg",
                              stan::model::index_uni(i),
                              stan::model::index_uni(4)), 6)) {
                        current_statement__ = 119;
                        lp_accum__.add(stan::math::inv_gamma_lpdf<false>(
                                         stan::model::rvalue(breg, "breg",
                                           stan::model::index_uni(i)),
                                         stan::model::rvalue(prior_breg,
                                           "prior_breg",
                                           stan::model::index_uni(i),
                                           stan::model::index_uni(1)),
                                         stan::model::rvalue(prior_breg,
                                           "prior_breg",
                                           stan::model::index_uni(i),
                                           stan::model::index_uni(2))));
                      } else {
                        current_statement__ = 118;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_breg, "prior_breg",
                                stan::model::index_uni(i),
                                stan::model::index_uni(4)), 7)) {
                          current_statement__ = 117;
                          lp_accum__.add(stan::math::inv_chi_square_lpdf<
                                           false>(
                                           stan::model::rvalue(breg, "breg",
                                             stan::model::index_uni(i)),
                                           stan::model::rvalue(prior_breg,
                                             "prior_breg",
                                             stan::model::index_uni(i),
                                             stan::model::index_uni(3))));
                        } else {
                          current_statement__ = 116;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_breg, "prior_breg",
                                  stan::model::index_uni(i),
                                  stan::model::index_uni(4)), 8)) {
                            current_statement__ = 115;
                            lp_accum__.add(-(stan::math::log(sigma0)));
                          } else {
                            current_statement__ = 114;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_breg,
                                    "prior_breg", stan::model::index_uni(i),
                                    stan::model::index_uni(4)), 9)) {
                              current_statement__ = 113;
                              lp_accum__.add(stan::math::gamma_lpdf<false>(
                                               stan::model::rvalue(breg,
                                                 "breg",
                                                 stan::model::index_uni(i)),
                                               stan::model::rvalue(
                                                 prior_breg, "prior_breg",
                                                 stan::model::index_uni(i),
                                                 stan::model::index_uni(1)),
                                               stan::model::rvalue(
                                                 prior_breg, "prior_breg",
                                                 stan::model::index_uni(i),
                                                 stan::model::index_uni(2))));
                            } else {
                              current_statement__ = 112;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_breg,
                                      "prior_breg",
                                      stan::model::index_uni(i),
                                      stan::model::index_uni(4)), 10)) {
                                current_statement__ = 111;
                                lp_accum__.add(stan::math::exponential_lpdf<
                                                 false>(
                                                 stan::model::rvalue(breg,
                                                   "breg",
                                                   stan::model::index_uni(i)),
                                                 stan::model::rvalue(
                                                   prior_breg, "prior_breg",
                                                   stan::model::index_uni(i),
                                                   stan::model::index_uni(2))));
                              } else {
                                current_statement__ = 110;
                                if (stan::math::logical_eq(
                                      stan::model::rvalue(prior_breg,
                                        "prior_breg",
                                        stan::model::index_uni(i),
                                        stan::model::index_uni(4)), 11)) {
                                  current_statement__ = 109;
                                  lp_accum__.add(stan::math::chi_square_lpdf<
                                                   false>(
                                                   stan::model::rvalue(breg,
                                                     "breg",
                                                     stan::model::index_uni(i)),
                                                   stan::model::rvalue(
                                                     prior_breg,
                                                     "prior_breg",
                                                     stan::model::index_uni(i),
                                                     stan::model::index_uni(3))));
                                } else {
                                  current_statement__ = 108;
                                  if (stan::math::logical_eq(
                                        stan::model::rvalue(prior_breg,
                                          "prior_breg",
                                          stan::model::index_uni(i),
                                          stan::model::index_uni(4)), 12)) {
                                    current_statement__ = 107;
                                    lp_accum__.add(stan::math::double_exponential_lpdf<
                                                     false>(
                                                     stan::model::rvalue(
                                                       breg, "breg",
                                                       stan::model::index_uni(
                                                         i)),
                                                     stan::model::rvalue(
                                                       prior_breg,
                                                       "prior_breg",
                                                       stan::model::index_uni(
                                                         i),
                                                       stan::model::index_uni(
                                                         1)),
                                                     stan::model::rvalue(
                                                       prior_breg,
                                                       "prior_breg",
                                                       stan::model::index_uni(
                                                         i),
                                                       stan::model::index_uni(
                                                         2))));
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 144;
        if (stan::math::logical_gt(p, 0)) {
          current_statement__ = 142;
          for (int i = 1; i <= p; ++i) {
            current_statement__ = 140;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_ar, "prior_ar",
                    stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
              current_statement__ = 139;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(ar0, "ar0",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(prior_ar, "prior_ar",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_ar, "prior_ar",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 138;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_ar, "prior_ar",
                      stan::model::index_uni(i), stan::model::index_uni(4)),
                    2)) {
                current_statement__ = 137;
                lp_accum__.add(stan::math::beta_lpdf<false>(
                                 stan::math::abs(
                                   stan::model::rvalue(ar0, "ar0",
                                     stan::model::index_uni(i))),
                                 stan::model::rvalue(prior_ar, "prior_ar",
                                   stan::model::index_uni(i),
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_ar, "prior_ar",
                                   stan::model::index_uni(i),
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 136;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_ar, "prior_ar",
                        stan::model::index_uni(i), stan::model::index_uni(4)),
                      3)) {
                  current_statement__ = 135;
                  lp_accum__.add(stan::math::uniform_lpdf<false>(
                                   stan::model::rvalue(ar0, "ar0",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(prior_ar, "prior_ar",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_ar, "prior_ar",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(2))));
                }
              }
            }
          }
        }
        current_statement__ = 154;
        if (stan::math::logical_gt(q, 0)) {
          current_statement__ = 152;
          for (int i = 1; i <= q; ++i) {
            current_statement__ = 150;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_ma, "prior_ma",
                    stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
              current_statement__ = 149;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(ma0, "ma0",
                                 stan::model::index_uni(i)),
                               stan::model::rvalue(prior_ma, "prior_ma",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_ma, "prior_ma",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 148;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_ma, "prior_ma",
                      stan::model::index_uni(i), stan::model::index_uni(4)),
                    2)) {
                current_statement__ = 147;
                lp_accum__.add(stan::math::beta_lpdf<false>(
                                 stan::math::abs(
                                   stan::model::rvalue(ma0, "ma0",
                                     stan::model::index_uni(i))),
                                 stan::model::rvalue(prior_ma, "prior_ma",
                                   stan::model::index_uni(i),
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_ma, "prior_ma",
                                   stan::model::index_uni(i),
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 146;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_ma, "prior_ma",
                        stan::model::index_uni(i), stan::model::index_uni(4)),
                      3)) {
                  current_statement__ = 145;
                  lp_accum__.add(stan::math::uniform_lpdf<false>(
                                   stan::model::rvalue(ma0, "ma0",
                                     stan::model::index_uni(i)),
                                   stan::model::rvalue(prior_ma, "prior_ma",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_ma, "prior_ma",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(2))));
                }
              }
            }
          }
        }
        current_statement__ = 178;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_alpha, "prior_alpha",
                stan::model::index_uni(1), stan::model::index_uni(4)), 1)) {
          current_statement__ = 177;
          lp_accum__.add(stan::math::normal_lpdf<false>(alpha,
                           stan::model::rvalue(prior_alpha, "prior_alpha",
                             stan::model::index_uni(1),
                             stan::model::index_uni(1)),
                           stan::model::rvalue(prior_alpha, "prior_alpha",
                             stan::model::index_uni(1),
                             stan::model::index_uni(2))));
        } else {
          current_statement__ = 176;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_alpha, "prior_alpha",
                  stan::model::index_uni(1), stan::model::index_uni(4)), 2)) {
            current_statement__ = 175;
            lp_accum__.add(stan::math::beta_lpdf<false>(alpha,
                             stan::model::rvalue(prior_alpha, "prior_alpha",
                               stan::model::index_uni(1),
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_alpha, "prior_alpha",
                               stan::model::index_uni(1),
                               stan::model::index_uni(2))));
          } else {
            current_statement__ = 174;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_alpha, "prior_alpha",
                    stan::model::index_uni(1), stan::model::index_uni(4)), 3)) {
              current_statement__ = 173;
              lp_accum__.add(stan::math::uniform_lpdf<false>(alpha,
                               stan::model::rvalue(prior_alpha,
                                 "prior_alpha", stan::model::index_uni(1),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_alpha,
                                 "prior_alpha", stan::model::index_uni(1),
                                 stan::model::index_uni(2))));
            } else {
              current_statement__ = 172;
              if (stan::math::logical_eq(
                    stan::model::rvalue(prior_alpha, "prior_alpha",
                      stan::model::index_uni(1), stan::model::index_uni(4)),
                    4)) {
                current_statement__ = 171;
                lp_accum__.add(stan::math::student_t_lpdf<false>(alpha,
                                 stan::model::rvalue(prior_alpha,
                                   "prior_alpha", stan::model::index_uni(1),
                                   stan::model::index_uni(3)),
                                 stan::model::rvalue(prior_alpha,
                                   "prior_alpha", stan::model::index_uni(1),
                                   stan::model::index_uni(1)),
                                 stan::model::rvalue(prior_alpha,
                                   "prior_alpha", stan::model::index_uni(1),
                                   stan::model::index_uni(2))));
              } else {
                current_statement__ = 170;
                if (stan::math::logical_eq(
                      stan::model::rvalue(prior_alpha, "prior_alpha",
                        stan::model::index_uni(1), stan::model::index_uni(4)),
                      5)) {
                  current_statement__ = 169;
                  lp_accum__.add(stan::math::cauchy_lpdf<false>(alpha,
                                   stan::model::rvalue(prior_alpha,
                                     "prior_alpha",
                                     stan::model::index_uni(1),
                                     stan::model::index_uni(1)),
                                   stan::model::rvalue(prior_alpha,
                                     "prior_alpha",
                                     stan::model::index_uni(1),
                                     stan::model::index_uni(2))));
                } else {
                  current_statement__ = 168;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(prior_alpha, "prior_alpha",
                          stan::model::index_uni(1),
                          stan::model::index_uni(4)), 6)) {
                    current_statement__ = 167;
                    lp_accum__.add(stan::math::inv_gamma_lpdf<false>(alpha,
                                     stan::model::rvalue(prior_alpha,
                                       "prior_alpha",
                                       stan::model::index_uni(1),
                                       stan::model::index_uni(1)),
                                     stan::model::rvalue(prior_alpha,
                                       "prior_alpha",
                                       stan::model::index_uni(1),
                                       stan::model::index_uni(2))));
                  } else {
                    current_statement__ = 166;
                    if (stan::math::logical_eq(
                          stan::model::rvalue(prior_alpha, "prior_alpha",
                            stan::model::index_uni(1),
                            stan::model::index_uni(4)), 7)) {
                      current_statement__ = 165;
                      lp_accum__.add(stan::math::inv_chi_square_lpdf<false>(
                                       alpha,
                                       stan::model::rvalue(prior_alpha,
                                         "prior_alpha",
                                         stan::model::index_uni(1),
                                         stan::model::index_uni(3))));
                    } else {
                      current_statement__ = 164;
                      if (stan::math::logical_eq(
                            stan::model::rvalue(prior_alpha, "prior_alpha",
                              stan::model::index_uni(1),
                              stan::model::index_uni(4)), 8)) {
                        current_statement__ = 163;
                        lp_accum__.add(-(stan::math::log(sigma0)));
                      } else {
                        current_statement__ = 162;
                        if (stan::math::logical_eq(
                              stan::model::rvalue(prior_alpha, "prior_alpha",
                                stan::model::index_uni(1),
                                stan::model::index_uni(4)), 9)) {
                          current_statement__ = 161;
                          lp_accum__.add(stan::math::gamma_lpdf<false>(alpha,
                                           stan::model::rvalue(prior_alpha,
                                             "prior_alpha",
                                             stan::model::index_uni(1),
                                             stan::model::index_uni(1)),
                                           stan::model::rvalue(prior_alpha,
                                             "prior_alpha",
                                             stan::model::index_uni(1),
                                             stan::model::index_uni(2))));
                        } else {
                          current_statement__ = 160;
                          if (stan::math::logical_eq(
                                stan::model::rvalue(prior_alpha,
                                  "prior_alpha", stan::model::index_uni(1),
                                  stan::model::index_uni(4)), 10)) {
                            current_statement__ = 159;
                            lp_accum__.add(stan::math::exponential_lpdf<
                                             false>(alpha,
                                             stan::model::rvalue(prior_alpha,
                                               "prior_alpha",
                                               stan::model::index_uni(1),
                                               stan::model::index_uni(2))));
                          } else {
                            current_statement__ = 158;
                            if (stan::math::logical_eq(
                                  stan::model::rvalue(prior_alpha,
                                    "prior_alpha", stan::model::index_uni(1),
                                    stan::model::index_uni(4)), 11)) {
                              current_statement__ = 157;
                              lp_accum__.add(stan::math::chi_square_lpdf<
                                               false>(alpha,
                                               stan::model::rvalue(
                                                 prior_alpha, "prior_alpha",
                                                 stan::model::index_uni(1),
                                                 stan::model::index_uni(3))));
                            } else {
                              current_statement__ = 156;
                              if (stan::math::logical_eq(
                                    stan::model::rvalue(prior_alpha,
                                      "prior_alpha",
                                      stan::model::index_uni(1),
                                      stan::model::index_uni(4)), 12)) {
                                current_statement__ = 155;
                                lp_accum__.add(stan::math::double_exponential_lpdf<
                                                 false>(alpha,
                                                 stan::model::rvalue(
                                                   prior_alpha,
                                                   "prior_alpha",
                                                   stan::model::index_uni(1),
                                                   stan::model::index_uni(1)),
                                                 stan::model::rvalue(
                                                   prior_alpha,
                                                   "prior_alpha",
                                                   stan::model::index_uni(1),
                                                   stan::model::index_uni(2))));
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        current_statement__ = 184;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_beta, "prior_beta",
                stan::model::index_uni(1), stan::model::index_uni(4)), 1)) {
          current_statement__ = 183;
          lp_accum__.add(stan::math::normal_lpdf<false>(beta0,
                           stan::model::rvalue(prior_beta, "prior_beta",
                             stan::model::index_uni(1),
                             stan::model::index_uni(1)),
                           stan::model::rvalue(prior_beta, "prior_beta",
                             stan::model::index_uni(1),
                             stan::model::index_uni(2))));
        } else {
          current_statement__ = 182;
          if (stan::math::logical_eq(
                stan::model::rvalue(prior_beta, "prior_beta",
                  stan::model::index_uni(1), stan::model::index_uni(4)), 2)) {
            current_statement__ = 181;
            lp_accum__.add(stan::math::beta_lpdf<false>(beta0,
                             stan::model::rvalue(prior_beta, "prior_beta",
                               stan::model::index_uni(1),
                               stan::model::index_uni(1)),
                             stan::model::rvalue(prior_beta, "prior_beta",
                               stan::model::index_uni(1),
                               stan::model::index_uni(2))));
          } else {
            current_statement__ = 180;
            if (stan::math::logical_eq(
                  stan::model::rvalue(prior_beta, "prior_beta",
                    stan::model::index_uni(1), stan::model::index_uni(4)), 3)) {
              current_statement__ = 179;
              lp_accum__.add(stan::math::uniform_lpdf<false>(beta0,
                               stan::model::rvalue(prior_beta, "prior_beta",
                                 stan::model::index_uni(1),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(prior_beta, "prior_beta",
                                 stan::model::index_uni(1),
                                 stan::model::index_uni(2))));
            }
          }
        }
        current_statement__ = 185;
        lp_accum__.add(stan::math::normal_lpdf<false>(hstd, 0, 1));
        current_statement__ = 186;
        lp_accum__.add(stan::math::normal_lpdf<false>(epsilon, 0,
                         stan::math::exp(stan::math::divide(h, 2))));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "model_SVM_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto mu0 = in__.template read<local_scalar_t__>();
      current_statement__ = 2;
      auto alpha = in__.template read<local_scalar_t__>();
      current_statement__ = 3;
      auto breg =
        in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(d1);
      current_statement__ = 4;
      auto ar0 =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-(1), 1, lp__, p);
      current_statement__ = 5;
      auto ma0 =
        in__.template read_constrain_lub<
          Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(-(1), 1, lp__, q);
      current_statement__ = 6;
      auto beta0 =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(-(1),
          1, lp__);
      current_statement__ = 7;
      auto sigma0 =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 8;
      auto hstd = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(n);
      Eigen::Matrix<double,-1,1> ar =
        Eigen::Matrix<double,-1,1>::Constant(p,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> ma =
        Eigen::Matrix<double,-1,1>::Constant(q,
          std::numeric_limits<double>::quiet_NaN());
      double beta = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> epsilon =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> h =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(mu0);
      out__.write(alpha);
      out__.write(breg);
      out__.write(ar0);
      out__.write(ma0);
      out__.write(beta0);
      out__.write(sigma0);
      out__.write(hstd);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 14;
      stan::model::assign(h, stan::math::multiply(hstd, sigma0),
        "assigning variable h");
      current_statement__ = 24;
      for (int i = 1; i <= p; ++i) {
        current_statement__ = 22;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_ar, "prior_ar",
                stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
          current_statement__ = 21;
          stan::model::assign(ar,
            stan::model::rvalue(ar0, "ar0", stan::model::index_uni(i)),
            "assigning variable ar", stan::model::index_uni(i));
        } else {
          current_statement__ = 20;
          stan::model::assign(ar, ((2 *
            stan::model::rvalue(ar0, "ar0", stan::model::index_uni(i))) - 1),
            "assigning variable ar", stan::model::index_uni(i));
        }
      }
      current_statement__ = 29;
      for (int i = 1; i <= q; ++i) {
        current_statement__ = 27;
        if (stan::math::logical_eq(
              stan::model::rvalue(prior_ma, "prior_ma",
                stan::model::index_uni(i), stan::model::index_uni(4)), 1)) {
          current_statement__ = 26;
          stan::model::assign(ma,
            stan::model::rvalue(ma0, "ma0", stan::model::index_uni(i)),
            "assigning variable ma", stan::model::index_uni(i));
        } else {
          current_statement__ = 25;
          stan::model::assign(ma, ((2 *
            stan::model::rvalue(ma0, "ma0", stan::model::index_uni(i))) - 1),
            "assigning variable ma", stan::model::index_uni(i));
        }
      }
      current_statement__ = 32;
      if (stan::math::logical_eq(
            stan::model::rvalue(prior_beta, "prior_beta",
              stan::model::index_uni(1), stan::model::index_uni(4)), 1)) {
        current_statement__ = 31;
        beta = beta0;
      } else {
        current_statement__ = 30;
        beta = ((2 * beta0) - 1);
      }
      current_statement__ = 35;
      if (stan::math::logical_gt(d1, 0)) {
        current_statement__ = 34;
        stan::model::assign(mu,
          stan::math::add(mu0, stan::math::multiply(xreg, breg)),
          "assigning variable mu");
      } else {
        current_statement__ = 33;
        stan::model::assign(mu, stan::math::rep_vector(0, n),
          "assigning variable mu");
      }
      current_statement__ = 36;
      stan::model::assign(mu, mu0, "assigning variable mu",
        stan::model::index_uni(1));
      current_statement__ = 37;
      stan::model::assign(h,
        (stan::model::rvalue(h, "h", stan::model::index_uni(1)) + alpha),
        "assigning variable h", stan::model::index_uni(1));
      current_statement__ = 38;
      stan::model::assign(epsilon,
        (stan::model::rvalue(y, "y", stan::model::index_uni(1)) -
        stan::model::rvalue(mu, "mu", stan::model::index_uni(1))),
        "assigning variable epsilon", stan::model::index_uni(1));
      current_statement__ = 52;
      for (int i = 2; i <= n; ++i) {
        current_statement__ = 39;
        stan::model::assign(mu, mu0, "assigning variable mu",
          stan::model::index_uni(i));
        current_statement__ = 40;
        stan::model::assign(h,
          (stan::model::rvalue(h, "h", stan::model::index_uni(i)) + alpha),
          "assigning variable h", stan::model::index_uni(i));
        current_statement__ = 44;
        if (stan::math::logical_gt(p, 0)) {
          current_statement__ = 43;
          for (int j = 1; j <= p; ++j) {
            current_statement__ = 42;
            if (stan::math::logical_gt(i, j)) {
              current_statement__ = 41;
              stan::model::assign(mu,
                (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
                (stan::model::rvalue(y, "y", stan::model::index_uni((i - j)))
                * stan::model::rvalue(ar, "ar", stan::model::index_uni(j)))),
                "assigning variable mu", stan::model::index_uni(i));
            }
          }
        }
        current_statement__ = 48;
        if (stan::math::logical_gt(q, 0)) {
          current_statement__ = 47;
          for (int j = 1; j <= q; ++j) {
            current_statement__ = 46;
            if (stan::math::logical_gt(i, j)) {
              current_statement__ = 45;
              stan::model::assign(mu,
                (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) +
                (stan::model::rvalue(epsilon, "epsilon",
                   stan::model::index_uni((i - j))) *
                stan::model::rvalue(ma, "ma", stan::model::index_uni(j)))),
                "assigning variable mu", stan::model::index_uni(i));
            }
          }
        }
        current_statement__ = 49;
        stan::model::assign(epsilon,
          (stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
          stan::model::rvalue(mu, "mu", stan::model::index_uni(i))),
          "assigning variable epsilon", stan::model::index_uni(i));
        current_statement__ = 50;
        stan::model::assign(h,
          (stan::model::rvalue(h, "h", stan::model::index_uni(i)) + (beta *
          (stan::model::rvalue(h, "h", stan::model::index_uni((i - 1))) -
          alpha))), "assigning variable h", stan::model::index_uni(i));
      }
      if (emit_transformed_parameters__) {
        out__.write(ar);
        out__.write(ma);
        out__.write(beta);
        out__.write(mu);
        out__.write(epsilon);
        out__.write(h);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> sigma =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 15;
      stan::model::assign(sigma, stan::math::exp(stan::math::divide(h, 2)),
        "assigning variable sigma");
      Eigen::Matrix<double,-1,1> fit =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> residuals =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(n,
          std::numeric_limits<double>::quiet_NaN());
      double loglik = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 19;
      loglik = 0;
      current_statement__ = 56;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 53;
        stan::model::assign(residuals,
          stan::math::normal_rng(
            stan::model::rvalue(epsilon, "epsilon", stan::model::index_uni(i)),
            stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)),
            base_rng__), "assigning variable residuals",
          stan::model::index_uni(i));
        current_statement__ = 54;
        stan::model::assign(log_lik,
          stan::math::normal_lpdf<false>(
            stan::model::rvalue(y, "y", stan::model::index_uni(i)),
            stan::model::rvalue(mu, "mu", stan::model::index_uni(i)),
            stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i))),
          "assigning variable log_lik", stan::model::index_uni(i));
      }
      current_statement__ = 57;
      stan::model::assign(fit, stan::math::subtract(y, residuals),
        "assigning variable fit");
      current_statement__ = 58;
      loglik = stan::math::sum(log_lik);
      out__.write(sigma);
      out__.write(fit);
      out__.write(residuals);
      out__.write(log_lik);
      out__.write(loglik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      local_scalar_t__ mu0 = DUMMY_VAR__;
      current_statement__ = 1;
      mu0 = in__.read<local_scalar_t__>();
      out__.write(mu0);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 2;
      alpha = in__.read<local_scalar_t__>();
      out__.write(alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> breg =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d1, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(breg,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(d1),
        "assigning variable breg");
      out__.write(breg);
      Eigen::Matrix<local_scalar_t__,-1,1> ar0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(ar0,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(p),
        "assigning variable ar0");
      out__.write_free_lub(-(1), 1, ar0);
      Eigen::Matrix<local_scalar_t__,-1,1> ma0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(q, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(ma0,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(q),
        "assigning variable ma0");
      out__.write_free_lub(-(1), 1, ma0);
      local_scalar_t__ beta0 = DUMMY_VAR__;
      current_statement__ = 6;
      beta0 = in__.read<local_scalar_t__>();
      out__.write_free_lub(-(1), 1, beta0);
      local_scalar_t__ sigma0 = DUMMY_VAR__;
      current_statement__ = 7;
      sigma0 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma0);
      Eigen::Matrix<local_scalar_t__,-1,1> hstd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(hstd,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n),
        "assigning variable hstd");
      out__.write(hstd);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "mu0", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "breg", "double",
        std::vector<size_t>{static_cast<size_t>(d1)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "ar0", "double",
        std::vector<size_t>{static_cast<size_t>(p)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "ma0", "double",
        std::vector<size_t>{static_cast<size_t>(q)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "beta0", "double",
        std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "sigma0", "double",
        std::vector<size_t>{});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "hstd", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ mu0 = DUMMY_VAR__;
      current_statement__ = 1;
      mu0 = context__.vals_r("mu0")[(1 - 1)];
      out__.write(mu0);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 2;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      out__.write(alpha);
      Eigen::Matrix<local_scalar_t__,-1,1> breg =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(d1, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> breg_flat__;
        current_statement__ = 3;
        breg_flat__ = context__.vals_r("breg");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= d1; ++sym1__) {
          stan::model::assign(breg, breg_flat__[(pos__ - 1)],
            "assigning variable breg", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(breg);
      Eigen::Matrix<local_scalar_t__,-1,1> ar0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> ar0_flat__;
        current_statement__ = 4;
        ar0_flat__ = context__.vals_r("ar0");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          stan::model::assign(ar0, ar0_flat__[(pos__ - 1)],
            "assigning variable ar0", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(-(1), 1, ar0);
      Eigen::Matrix<local_scalar_t__,-1,1> ma0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(q, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> ma0_flat__;
        current_statement__ = 5;
        ma0_flat__ = context__.vals_r("ma0");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
          stan::model::assign(ma0, ma0_flat__[(pos__ - 1)],
            "assigning variable ma0", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(-(1), 1, ma0);
      local_scalar_t__ beta0 = DUMMY_VAR__;
      current_statement__ = 6;
      beta0 = context__.vals_r("beta0")[(1 - 1)];
      out__.write_free_lub(-(1), 1, beta0);
      local_scalar_t__ sigma0 = DUMMY_VAR__;
      current_statement__ = 7;
      sigma0 = context__.vals_r("sigma0")[(1 - 1)];
      out__.write_free_lb(0, sigma0);
      Eigen::Matrix<local_scalar_t__,-1,1> hstd =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> hstd_flat__;
        current_statement__ = 8;
        hstd_flat__ = context__.vals_r("hstd");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          stan::model::assign(hstd, hstd_flat__[(pos__ - 1)],
            "assigning variable hstd", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(hstd);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"mu0", "alpha", "breg", "ar0", "ma0",
                "beta0", "sigma0", "hstd"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"ar", "ma", "beta", "mu", "epsilon", "h"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"sigma", "fit", "residuals", "log_lik", "loglik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(d1)},
                std::vector<size_t>{static_cast<size_t>(p)},
                std::vector<size_t>{static_cast<size_t>(q)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(n)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(p)},
             std::vector<size_t>{static_cast<size_t>(q)},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(n)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(n)},
             std::vector<size_t>{static_cast<size_t>(n)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "mu0");
    param_names__.emplace_back(std::string() + "alpha");
    for (int sym1__ = 1; sym1__ <= d1; ++sym1__) {
      param_names__.emplace_back(std::string() + "breg" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      param_names__.emplace_back(std::string() + "ar0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
      param_names__.emplace_back(std::string() + "ma0" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "beta0");
    param_names__.emplace_back(std::string() + "sigma0");
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      param_names__.emplace_back(std::string() + "hstd" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
        param_names__.emplace_back(std::string() + "ar" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
        param_names__.emplace_back(std::string() + "ma" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "beta");
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "epsilon" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "h" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "fit" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "residuals" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "loglik");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "mu0");
    param_names__.emplace_back(std::string() + "alpha");
    for (int sym1__ = 1; sym1__ <= d1; ++sym1__) {
      param_names__.emplace_back(std::string() + "breg" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      param_names__.emplace_back(std::string() + "ar0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
      param_names__.emplace_back(std::string() + "ma0" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "beta0");
    param_names__.emplace_back(std::string() + "sigma0");
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      param_names__.emplace_back(std::string() + "hstd" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
        param_names__.emplace_back(std::string() + "ar" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
        param_names__.emplace_back(std::string() + "ma" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "beta");
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "epsilon" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "h" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "fit" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "residuals" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "loglik");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"breg\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(d1) + "},\"block\":\"parameters\"},{\"name\":\"ar0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"ma0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"parameters\"},{\"name\":\"beta0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"hstd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"parameters\"},{\"name\":\"ar\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"h\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"fit\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"residuals\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"loglik\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"breg\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(d1) + "},\"block\":\"parameters\"},{\"name\":\"ar0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"ma0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"parameters\"},{\"name\":\"beta0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"hstd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"parameters\"},{\"name\":\"ar\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"h\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"fit\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"residuals\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"generated_quantities\"},{\"name\":\"loglik\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((1 + 1) + d1) + p) + q) + 1) + 1) + n);
    const size_t num_transformed = emit_transformed_parameters * ((((((p + q)
      + 1) + n) + n) + n));
    const size_t num_gen_quantities = emit_generated_quantities * (((((n + n)
      + n) + n) + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((1 + 1) + d1) + p) + q) + 1) + 1) + n);
    const size_t num_transformed = emit_transformed_parameters * ((((((p + q)
      + 1) + n) + n) + n));
    const size_t num_gen_quantities = emit_generated_quantities * (((((n + n)
      + n) + n) + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_SVM_namespace::model_SVM;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_SVM_namespace::profiles__;
}
#endif
#endif
